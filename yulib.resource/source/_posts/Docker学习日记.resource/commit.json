{"compress":true,"commitItems":[["d77d80e0-09f4-4fa4-b041-98d5b14fe949",1585296850966,"---\nlayout: post\ntitle: Lorem ipsum\ncategories: \n  - consectetur\n  - malesuada\ntags:\n  - semper\n  - fermentum\n---\n\n![Nulla euismod, vitae aliquet orci eleifend.]($appres/images/night.jpg)\n\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eu tempor dolor. Nulla hendrerit convallis purus et elementum. Suspendisse non magna vel justo tincidunt finibus. Nullam dui erat, malesuada eget viverra non, finibus a nisl.",[[1585296815746,["yueyuesama@DESKTOP-AH4OHTF",[[-1,115,"![Nulla euismod, vitae aliquet orci eleifend.]($appres/images/night.jpg)"]],[115,187],[115,115]]],[1585296819546,["yueyuesama@DESKTOP-AH4OHTF",[[1,115,"容器云工程师学习计划—第一天（3/18）"],[-1,117,"# Lorem ipsum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eu tempor dolor. Nulla hendrerit convallis purus et elementum. Suspendisse non magna vel justo tincidunt finibus. Nullam dui erat, malesuada eget viverra non, finibus a nisl."],[1,373,"明确整体学习框架\n\n1. 容器云平台的软件设计与研发工作\n2. 基于容器云的CI/CD软件\n3. DevOps 软件系统的设计与开发\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习框架中首先需要明白的就是什么是容器，这引出了我们的一个问题。\n\n1.什么是容器\n\n容器（container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\ndocker在Linux上共享内核，无需虚拟化，完全支持native功能（https://docs.docker.com/engine/installation/linux/）。 \n\ndocker在windows上，启用Hyper-V（https://docs.docker.com/docker-for-windows/)）或者虚拟化技术https://docs.docker.com/toolbox/toolbox_install_windows/，通过虚拟机来实现，不共享windows内核。 \n\ndocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（https://docs.docker.com/engine/installation/mac/ ），不共享macos内核。\n\n其次，能创建何种类型docker\n\ndocker在Linux上共享内核，只能创建Linux类docker。 \n\ndocker在windows上，可以创建Linux类docker和Windows类docker。 \n\ndocker在mac os上，只能创建Linux类docker，不能创建Mac OSX的docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用chroot命令讲根目录隔离一样，不过Docker运用的是内核（kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与cgroups进行实现，Windows下通过Hyper-V进行虚拟化。"]],[115,373],[1685,1685]]],[1585296840089,["yueyuesama@DESKTOP-AH4OHTF",[[1,115,"# "],[1,137,"## "],[1,166,"\n"],[1,183,"\n"],[1,204,"\n"],[-1,269,""],[1,269,"##  "],[-1,998,"L"],[1,999,"l"],[1,1028,"["],[1,1078,"](https://docs.docker.com/engine/installation/linux/%EF%BC%89)"],[1,1109,"[https://docs.docker.com/docker-for-windows/)]("],[1,1161,"["],[1,1217,"](https://docs.docker.com/toolbox/toolbox_install_windows/)"],[1,1287,"["],[1,1335,"](https://docs.docker.com/engine/installation/mac/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac)"],[-1,1376,"L"],[1,1377,"l"],[-1,1391,"L"],[1,1392,"l"],[-1,1427,"L"],[1,1428,"l"],[-1,1477,"L"],[1,1478,"l"],[1,1508,"。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（kernel）3.8版本支持的一些新特性，这使得Docker在linux上能获得几乎等同于Native的体验"]],[115,1509],[1909,1909]]],[1585296846341,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1911,"Docker的虚拟化最简单的其实就是隔离机制，类似于用chroot命令讲根目录隔离一样，不过Docker运用的是内核（kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\n"]],[1910,2026],[1910,1910]]],[1585296851941,["yueyuesama@DESKTOP-AH4OHTF",[[-1,115,"# 容器云工程师学习计划—第一天（3/18）"]],[115,137],[115,115]]],[1585296855417,["yueyuesama@DESKTOP-AH4OHTF",[[-1,116,"\n"]],[115,115],[114,114]]],[1585296856209,["yueyuesama@DESKTOP-AH4OHTF",[[-1,115,"\n"]],[114,114],[113,113]]],[1585296880490,["yueyuesama@DESKTOP-AH4OHTF",[[-1,24,"Lorem ipsum"],[1,35,"2020 阅读计划"]],[24,35],[33,33]]],[1585296884390,["yueyuesama@DESKTOP-AH4OHTF",[[-1,24,"2020 阅读计划"],[1,33,"Docker"]],[24,24],[30,30]]],[1585296888845,["yueyuesama@DESKTOP-AH4OHTF",[[1,30," 学习日记"]],[30,30],[35,35]]],[1585296894112,["yueyuesama@DESKTOP-AH4OHTF",[[-1,89,"sempe"],[1,94,"Docek"]],[89,89],[95,95]]],[1585296895174,["yueyuesama@DESKTOP-AH4OHTF",[[1,98,"\n  "]],[95,95],[98,98]]],[1585296896746,["yueyuesama@DESKTOP-AH4OHTF",[[-1,96,"  "]],[98,98],[96,96]]],[1585296897053,["yueyuesama@DESKTOP-AH4OHTF",[[-1,96,"\n"]],[96,96],[95,95]]],[1585296899895,["yueyuesama@DESKTOP-AH4OHTF",[[-1,100,"fermentum"],[1,109,"学习"]],[100,100],[102,102]]],[1585296909948,["yueyuesama@DESKTOP-AH4OHTF",[[-1,65,"  - malesuada"]],[69,78],[65,65]]],[1585296910294,["yueyuesama@DESKTOP-AH4OHTF",[[-1,65,"\n"]],[65,65],[64,64]]],[1585296913367,["yueyuesama@DESKTOP-AH4OHTF",[[-1,53,"consectetur"],[1,64,"日常"]],[53,53],[55,55]]],[1585296926270,["yueyuesama@DESKTOP-AH4OHTF",[[-1,54,"常"],[1,55,"记"]],[53,53],[55,55]]],[1585297034623,["yueyuesama@DESKTOP-AH4OHTF",[[1,85,"\n"]],[85,85],[86,86]]],[1585297041016,["yueyuesama@DESKTOP-AH4OHTF",[[1,85,"# DAY 1"]],[85,85],[92,92]]],[1585297041620,["yueyuesama@DESKTOP-AH4OHTF",[[1,93,"\n"]],[92,92],[93,93]]],[1585297049138,["yueyuesama@DESKTOP-AH4OHTF",[[-1,101,"学习"]],[101,103],[101,101]]],[1585297056132,["yueyuesama@DESKTOP-AH4OHTF",[[-1,99,"整体框架"],[1,103,"学习"]],[99,99],[101,101]]],[1585297057071,["yueyuesama@DESKTOP-AH4OHTF",[[1,101,"目标"]],[101,101],[103,103]]],[1585297066713,["yueyuesama@DESKTOP-AH4OHTF",[[-1,198,"框架"]],[198,200],[198,198]]],[1585297074053,["yueyuesama@DESKTOP-AH4OHTF",[[1,221,"第一"]],[221,221],[223,223]]],[1585297074366,["yueyuesama@DESKTOP-AH4OHTF",[[-1,223,"一"]],[223,223],[222,222]]],[1585297085147,["yueyuesama@DESKTOP-AH4OHTF",[[1,284,"容器（container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。"]],[242,285],[284,284]]],[1585297085909,["yueyuesama@DESKTOP-AH4OHTF",[[-1,284,"容器（container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。"]],[284,284],[242,285]]],[1585297087022,["yueyuesama@DESKTOP-AH4OHTF",[[-1,245,"c"]],[246,246],[245,245]]],[1585297087880,["yueyuesama@DESKTOP-AH4OHTF",[[1,245,"C"]],[245,245],[246,246]]],[1585297236923,["yueyuesama@DESKTOP-AH4OHTF",[[1,85,"\n"]],[85,85],[86,86]]],[1585297237743,["yueyuesama@DESKTOP-AH4OHTF",[[1,85,"{% centerquote %}书籍是在时代的波涛中航行的思想之船，它小心翼翼地把珍贵的货物运送给一代又一代。　\n——弗·培根{% endcenterquote %}\n\n<!-- more -->"]],[85,85],[184,184]]],[1585297240578,["yueyuesama@DESKTOP-AH4OHTF",[[1,185,"\n"]],[184,184],[185,185]]],[1585297299964,["yueyuesama@DESKTOP-AH4OHTF",[[-1,102,"书籍是在时代的波涛中航行的思想之船，它小心翼翼地把珍贵的货物运送给一代又一代。　\n——弗·培根"],[1,149,"本文"]],[102,102],[104,104]]],[1585297306082,["yueyuesama@DESKTOP-AH4OHTF",[[1,104,"是一个Docker"]],[104,104],[113,113]]],[1585297306109,["yueyuesama@DESKTOP-AH4OHTF",[[1,107," "]],[113,113],[114,114]]],[1585297314418,["yueyuesama@DESKTOP-AH4OHTF",[[1,114," 初学者学习Docker"]],[114,114],[126,126]]],[1585297314445,["yueyuesama@DESKTOP-AH4OHTF",[[1,120," "]],[126,126],[127,127]]],[1585297314878,["yueyuesama@DESKTOP-AH4OHTF",[[1,127,"的"]],[127,127],[128,128]]],[1585297314904,["yueyuesama@DESKTOP-AH4OHTF",[[1,127," "]],[128,128],[129,129]]],[1585297319190,["yueyuesama@DESKTOP-AH4OHTF",[[1,129,"记录"]],[129,129],[131,131]]],[1585297321665,["yueyuesama@DESKTOP-AH4OHTF",[[1,129,"过程"]],[129,129],[131,131]]],[1585297323216,["yueyuesama@DESKTOP-AH4OHTF",[[1,133,"。"]],[133,133],[134,134]]],[1585297429664,["yueyuesama@DESKTOP-AH4OHTF",[[1,477,"\n"]],[476,476],[477,477]]],[1585297430293,["yueyuesama@DESKTOP-AH4OHTF",[[1,478,"\n"]],[477,477],[478,478]]],[1585297440224,["yueyuesama@DESKTOP-AH4OHTF",[[1,477,"## 为什么要引入容器"]],[477,477],[488,488]]],[1585297443980,["yueyuesama@DESKTOP-AH4OHTF",[[1,480,"2 "]],[480,480],[481,481]]],[1585297444213,["yueyuesama@DESKTOP-AH4OHTF",[[1,481,"."]],[481,481],[482,482]]],[1585297451035,["yueyuesama@DESKTOP-AH4OHTF",[[1,884,"\n"]],[883,883],[884,884]]],[1585297451218,["yueyuesama@DESKTOP-AH4OHTF",[[1,885,"\n"]],[884,884],[885,885]]],[1585297459663,["yueyuesama@DESKTOP-AH4OHTF",[[1,884,"## 3. r"]],[884,884],[891,891]]],[1585297460044,["yueyuesama@DESKTOP-AH4OHTF",[[-1,890,"r"]],[891,891],[890,890]]],[1585297460380,["yueyuesama@DESKTOP-AH4OHTF",[[1,890,"ro"]],[890,890],[892,892]]],[1585297460934,["yueyuesama@DESKTOP-AH4OHTF",[[-1,889," ro"]],[892,892],[889,889]]],[1585297466086,["yueyuesama@DESKTOP-AH4OHTF",[[1,889,"容器的实现方法"]],[889,889],[896,896]]],[1585297476534,["yueyuesama@DESKTOP-AH4OHTF",[[1,889,"Docker "]],[889,889],[895,895]]],[1585297481944,["yueyuesama@DESKTOP-AH4OHTF",[[1,2044,"\n\n"]],[2044,2044],[2045,2045]]],[1585297531316,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1010,"k"],[1,1011,"K"]],[1010,1010],[1011,1011]]],[1585297535194,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1106,"n"],[1,1107,"N"]],[1106,1106],[1107,1107]]],[1585297540385,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1078,"d"],[1,1079,"D"]],[1078,1078],[1079,1079]]],[1585297542816,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1233,"d"],[1,1234,"D"]],[1233,1234],[1234,1234]]],[1585297544887,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1500,"d"],[1,1501,"D"]],[1500,1501],[1501,1501]]],[1585297548421,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1698,"m"],[1,1699,"M"]],[1698,1698],[1699,1699]]],[1585297550719,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1701,"os"]],[1703,1703],[1701,1701]]],[1585297551883,["yueyuesama@DESKTOP-AH4OHTF",[[1,1701,"OS "]],[1701,1701],[1703,1703]]],[1585297553438,["yueyuesama@DESKTOP-AH4OHTF",[[1,1701," "]],[1701,1701],[1702,1702]]],[1585297556696,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1720,"d"],[1,1721,"D"]],[1720,1721],[1721,1721]]],[1585297558292,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1728,"d"],[1,1729,"D"]],[1728,1729],[1729,1729]]],[1585297561641,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1756,"d"],[1,1757,"D"]],[1756,1757],[1757,1757]]],[1585297587283,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1766,"d"],[1,1767,"D"]],[1766,1772],[1766,1772]]],[1585297587452,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1792,"d"],[1,1793,"D"]],[1792,1798],[1792,1798]]],[1585297587627,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1807,"d"],[1,1808,"D"]],[1807,1813],[1807,1813]]],[1585297587931,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1817,"d"],[1,1818,"D"]],[1817,1823],[1817,1823]]],[1585297588123,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1842,"d"],[1,1843,"D"]],[1842,1848],[1842,1848]]],[1585297588307,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1861,"d"],[1,1862,"D"]],[1861,1867],[1861,1867]]],[1585297614891,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1735,"l"],[1,1736,"L"]],[1735,1740],[1735,1740]]],[1585297615331,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1750,"l"],[1,1751,"L"]],[1750,1755],[1750,1755]]],[1585297615723,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1786,"l"],[1,1787,"L"]],[1786,1791],[1786,1791]]],[1585297616027,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1836,"l"],[1,1837,"L"]],[1836,1841],[1836,1841]]],[1585297616435,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1962,"l"],[1,1963,"L"]],[1962,1967],[1962,1967]]],[1585297618267,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1085,"l"],[1,1086,"L"]],[1085,1090],[1085,1090]]],[1585297625034,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1773,"w"],[1,1774,"W"]],[1773,1774],[1774,1774]]],[1585297627661,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1824,"m"],[1,1825,"M"]],[1824,1825],[1825,1825]]],[1585297635173,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1859,"X"]],[1860,1860],[1859,1859]]],[1585297640679,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1930,"k"],[1,1931,"K"]],[1930,1931],[1931,1931]]],[1585297651485,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2010,"c"],[1,2011,"C"]],[2010,2011],[2011,2011]]],[1585297653999,["yueyuesama@DESKTOP-AH4OHTF",[[1,2030,"k"]],[2030,2030],[2031,2031]]],[1585297654104,["yueyuesama@DESKTOP-AH4OHTF",[[1,2030," "],[1,2031," e"]],[2031,2031],[2033,2033]]],[1585297655008,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2031,"ke"]],[2033,2033],[2031,2031]]],[1585297656265,["yueyuesama@DESKTOP-AH4OHTF",[[1,2031,"可"]],[2031,2031],[2032,2032]]],[1585297658373,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2032," "]],[2032,2033],[2032,2032]]],[1585297659332,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2030," "]],[2030,2031],[2030,2030]]],[1585298702659,["yueyuesama@DESKTOP-AH4OHTF",[[1,609,"\n"]],[607,607],[608,608]]],[1585298702849,["yueyuesama@DESKTOP-AH4OHTF",[[1,610,"\n"]],[608,608],[609,609]]],[1585298703114,["yueyuesama@DESKTOP-AH4OHTF",[[1,609,"软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？\n\n用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。\n\n如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：\"它在我的机器可以跑了\"（It works on my machine），言下之意就是，其他机器很可能跑不了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。"]],[609,609],[937,937]]],[1585298723012,["yueyuesama@DESKTOP-AH4OHTF",[[1,548,"用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？"]],[548,548],[582,582]]],[1585298729701,["yueyuesama@DESKTOP-AH4OHTF",[[1,548,"每个"]],[548,548],[550,550]]],[1585298753294,["yueyuesama@DESKTOP-AH4OHTF",[[-1,645,"软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？\n\n用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。"]],[645,801],[645,645]]],[1585298758778,["yueyuesama@DESKTOP-AH4OHTF",[[1,584,"如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：\"它在我的机器可以跑了\"（It works on my machine），言下之意就是，其他机器很可能跑不了。"]],[584,584],[671,671]]],[1585298776005,["yueyuesama@DESKTOP-AH4OHTF",[[-1,734,"如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：\"它在我的机器可以跑了\"（It works on my machine），言下之意就是，其他机器很可能跑不了。"]],[734,821],[734,734]]],[1585298776238,["yueyuesama@DESKTOP-AH4OHTF",[[-1,735,"\n"]],[734,734],[733,733]]],[1585298776469,["yueyuesama@DESKTOP-AH4OHTF",[[-1,734,"\n"]],[733,733],[732,732]]],[1585298776739,["yueyuesama@DESKTOP-AH4OHTF",[[-1,733,"\n"]],[732,732],[731,731]]],[1585298783188,["yueyuesama@DESKTOP-AH4OHTF",[[-1,733,"环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。"]],[733,814],[733,733]]],[1585298787219,["yueyuesama@DESKTOP-AH4OHTF",[[-1,734,"\n"]],[734,734],[733,733]]],[1585298787419,["yueyuesama@DESKTOP-AH4OHTF",[[-1,733,"\n"]],[733,733],[732,732]]],[1585298787841,["yueyuesama@DESKTOP-AH4OHTF",[[-1,732,"\n"]],[732,732],[731,731]]],[1585298795947,["yueyuesama@DESKTOP-AH4OHTF",[[1,671,"\n"]],[671,671],[672,672]]],[1585298796390,["yueyuesama@DESKTOP-AH4OHTF",[[1,672,"\n"]],[672,672],[673,673]]],[1585298797754,["yueyuesama@DESKTOP-AH4OHTF",[[1,673,"环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。"]],[673,673],[754,754]]],[1585298823331,["yueyuesama@DESKTOP-AH4OHTF",[[-1,568,"自家"],[1,570,"你的"]],[568,568],[570,570]]],[1585298824420,["yueyuesama@DESKTOP-AH4OHTF",[[-1,570,"的"]],[570,570],[569,569]]],[1585298833015,["yueyuesama@DESKTOP-AH4OHTF",[[-1,575,"那些"],[1,577,"各个上"]],[575,575],[580,580]]],[1585298843571,["yueyuesama@DESKTOP-AH4OHTF",[[-1,608,"开发者常常会说：\"它在我的机器可以跑了\"（It works on my machine），言下之意就是，其他机器很可能跑不了。"]],[608,671],[608,608]]],[1585298864834,["yueyuesama@DESKTOP-AH4OHTF",[[1,1042,"简单"]],[1042,1042],[1044,1044]]],[1585298873571,["yueyuesama@DESKTOP-AH4OHTF",[[1,2193,"\n"]],[2192,2192],[2193,2193]]],[1585298875531,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2193,"\n"],[1,2194,"#"]],[2193,2193],[2194,2194]]],[1585298936991,[null,[[-1,577,"上"],[1,580,"上"]],[577,577],[581,581]]],[1585298936992,[null,[[1,577,"上"],[-1,579,"上"]],[581,581],[577,577]]],[1585298880958,["yueyuesama@DESKTOP-AH4OHTF",[[1,2194," DAY2"]],[2194,2194],[2199,2199]]],[1585298882017,["yueyuesama@DESKTOP-AH4OHTF",[[1,2198," "]],[2198,2198],[2199,2199]]],[1585298888480,["yueyuesama@DESKTOP-AH4OHTF",[[1,2200,"\n\n"]],[2200,2200],[2201,2201]]],[1585298889219,["yueyuesama@DESKTOP-AH4OHTF",[[1,2202,"\n"]],[2201,2201],[2202,2202]]],[1585298996981,[null,[[-1,577,"上"],[1,580,"上"]],[577,577],[581,581]]],[1585298996981,[null,[[1,577,"上"],[-1,579,"上"]],[581,581],[577,577]]],[1585298958277,["yueyuesama@DESKTOP-AH4OHTF",[[1,80,"  \n"]],[79,79],[82,82]]],[1585298958668,["yueyuesama@DESKTOP-AH4OHTF",[[1,82,"date: 2020-03-27 15:56:32"]],[82,82],[107,107]]],[1585298961064,["yueyuesama@DESKTOP-AH4OHTF",[[-1,81," "]],[82,82],[81,81]]],[1585298964387,["yueyuesama@DESKTOP-AH4OHTF",[[-1,87,"2020-03-27 15:56:32"],[1,106,"时间"]],[87,87],[89,89]]],[1585298965207,["yueyuesama@DESKTOP-AH4OHTF",[[-1,87,"时间"]],[89,89],[87,87]]],[1585298966502,["yueyuesama@DESKTOP-AH4OHTF",[[1,87,"2020-03-27 16:49:25"]],[87,87],[106,106]]],[1585299176980,[null,[[-1,604,"上"],[1,607,"上"]],[604,604],[608,608]]],[1585299176980,[null,[[1,604,"上"],[-1,606,"上"]],[608,608],[604,604]]],[1585299134425,["yueyuesama@DESKTOP-AH4OHTF",[[1,81," \n "]],[79,79],[82,82]]],[1585299134786,["yueyuesama@DESKTOP-AH4OHTF",[[1,82,"flag: red\n"]],[82,82],[92,92]]],[1585299136800,["yueyuesama@DESKTOP-AH4OHTF",[[-1,92,"\n"]],[92,92],[91,91]]],[1585299138809,["yueyuesama@DESKTOP-AH4OHTF",[[-1,80,"  "]],[82,82],[80,80]]],[1585299141014,["yueyuesama@DESKTOP-AH4OHTF",[[-1,90," "]],[91,91],[90,90]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["ef61a48f-4dde-4c1e-ba67-f9c91ed41a43",1585312984172,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  1.什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 2. 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## 3.Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能（[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)）。 \n\nDocker在windows上，启用Hyper-V（[https://docs.docker.com/docker-for-windows/)](https://docs.docker.com/docker-for-windows/)）或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\nDocker在Linux上共享内核，只能创建Linux类Docker。 \n\nDocker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\nDocker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n\n",[[1585312939105,["yueyuesama@DESKTOP-AH4OHTF",[[1,2237,"说"]],[2237,2237],[2238,2238]]],[1585312940082,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2237,"说"]],[2238,2238],[2237,2237]]],[1585312940777,["yueyuesama@DESKTOP-AH4OHTF",[[1,2239,"\n"]],[2237,2237],[2238,2238]]],[1585319757038,["yueyuesama@DESKTOP-AH4OHTF",[[1,2238,"【】"]],[2238,2238],[2240,2240]]],[1585319757683,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2238,"【】"]],[2240,2240],[2238,2238]]],[1585319760712,["yueyuesama@DESKTOP-AH4OHTF",[[1,2238,"[]("]],[2238,2238],[2241,2241]]],[1585319760741,["yueyuesama@DESKTOP-AH4OHTF",[[1,2241,"https://)"]],[2241,2241],[2241,2249]]],[1585319760795,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2241,"https://"],[1,2249,")"]],[2241,2249],[2242,2242]]],[1585319762292,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2242,")"]],[2242,2242],[2241,2241]]],[1585319762852,["yueyuesama@DESKTOP-AH4OHTF",[[1,2241,"[https://draveness.me/docker](https://draveness.me/docker)"]],[2241,2241],[2299,2299]]],[1585319777333,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2241,"[https://draveness.me/docker]("]],[2241,2270],[2241,2241]]],[1585319778342,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2269,")"]],[2269,2269],[2268,2268]]],[1585319788131,["yueyuesama@DESKTOP-AH4OHTF",[[1,2239,"Doker"]],[2239,2239],[2244,2244]]],[1585319790666,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2241,"ker"]],[2244,2244],[2241,2241]]],[1585319794671,["yueyuesama@DESKTOP-AH4OHTF",[[1,2241,"ckerhe"]],[2241,2241],[2247,2247]]],[1585319795421,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2245,"he"]],[2247,2247],[2245,2245]]],[1585319800646,["yueyuesama@DESKTOP-AH4OHTF",[[1,2245,"核心技术"]],[2245,2245],[2249,2249]]],[1585319800672,["yueyuesama@DESKTOP-AH4OHTF",[[1,2245," "]],[2249,2249],[2250,2250]]],[1585319804855,["yueyuesama@DESKTOP-AH4OHTF",[[1,2250,"与实现原理"]],[2250,2250],[2255,2255]]],[1585319848124,["yueyuesama@DESKTOP-AH4OHTF",[[1,1909,"1."]],[1909,1909],[1911,1911]]],[1585319850959,["yueyuesama@DESKTOP-AH4OHTF",[[1,1949,"2."]],[1949,1949],[1951,1951]]],[1585319853206,["yueyuesama@DESKTOP-AH4OHTF",[[1,2002,"3."]],[2002,2002],[2004,2004]]],[1585319858455,["yueyuesama@DESKTOP-AH4OHTF",[[1,1911," "]],[1911,1911],[1912,1912]]],[1585319859661,["yueyuesama@DESKTOP-AH4OHTF",[[1,1952," "]],[1952,1952],[1953,1953]]],[1585319860635,["yueyuesama@DESKTOP-AH4OHTF",[[1,2006," "]],[2006,2006],[2007,2007]]],[1585319862529,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2006," "]],[2006,2007],[2006,2006]]],[1585319863552,["yueyuesama@DESKTOP-AH4OHTF",[[1,2006," "]],[2006,2006],[2007,2007]]],[1585320705977,["yueyuesama@DESKTOP-AH4OHTF",[[1,2247,"\n"]],[2246,2246],[2247,2247]]],[1585320710852,["yueyuesama@DESKTOP-AH4OHTF",[[1,2247,"对于Docker"]],[2247,2247],[2255,2255]]],[1585320710880,["yueyuesama@DESKTOP-AH4OHTF",[[1,2249," "]],[2255,2255],[2256,2256]]],[1585320712068,["yueyuesama@DESKTOP-AH4OHTF",[[1,2256," "]],[2256,2256],[2257,2257]]],[1585320712568,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2256," "]],[2257,2257],[2256,2256]]],[1585320713419,["yueyuesama@DESKTOP-AH4OHTF",[[1,2256,"的"]],[2256,2256],[2257,2257]]],[1585320713447,["yueyuesama@DESKTOP-AH4OHTF",[[1,2256," "]],[2257,2257],[2258,2258]]],[1585320730487,["yueyuesama@DESKTOP-AH4OHTF",[[1,2258,"核心实现原理，可以查看这篇文章，"]],[2258,2258],[2274,2274]]],[1585320733461,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2274,"\n"]],[2275,2275],[2274,2274]]],[1585320736202,["yueyuesama@DESKTOP-AH4OHTF",[[1,2321,"，"]],[2321,2321],[2322,2322]]],[1585320737779,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2321,"，"]],[2322,2322],[2321,2321]]],[1585320738330,["yueyuesama@DESKTOP-AH4OHTF",[[1,2321,"（）"]],[2321,2321],[2323,2323]]],[1585320755442,["yueyuesama@DESKTOP-AH4OHTF",[[1,2322,"不过目前我有很多地方都不是很读得懂。"]],[2322,2322],[2340,2340]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["f10b3402-cc0d-4d50-aac7-a4b181e2869c",1585320954787,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  1.什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 2. 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## 3.Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能（[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)）。 \n\nDocker在windows上，启用Hyper-V（[https://docs.docker.com/docker-for-windows/)](https://docs.docker.com/docker-for-windows/)）或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n",[[1585320944819,["yueyuesama@DESKTOP-AH4OHTF",[[-1,355,"1."]],[355,357],[355,355]]],[1585320948411,["yueyuesama@DESKTOP-AH4OHTF",[[-1,514,"2. "]],[514,516],[514,514]]],[1585320951446,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1061,"3."]],[1061,1063],[1061,1061]]],[1585320944819,["yueyuesama@DESKTOP-AH4OHTF",[[-1,355,"1."]],[355,357],[355,355]]],[1585320948411,["yueyuesama@DESKTOP-AH4OHTF",[[-1,514,"2. "]],[514,516],[514,514]]],[1585320951446,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1061,"3."]],[1061,1063],[1061,1061]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["c4135d41-4fc0-451e-8e9b-93f09f0b390f",1585320999770,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能（[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)）。 \n\nDocker在windows上，启用Hyper-V（[https://docs.docker.com/docker-for-windows/)](https://docs.docker.com/docker-for-windows/)）或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n",[[1585320995404,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1997,"3"],[1,1998,"4"]],[1999,2000],[1999,2000]]],[1585320996529,["yueyuesama@DESKTOP-AH4OHTF",[[1,1997,"3"],[-1,1997,"4"]],[1999,2000],[1999,2000]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["6a21de29-8bf8-407c-87e4-dcea6b7d9267",1585321185403,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能（[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)）。 \n\nDocker在windows上，启用Hyper-V（[https://docs.docker.com/docker-for-windows/)](https://docs.docker.com/docker-for-windows/)）或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n",[[1585321131082,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1477,")"],[1,1478,"。"]],[1477,1477],[1478,1478]]],[1585321131933,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1477,"。"]],[1478,1478],[1477,1477]]],[1585321133634,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1523,"）"]],[1524,1524],[1523,1523]]],[1585321135738,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1432,"（"]],[1433,1433],[1432,1432]]],[1585321140844,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1402,"）"]],[1403,1403],[1402,1402]]],[1585321142872,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1288,"（"]],[1288,1289],[1288,1288]]],[1585321168835,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1812,"%EF%BC%89%EF%BC%8C%E4%B8%8D%E5%85%B1%E4%BA%ABmac"]],[1812,1860],[1812,1812]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["30fbe721-e140-4ada-bbba-f3658d37e43c",1585364745835,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n",[[1585364706236,["yueyuesama@DESKTOP-AH4OHTF",[[1,2283,"\n"]],[2282,2282],[2283,2283]]],[1585364796072,["yueyuesama@DESKTOP-AH4OHTF",[[1,2284,"\n"]],[2281,2281],[2282,2282]]],[1585364796674,["yueyuesama@DESKTOP-AH4OHTF",[[1,2285,"\n"]],[2282,2282],[2283,2283]]],[1585364803131,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2285,"\n"]],[2285,2285],[2284,2284]]],[1585364803437,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2284,"\n"]],[2284,2284],[2283,2283]]],[1585364858427,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2283,"\n"],[1,2284,"既然"]],[2283,2283],[2285,2285]]],[1585364859632,["yueyuesama@DESKTOP-AH4OHTF",[[1,2285,"大干"]],[2285,2285],[2287,2287]]],[1585364860052,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2285,"大干"]],[2287,2287],[2285,2285]]],[1585364864143,["yueyuesama@DESKTOP-AH4OHTF",[[1,2285,"大致的明白的"]],[2285,2285],[2291,2291]]],[1585364866678,["yueyuesama@DESKTOP-AH4OHTF",[[1,2291,"Docker"]],[2291,2291],[2297,2297]]],[1585364866707,["yueyuesama@DESKTOP-AH4OHTF",[[1,2291," "]],[2297,2297],[2298,2298]]],[1585364867235,["yueyuesama@DESKTOP-AH4OHTF",[[1,2298,"的"]],[2298,2298],[2299,2299]]],[1585364867263,["yueyuesama@DESKTOP-AH4OHTF",[[1,2298," "]],[2299,2299],[2300,2300]]],[1585364883447,["yueyuesama@DESKTOP-AH4OHTF",[[1,2300,"原理，那么久"]],[2300,2300],[2306,2306]]],[1585364884499,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2305,"久"]],[2306,2306],[2305,2305]]],[1585364902271,["yueyuesama@DESKTOP-AH4OHTF",[[1,2305,"就需要我们结合实际情况来进行学习，"]],[2305,2305],[2322,2322]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["eb928a45-f8b6-4644-8e21-bcf73ecb1daf",1585395998730,"---\nlayout: post\ntitle: Docker 学习日记\ncategories: \n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27 16:49:25\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习，",[[1585395948590,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2321,"，"]],[2322,2322],[2321,2321]]],[1585395948778,["yueyuesama@DESKTOP-AH4OHTF",[[1,2321,"。"]],[2321,2321],[2322,2322]]],[1585395949038,["yueyuesama@DESKTOP-AH4OHTF",[[1,2322,"\n\n"]],[2322,2322],[2323,2323]]],[1585395950084,["yueyuesama@DESKTOP-AH4OHTF",[[1,2324,"\n"]],[2323,2323],[2324,2324]]],[1585398250409,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2324,"\n"],[1,2325,"#"]],[2324,2324],[2325,2325]]],[1585398265592,["yueyuesama@DESKTOP-AH4OHTF",[[1,2325,"# 镜像与容器的基本操作"]],[2325,2325],[2337,2337]]],[1585398268040,["yueyuesama@DESKTOP-AH4OHTF",[[1,2337,"\n\n"]],[2337,2337],[2338,2338]]],[1585398268723,["yueyuesama@DESKTOP-AH4OHTF",[[1,2339,"\n"]],[2338,2338],[2339,2339]]],[1585398274784,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2339,"\n"],[1,2340,"类似于"]],[2339,2339],[2342,2342]]],[1585398293362,["yueyuesama@DESKTOP-AH4OHTF",[[1,2342,"数据库的增删改擦"]],[2342,2342],[2350,2350]]],[1585398293582,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2349,"擦"]],[2350,2350],[2349,2349]]],[1585398302810,["yueyuesama@DESKTOP-AH4OHTF",[[1,2349,"查一样，Docker也有"]],[2349,2349],[2361,2361]]],[1585398302837,["yueyuesama@DESKTOP-AH4OHTF",[[1,2359," "]],[2361,2361],[2362,2362]]],[1585398316147,["yueyuesama@DESKTOP-AH4OHTF",[[1,2362,"几个比较常规的操作，"]],[2362,2362],[2372,2372]]],[1585398316439,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2371,"，"]],[2372,2372],[2371,2371]]],[1585398316628,["yueyuesama@DESKTOP-AH4OHTF",[[1,2371,"。"]],[2371,2371],[2372,2372]]],[1585398341215,["yueyuesama@DESKTOP-AH4OHTF",[[1,2372,"\n\n"]],[2372,2372],[2373,2373]]],[1585398341864,["yueyuesama@DESKTOP-AH4OHTF",[[1,2374,"\n"]],[2373,2373],[2374,2374]]],[1585398350413,["yueyuesama@DESKTOP-AH4OHTF",[[1,2347,"、"]],[2347,2347],[2348,2348]]],[1585398351216,["yueyuesama@DESKTOP-AH4OHTF",[[1,2349,"、"]],[2349,2349],[2350,2350]]],[1585398352155,["yueyuesama@DESKTOP-AH4OHTF",[[1,2351,"、"]],[2351,2351],[2352,2352]]],[1585398355165,["yueyuesama@DESKTOP-AH4OHTF",[[1,2378,"\n"]],[2375,2375],[2376,2376]]],[1585398355712,["yueyuesama@DESKTOP-AH4OHTF",[[1,2379,"\n"]],[2376,2376],[2377,2377]]],[1585398358841,["yueyuesama@DESKTOP-AH4OHTF",[[1,2377,"常规"]],[2377,2377],[2379,2379]]],[1585398360327,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2377,"常规"]],[2379,2379],[2377,2377]]],[1585398384974,["yueyuesama@DESKTOP-AH4OHTF",[[1,2377,"### 获取镜像"]],[2377,2377],[2385,2385]]],[1585398387276,["yueyuesama@DESKTOP-AH4OHTF",[[1,2388,"\n"]],[2385,2385],[2386,2386]]],[1585398387952,["yueyuesama@DESKTOP-AH4OHTF",[[1,2389,"\n"]],[2386,2386],[2387,2387]]],[1585398529707,["yueyuesama@DESKTOP-AH4OHTF",[[1,2387,"```\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```"]],[2387,2387],[2449,2449]]],[1585398569186,["yueyuesama@DESKTOP-AH4OHTF",[[1,2448," 据；"]],[2448,2448],[2451,2451]]],[1585398569971,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2449,"据；"]],[2451,2451],[2449,2449]]],[1585398570930,["yueyuesama@DESKTOP-AH4OHTF",[[1,2449,"据；"]],[2449,2449],[2451,2451]]],[1585398571650,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2449,"据；"]],[2451,2451],[2449,2449]]],[1585398572571,["yueyuesama@DESKTOP-AH4OHTF",[[1,2449," "]],[2449,2449],[2450,2450]]],[1585398573013,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2449," "]],[2450,2450],[2449,2449]]],[1585398573447,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2448," "],[1,2449,"\n"]],[2449,2449],[2449,2449]]],[1585398576183,["yueyuesama@DESKTOP-AH4OHTF",[[1,2449,"距离"]],[2449,2449],[2451,2451]]],[1585398576482,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2449,"距离"]],[2451,2451],[2449,2449]]],[1585398576742,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2450,"\n"]],[2449,2449],[2448,2448]]],[1585398577397,["yueyuesama@DESKTOP-AH4OHTF",[[1,2450,"\n"]],[2448,2448],[2449,2449]]],[1585398583219,["yueyuesama@DESKTOP-AH4OHTF",[[1,2449,"举例：··"]],[2449,2449],[2454,2454]]],[1585398583694,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2452,"··"]],[2454,2454],[2452,2452]]],[1585398584350,["yueyuesama@DESKTOP-AH4OHTF",[[1,2452,"``"]],[2452,2452],[2454,2454]]],[1585398603769,["yueyuesama@DESKTOP-AH4OHTF",[[1,2453,"docker pull ubuntu：16.04"]],[2453,2453],[2477,2477]]],[1585398606184,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2471,"："]],[2472,2472],[2471,2471]]],[1585398607004,["yueyuesama@DESKTOP-AH4OHTF",[[1,2471,";"]],[2471,2471],[2472,2472]]],[1585398607641,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2471,";"]],[2472,2472],[2471,2471]]],[1585398608409,["yueyuesama@DESKTOP-AH4OHTF",[[1,2471,":"]],[2471,2471],[2472,2472]]],[1585398659668,["yueyuesama@DESKTOP-AH4OHTF",[[1,2480,"\n"]],[2479,2479],[2480,2480]]],[1585398660638,["yueyuesama@DESKTOP-AH4OHTF",[[1,2480,"OPTIONS说明：\n\n*   **-a :**拉取所有 tagged 镜像\n\n*   **--disable-content-trust :**忽略镜像的校验,默认开启"]],[2480,2480],[2565,2565]]],[1585398666085,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2491,"\n"],[1,2492,"选项"]],[2491,2492],[2493,2493]]],[1585398666798,["yueyuesama@DESKTOP-AH4OHTF",[[1,2491,"\n"],[-1,2491,"选项"]],[2493,2493],[2491,2492]]],[1585398667712,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2480,"OPTIONS"],[1,2487,"选项"]],[2480,2487],[2482,2482]]],[1585398677208,["yueyuesama@DESKTOP-AH4OHTF",[[1,2514,"****"]],[2514,2514],[2516,2516]]],[1585398678221,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2514,"****"]],[2516,2516],[2514,2514]]],[1585398681104,["yueyuesama@DESKTOP-AH4OHTF",[[1,2499," "]],[2499,2499],[2500,2500]]],[1585398682850,["yueyuesama@DESKTOP-AH4OHTF",[[1,2497," "]],[2497,2497],[2498,2498]]],[1585398683623,["yueyuesama@DESKTOP-AH4OHTF",[[1,2493," "]],[2493,2493],[2494,2494]]],[1585398685252,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2493," "]],[2494,2494],[2493,2493]]],[1585398696281,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2490," "]],[2489,2490],[2489,2489]]],[1585398698685,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2517,"   "]],[2519,2520],[2517,2517]]],[1585398699464,["yueyuesama@DESKTOP-AH4OHTF",[[1,2517," "]],[2517,2517],[2518,2518]]],[1585398701947,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2489," "]],[2489,2490],[2489,2489]]],[1585398705752,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2496,"** "]],[2496,2498],[2496,2496]]],[1585398707811,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2489,"**"]],[2489,2491],[2489,2489]]],[1585398710248,["yueyuesama@DESKTOP-AH4OHTF",[[1,2489,"**"],[1,2494,"**"]],[2489,2494],[2489,2498]]],[1585398723401,["yueyuesama@DESKTOP-AH4OHTF",[[1,2480,"["],[1,2482,"]"]],[2480,2482],[2484,2484]]],[1585398725641,["yueyuesama@DESKTOP-AH4OHTF",[[1,2480,"\n"]],[2479,2479],[2480,2480]]],[1585398726494,["yueyuesama@DESKTOP-AH4OHTF",[[1,2481,"\n"]],[2480,2480],[2481,2481]]],[1585398747520,["yueyuesama@DESKTOP-AH4OHTF",[[1,2480,"说明：拉取"]],[2480,2480],[2485,2485]]],[1585398751127,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2483,"拉取"]],[2485,2485],[2483,2483]]],[1585398752764,["yueyuesama@DESKTOP-AH4OHTF",[[1,2483,"从"]],[2483,2483],[2484,2484]]],[1585398768151,["yueyuesama@DESKTOP-AH4OHTF",[[1,2484,"Docker"]],[2484,2484],[2490,2490]]],[1585398768179,["yueyuesama@DESKTOP-AH4OHTF",[[1,2484," "]],[2490,2490],[2491,2491]]],[1585398771040,["yueyuesama@DESKTOP-AH4OHTF",[[1,2491," hub"]],[2491,2491],[2495,2495]]],[1585398771627,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2492,"hub"]],[2495,2495],[2492,2492]]],[1585398773229,["yueyuesama@DESKTOP-AH4OHTF",[[1,2492,"Hub "]],[2492,2492],[2496,2496]]],[1585398773782,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2495," "]],[2496,2496],[2495,2495]]],[1585398774492,["yueyuesama@DESKTOP-AH4OHTF",[[1,2495,"shang"]],[2495,2495],[2500,2500]]],[1585398775360,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2495,"shang"]],[2500,2500],[2495,2495]]],[1585398776417,["yueyuesama@DESKTOP-AH4OHTF",[[1,2495,"上"]],[2495,2495],[2496,2496]]],[1585398776445,["yueyuesama@DESKTOP-AH4OHTF",[[1,2495," "]],[2496,2496],[2497,2497]]],[1585398779464,["yueyuesama@DESKTOP-AH4OHTF",[[1,2497,"拉去"]],[2497,2497],[2499,2499]]],[1585398780496,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2497,"拉去"]],[2499,2499],[2497,2497]]],[1585398786351,["yueyuesama@DESKTOP-AH4OHTF",[[1,2497,"拉取 "]],[2497,2497],[2500,2500]]],[1585398788015,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2499," "]],[2500,2500],[2499,2499]]],[1585398795208,["yueyuesama@DESKTOP-AH4OHTF",[[1,2499,"，标志为"]],[2499,2499],[2503,2503]]],[1585398796636,["yueyuesama@DESKTOP-AH4OHTF",[[1,2502,"（"]],[2502,2502],[2503,2503]]],[1585398797599,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2502,"（"]],[2503,2503],[2502,2502]]],[1585398798311,["yueyuesama@DESKTOP-AH4OHTF",[[1,2502,"（）"]],[2502,2502],[2504,2504]]],[1585398800999,["yueyuesama@DESKTOP-AH4OHTF",[[1,2503,"tag"]],[2503,2503],[2506,2506]]],[1585398804280,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2502,"（tag）"]],[2507,2507],[2502,2502]]],[1585398805314,["yueyuesama@DESKTOP-AH4OHTF",[[1,2502,"()"]],[2502,2502],[2504,2504]]],[1585398808789,["yueyuesama@DESKTOP-AH4OHTF",[[1,2503,"tag"]],[2503,2503],[2506,2506]]],[1585398811286,["yueyuesama@DESKTOP-AH4OHTF",[[1,2508,"1"]],[2508,2508],[2509,2509]]],[1585398811314,["yueyuesama@DESKTOP-AH4OHTF",[[1,2508," "]],[2509,2509],[2510,2510]]],[1585398813702,["yueyuesama@DESKTOP-AH4OHTF",[[1,2510,"6.04 "]],[2510,2510],[2515,2515]]],[1585398814764,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2514," "]],[2515,2515],[2514,2514]]],[1585398815569,["yueyuesama@DESKTOP-AH4OHTF",[[1,2514,"的"]],[2514,2514],[2515,2515]]],[1585398815597,["yueyuesama@DESKTOP-AH4OHTF",[[1,2514," "]],[2515,2515],[2516,2516]]],[1585398818119,["yueyuesama@DESKTOP-AH4OHTF",[[1,2516,"ubuntu"]],[2516,2516],[2522,2522]]],[1585398818152,["yueyuesama@DESKTOP-AH4OHTF",[[1,2516," "]],[2522,2522],[2523,2523]]],[1585398819869,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2517,"u"]],[2518,2518],[2517,2517]]],[1585398821000,["yueyuesama@DESKTOP-AH4OHTF",[[1,2517,"U"]],[2517,2517],[2518,2518]]],[1585398827862,["yueyuesama@DESKTOP-AH4OHTF",[[1,2523,"镜像"]],[2523,2523],[2525,2525]]],[1585398827890,["yueyuesama@DESKTOP-AH4OHTF",[[1,2523," "]],[2525,2525],[2526,2526]]],[1585398828988,["yueyuesama@DESKTOP-AH4OHTF",[[1,2526,"。"]],[2526,2526],[2527,2527]]],[1585398831895,["yueyuesama@DESKTOP-AH4OHTF",[[1,2496,"（）"]],[2496,2496],[2498,2498]]],[1585398855256,["yueyuesama@DESKTOP-AH4OHTF",[[1,2497,"如不填写Docker Registery 地址"]],[2497,2497],[2520,2520]]],[1585398855288,["yueyuesama@DESKTOP-AH4OHTF",[[1,2501," "]],[2520,2520],[2521,2521]]],[1585398869853,["yueyuesama@DESKTOP-AH4OHTF",[[1,2521,"的情况下默认为从Docker"]],[2521,2521],[2535,2535]]],[1585398869881,["yueyuesama@DESKTOP-AH4OHTF",[[1,2529," "]],[2535,2535],[2536,2536]]],[1585398874577,["yueyuesama@DESKTOP-AH4OHTF",[[1,2536," Hub上"]],[2536,2536],[2541,2541]]],[1585398874606,["yueyuesama@DESKTOP-AH4OHTF",[[1,2540," "]],[2541,2541],[2542,2542]]],[1585398877564,["yueyuesama@DESKTOP-AH4OHTF",[[1,2542,"拉"]],[2542,2542],[2543,2543]]],[1585398893730,["yueyuesama@DESKTOP-AH4OHTF",[[1,2543,"取镜像"]],[2543,2543],[2546,2546]]],[1585398902613,["yueyuesama@DESKTOP-AH4OHTF",[[1,2501,"指定的"]],[2501,2501],[2504,2504]]],[1585398905702,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2524,"的"]],[2524,2525],[2524,2524]]],[1585398912052,["yueyuesama@DESKTOP-AH4OHTF",[[1,2662,"* \n"]],[2661,2661],[2664,2664]]],[1585398912408,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2662,"* "]],[2664,2664],[2663,2663]]],[1585398912926,["yueyuesama@DESKTOP-AH4OHTF",[[1,2663,"\n"]],[2663,2663],[2664,2664]]],[1585398923082,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2663,"\n"],[1,2664,"y"]],[2664,2664],[2663,2664]]],[1585398925372,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2663,"y"],[1,2664,"运行"]],[2663,2663],[2665,2665]]],[1585398927607,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2664,"行"]],[2665,2665],[2664,2664]]],[1585398927917,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2663,"运"],[1,2664,"\n"]],[2664,2664],[2663,2663]]],[1585398928968,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2663,"\n"],[1,2664,"#"]],[2663,2663],[2664,2664]]],[1585398932419,["yueyuesama@DESKTOP-AH4OHTF",[[1,2664,"### 运行"]],[2664,2664],[2670,2670]]],[1585398938587,["yueyuesama@DESKTOP-AH4OHTF",[[1,2670,"镜像"]],[2670,2670],[2672,2672]]],[1585398941314,["yueyuesama@DESKTOP-AH4OHTF",[[1,2380,"#"]],[2380,2380],[2381,2381]]],[1585398943815,["yueyuesama@DESKTOP-AH4OHTF",[[1,2377,"\n"]],[2375,2375],[2376,2376]]],[1585398944722,["yueyuesama@DESKTOP-AH4OHTF",[[1,2378,"\n"]],[2376,2376],[2377,2377]]],[1585398951619,["yueyuesama@DESKTOP-AH4OHTF",[[1,2377,"### 常规操作"]],[2377,2377],[2385,2385]]],[1585398957106,["yueyuesama@DESKTOP-AH4OHTF",[[1,2683,"\n\n"]],[2683,2683],[2684,2684]]],[1585398957619,["yueyuesama@DESKTOP-AH4OHTF",[[1,2685,"\n"]],[2684,2684],[2685,2685]]],[1585398990395,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2565,"志"],[1,2566,"签"]],[2564,2566],[2566,2566]]],[1585398995334,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2685,"\n"],[1,2686,"D"]],[2685,2685],[2686,2686]]],[1585398995844,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2685,"D"],[1,2686,"\n"]],[2686,2686],[2685,2685]]],[1585398998200,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2685,"\n"],[1,2686,"`"]],[2685,2685],[2686,2686]]],[1585398998521,["yueyuesama@DESKTOP-AH4OHTF",[[1,2686,"``"]],[2686,2686],[2688,2688]]],[1585398998549,["yueyuesama@DESKTOP-AH4OHTF",[[1,2688,"language\n```\n"]],[2688,2688],[2688,2696]]],[1585399003144,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2688,"language"],[1,2696,"S"]],[2688,2696],[2689,2689]]],[1585399004770,["yueyuesama@DESKTOP-AH4OHTF",[[1,2689,"hell"]],[2689,2689],[2693,2693]]],[1585399005270,["yueyuesama@DESKTOP-AH4OHTF",[[1,2694,"\n"]],[2693,2693],[2694,2694]]],[1585399009216,["yueyuesama@DESKTOP-AH4OHTF",[[1,2401,"Shell"]],[2401,2401],[2406,2406]]],[1585399010853,["yueyuesama@DESKTOP-AH4OHTF",[[1,2699,"sd"]],[2699,2699],[2701,2701]]],[1585399012580,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2699,"sd"]],[2701,2701],[2699,2699]]],[1585399023422,["yueyuesama@DESKTOP-AH4OHTF",[[1,2699,"docker ri"]],[2699,2699],[2708,2708]]],[1585399023776,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2707,"i"]],[2708,2708],[2707,2707]]],[1585399032753,["yueyuesama@DESKTOP-AH4OHTF",[[1,2707,"un -it --rm \\"]],[2707,2707],[2720,2720]]],[1585399033241,["yueyuesama@DESKTOP-AH4OHTF",[[1,2721,"\n"]],[2720,2720],[2721,2721]]],[1585399038967,["yueyuesama@DESKTOP-AH4OHTF",[[1,2721,"  ubuntu "]],[2721,2721],[2730,2730]]],[1585399039804,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2729," "]],[2730,2730],[2729,2729]]],[1585399043866,["yueyuesama@DESKTOP-AH4OHTF",[[1,2729,":16.04 \\"]],[2729,2729],[2737,2737]]],[1585399044866,["yueyuesama@DESKTOP-AH4OHTF",[[1,2738,"  \n"]],[2737,2737],[2740,2740]]],[1585399049679,["yueyuesama@DESKTOP-AH4OHTF",[[1,2740,"/bash/"]],[2740,2740],[2746,2746]]],[1585399053048,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2742,"ash/"]],[2746,2746],[2742,2742]]],[1585399055323,["yueyuesama@DESKTOP-AH4OHTF",[[1,2742,"in/bash"]],[2742,2742],[2749,2749]]],[1585399108037,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2710,"-it --rm \\\n  ubuntu:16.04 \\\n  /bin/bash"],[1,2749,"[OPTIONS] IMAGE [COMMAND]  [ARG...]"]],[2699,2749],[2745,2745]]],[1585399112984,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2711,"OPTIONS"],[1,2718,"选项"]],[2711,2718],[2713,2713]]],[1585399115398,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2715,"IMAGE "],[1,2721,"j"]],[2715,2721],[2716,2716]]],[1585399115720,["yueyuesama@DESKTOP-AH4OHTF",[[1,2716,"x"]],[2716,2716],[2717,2717]]],[1585399116210,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2715,"jx"]],[2717,2717],[2715,2715]]],[1585399122158,["yueyuesama@DESKTOP-AH4OHTF",[[1,2715,"镜像 "]],[2715,2715],[2718,2718]]],[1585399134530,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2719,"COMMAND"],[1,2726,"命令"]],[2719,2719],[2721,2721]]],[1585399224307,["yueyuesama@DESKTOP-AH4OHTF",[[1,2737,"\n"]],[2736,2736],[2737,2737]]],[1585399225546,["yueyuesama@DESKTOP-AH4OHTF",[[1,2738,"\n"]],[2737,2737],[2738,2738]]],[1585399227445,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2738,"\n"],[1,2739,"举例"]],[2738,2738],[2740,2740]]],[1585399228349,["yueyuesama@DESKTOP-AH4OHTF",[[1,2740,"："]],[2740,2740],[2741,2741]]],[1585399228675,["yueyuesama@DESKTOP-AH4OHTF",[[1,2741,"\n\n"]],[2741,2741],[2742,2742]]],[1585399229258,["yueyuesama@DESKTOP-AH4OHTF",[[1,2743,"\n"]],[2742,2742],[2743,2743]]],[1585399229698,["yueyuesama@DESKTOP-AH4OHTF",[[1,2743,"OPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷"]],[2743,2743],[3508,3508]]],[1585399233404,["yueyuesama@DESKTOP-AH4OHTF",[[1,2743,"\n"]],[2742,2742],[2743,2743]]],[1585399233702,["yueyuesama@DESKTOP-AH4OHTF",[[1,2744,"\n"]],[2743,2743],[2744,2744]]],[1585399236378,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2743,""],[1,2743,"s"],[-1,2774," "],[1,2775," "],[-1,2827," "],[1,2828," "],[-1,2856," "],[1,2857," "],[-1,2892," "],[1,2893," "],[-1,2934," "],[1,2935," "],[-1,2972," "],[1,2973," "],[-1,3028," "],[1,3029," "],[-1,3063," "],[1,3064," "],[-1,3121," "],[1,3122," "],[-1,3162," "],[1,3163," "],[-1,3209," "],[1,3210," "],[-1,3241," "],[1,3242," "],[-1,3299," "],[1,3300," "],[-1,3364," "],[1,3365," "],[-1,3407," "],[1,3408," "],[-1,3433," "],[1,3434," "],[-1,3467," "],[1,3468," "],[-1,3502," "],[1,3503," "]],[2743,2743],[2744,2744]]],[1585399236960,["yueyuesama@DESKTOP-AH4OHTF",[[1,2744,"huo"]],[2744,2744],[2747,2747]]],[1585399237535,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2744,"huo"]],[2747,2747],[2744,2744]]],[1585399237762,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2743,"s"]],[2744,2744],[2743,2743]]],[1585399243534,["yueyuesama@DESKTOP-AH4OHTF",[[1,2743,"说明："]],[2743,2743],[2746,2746]]],[1585399245675,["yueyuesama@DESKTOP-AH4OHTF",[[1,2741,"··"]],[2741,2741],[2743,2743]]],[1585399246743,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2741,"··"]],[2743,2743],[2741,2741]]],[1585399247258,["yueyuesama@DESKTOP-AH4OHTF",[[1,2741,"``"]],[2741,2741],[2743,2743]]],[1585399248342,["yueyuesama@DESKTOP-AH4OHTF",[[1,2748,"``"]],[2748,2748],[2750,2750]]],[1585399416954,["yueyuesama@DESKTOP-AH4OHTF",[[1,2743,"```"]],[2743,2743],[2746,2746]]],[1585399417688,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2745,"`"]],[2746,2746],[2745,2745]]],[1585399418572,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2741,"````"]],[2745,2745],[2741,2741]]],[1585399419107,["yueyuesama@DESKTOP-AH4OHTF",[[1,2741,"```"]],[2741,2741],[2744,2744]]],[1585399420297,["yueyuesama@DESKTOP-AH4OHTF",[[1,2746,"\n"]],[2744,2744],[2745,2745]]],[1585399426293,["yueyuesama@DESKTOP-AH4OHTF",[[1,2745,"```"]],[2745,2745],[2748,2748]]],[1585399426327,["yueyuesama@DESKTOP-AH4OHTF",[[1,2748,"language\n```\n"]],[2748,2748],[2748,2756]]],[1585399428903,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2741,"```"],[1,2744,"\n"]],[2741,2744],[2742,2742]]],[1585399432205,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2746,"language"],[1,2754,"s"]],[2746,2754],[2747,2747]]],[1585399432871,["yueyuesama@DESKTOP-AH4OHTF",[[1,2747,"hell"]],[2747,2747],[2751,2751]]],[1585399433530,["yueyuesama@DESKTOP-AH4OHTF",[[1,2752,"\n"]],[2751,2751],[2752,2752]]],[1585399437072,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2746,"s"],[1,2747,"S"]],[2746,2747],[2747,2747]]],[1585399444013,["yueyuesama@DESKTOP-AH4OHTF",[[1,2752,"docker rum "]],[2752,2752],[2763,2763]]],[1585399445991,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2759,"rum "]],[2763,2763],[2759,2759]]],[1585399450492,["yueyuesama@DESKTOP-AH4OHTF",[[1,2759,"run -it --rm"]],[2759,2759],[2771,2771]]],[1585399450722,["yueyuesama@DESKTOP-AH4OHTF",[[1,2772,"\n"]],[2771,2771],[2772,2772]]],[1585399460455,["yueyuesama@DESKTOP-AH4OHTF",[[1,2772,"  ubuntu:16.04 \\"]],[2772,2772],[2788,2788]]],[1585399461171,["yueyuesama@DESKTOP-AH4OHTF",[[1,2789,"  \n"]],[2788,2788],[2791,2791]]],[1585399463126,["yueyuesama@DESKTOP-AH4OHTF",[[1,2777,"bi"]],[2777,2777],[2779,2779]]],[1585399463266,["yueyuesama@DESKTOP-AH4OHTF",[[1,2780,"n"]],[2779,2779],[2780,2780]]],[1585399465098,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2777,"bin"]],[2780,2780],[2777,2777]]],[1585399467552,["yueyuesama@DESKTOP-AH4OHTF",[[1,2791,"bin"]],[2791,2791],[2794,2794]]],[1585399471825,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2791,"bin"]],[2794,2794],[2791,2791]]],[1585399473407,["yueyuesama@DESKTOP-AH4OHTF",[[1,2791,"/bin."]],[2791,2791],[2796,2796]]],[1585399473869,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2795,"."]],[2796,2796],[2795,2795]]],[1585399475534,["yueyuesama@DESKTOP-AH4OHTF",[[1,2795,"/bash"]],[2795,2795],[2800,2800]]],[1585399502958,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2810,"``"],[1,2812,"y"]],[2810,2812],[2811,2811]]],[1585399503506,["yueyuesama@DESKTOP-AH4OHTF",[[1,2811,"unx"]],[2811,2811],[2814,2814]]],[1585399504402,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2810,"yunx"]],[2814,2814],[2810,2810]]],[1585399521604,["yueyuesama@DESKTOP-AH4OHTF",[[1,2810,"运行一个可交互的docker"]],[2810,2810],[2824,2824]]],[1585399521637,["yueyuesama@DESKTOP-AH4OHTF",[[1,2818," "]],[2824,2824],[2825,2825]]],[1585399523837,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2818," docker"]],[2825,2825],[2818,2818]]],[1585399529856,["yueyuesama@DESKTOP-AH4OHTF",[[1,2818,"ubuntu"]],[2818,2818],[2824,2824]]],[1585399529888,["yueyuesama@DESKTOP-AH4OHTF",[[1,2818," "]],[2824,2824],[2825,2825]]],[1585399530656,["yueyuesama@DESKTOP-AH4OHTF",[[1,2825,"："]],[2825,2825],[2826,2826]]],[1585399531413,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2825,"："]],[2826,2826],[2825,2825]]],[1585399537520,["yueyuesama@DESKTOP-AH4OHTF",[[1,2825,"160"]],[2825,2825],[2828,2828]]],[1585399538062,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2827,"0"]],[2828,2828],[2827,2827]]],[1585399541151,["yueyuesama@DESKTOP-AH4OHTF",[[1,2827,".04的"]],[2827,2827],[2831,2831]]],[1585399541183,["yueyuesama@DESKTOP-AH4OHTF",[[1,2830," "]],[2831,2831],[2832,2832]]],[1585399566080,["yueyuesama@DESKTOP-AH4OHTF",[[1,2832,"镜像，并进入bash"]],[2832,2832],[2842,2842]]],[1585399566112,["yueyuesama@DESKTOP-AH4OHTF",[[1,2838," "]],[2842,2842],[2843,2843]]],[1585399568808,["yueyuesama@DESKTOP-AH4OHTF",[[1,2843,"内部"]],[2843,2843],[2845,2845]]],[1585399568844,["yueyuesama@DESKTOP-AH4OHTF",[[1,2843," "]],[2845,2845],[2846,2846]]],[1585399573031,["yueyuesama@DESKTOP-AH4OHTF",[[1,2846,"，"]],[2846,2846],[2847,2847]]],[1585399576534,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2835,"并进入 bash 内部，"]],[2847,2847],[2835,2835]]],[1585399595510,["yueyuesama@DESKTOP-AH4OHTF",[[1,2835,"镜像在运行结束后强行移除，"]],[2835,2835],[2848,2848]]],[1585399600380,["yueyuesama@DESKTOP-AH4OHTF",[[1,2848,"并在bash"]],[2848,2848],[2854,2854]]],[1585399600413,["yueyuesama@DESKTOP-AH4OHTF",[[1,2850," "]],[2854,2854],[2855,2855]]],[1585399605865,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2847,"，并在 bash"]],[2855,2855],[2847,2847]]],[1585399606631,["yueyuesama@DESKTOP-AH4OHTF",[[1,2847,"。"]],[2847,2847],[2848,2848]]],[1585399621872,["yueyuesama@DESKTOP-AH4OHTF",[[1,2949,"* \n"]],[2948,2948],[2951,2951]]],[1585399622245,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2949,"* "]],[2951,2951],[2950,2950]]],[1585399623797,["yueyuesama@DESKTOP-AH4OHTF",[[1,2951,"\n"]],[2950,2950],[2951,2951]]],[1585399624444,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2951,"\n"]],[2951,2951],[2950,2950]]],[1585399624627,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2950,"\n"]],[2950,2950],[2949,2949]]],[1585399624794,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2949,"\n"]],[2949,2949],[2948,2948]]],[1585399625324,["yueyuesama@DESKTOP-AH4OHTF",[[1,2951,"\n* "]],[2948,2948],[2951,2951]]],[1585399630261,["yueyuesama@DESKTOP-AH4OHTF",[[1,2951," ****"]],[2951,2951],[2954,2954]]],[1585399633614,["yueyuesama@DESKTOP-AH4OHTF",[[1,2954,"-rm"]],[2954,2954],[2957,2957]]],[1585399651398,["yueyuesama@DESKTOP-AH4OHTF",[[1,2959,"镜像在结束后删除镜像"]],[2959,2959],[2969,2969]]],[1585399654022,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2967,"镜像"]],[2969,2969],[2967,2967]]],[1585399656330,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2959,"镜像"]],[2961,2961],[2959,2959]]],[1585399658682,["yueyuesama@DESKTOP-AH4OHTF",[[1,2959,"容器"]],[2959,2959],[2961,2961]]],[1585399664968,["yueyuesama@DESKTOP-AH4OHTF",[[1,2967,"容器；"]],[2967,2967],[2970,2970]]],[1585399665572,["yueyuesama@DESKTOP-AH4OHTF",[[1,2973,"\n* "]],[2970,2970],[2973,2973]]],[1585399667324,["yueyuesama@DESKTOP-AH4OHTF",[[1,2951,"\n* "]],[2948,2948],[2951,2951]]],[1585399668707,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2949,"* "]],[2951,2951],[2949,2949]]],[1585399669718,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2972,"* "]],[2974,2974],[2972,2972]]],[1585402376505,["yueyuesama@DESKTOP-AH4OHTF",[[1,3639,"* \n"]],[3638,3638],[3641,3641]]],[1585402377108,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3639,"* "]],[3641,3641],[3640,3640]]],[1585402377632,["yueyuesama@DESKTOP-AH4OHTF",[[1,3640,"\n"]],[3640,3640],[3641,3641]]],[1585402382078,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3640,"\n"],[1,3641,"#"]],[3641,3641],[3640,3641]]],[1585402383971,["yueyuesama@DESKTOP-AH4OHTF",[[1,3641,"### "]],[3641,3641],[3645,3645]]],[1585402442087,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2686,"镜像"]],[2686,2686],[2686,2686]]],[1585402445129,["yueyuesama@DESKTOP-AH4OHTF",[[1,2686,"容器"]],[2686,2686],[2688,2688]]],[1585402452288,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2394,"镜像"],[1,2396,"容器"]],[2394,2394],[2396,2396]]],[1585402458732,["yueyuesama@DESKTOP-AH4OHTF",[[1,3645,"删除容器"]],[3645,3645],[3649,3649]]],[1585402459372,["yueyuesama@DESKTOP-AH4OHTF",[[1,3649,"\n\n"]],[3649,3649],[3650,3650]]],[1585402459799,["yueyuesama@DESKTOP-AH4OHTF",[[1,3651,"\n"]],[3650,3650],[3651,3651]]],[1585402460203,["yueyuesama@DESKTOP-AH4OHTF",[[1,3651,"docker rm [OPTIONS] CONTAINER [CONTAINER...]"]],[3651,3651],[3695,3695]]],[1585402461134,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3651,"docker rm [OPTIONS] CONTAINER [CONTAINER...]"]],[3695,3695],[3651,3651]]],[1585402467114,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3651,"\n"],[1,3652,"·"]],[3651,3651],[3652,3652]]],[1585402467525,["yueyuesama@DESKTOP-AH4OHTF",[[1,3652,"··"]],[3652,3652],[3654,3654]]],[1585402468570,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3652,"··"]],[3654,3654],[3652,3652]]],[1585402468739,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3651,"·"],[1,3652,"\n"]],[3652,3652],[3651,3651]]],[1585402469507,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3651,"\n"],[1,3652,"`"]],[3651,3651],[3652,3652]]],[1585402469909,["yueyuesama@DESKTOP-AH4OHTF",[[1,3652,"``"]],[3652,3652],[3654,3654]]],[1585402469942,["yueyuesama@DESKTOP-AH4OHTF",[[1,3654,"language\n```\n"]],[3654,3654],[3654,3662]]],[1585402471544,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3654,"language"],[1,3662,"s"]],[3654,3662],[3655,3655]]],[1585402472337,["yueyuesama@DESKTOP-AH4OHTF",[[1,3655,"hell"]],[3655,3655],[3659,3659]]],[1585402472784,["yueyuesama@DESKTOP-AH4OHTF",[[1,3660,"\n"]],[3659,3659],[3660,3660]]],[1585402473275,["yueyuesama@DESKTOP-AH4OHTF",[[1,3660,"docker rm [OPTIONS] CONTAINER [CONTAINER...]"]],[3660,3660],[3704,3704]]],[1585402480992,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3671,"OPTIONS"],[1,3678,"选项"]],[3671,3678],[3673,3673]]],[1585402482714,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3675,"CONTAINER "],[1,3685,"r"]],[3675,3685],[3676,3676]]],[1585402483292,["yueyuesama@DESKTOP-AH4OHTF",[[1,3676,"ongq"]],[3676,3676],[3680,3680]]],[1585402484277,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3675,"rongq"]],[3680,3680],[3675,3675]]],[1585402487791,["yueyuesama@DESKTOP-AH4OHTF",[[1,3675,"容器"]],[3675,3675],[3677,3677]]],[1585402491494,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3678,"CONTAINER"],[1,3687,"容器"]],[3678,3678],[3680,3680]]],[1585402498565,["yueyuesama@DESKTOP-AH4OHTF",[[1,3689,"\n"]],[3688,3688],[3689,3689]]],[1585402499032,["yueyuesama@DESKTOP-AH4OHTF",[[1,3690,"\n"]],[3689,3689],[3690,3690]]],[1585402499742,["yueyuesama@DESKTOP-AH4OHTF",[[1,3690,"举例："]],[3690,3690],[3693,3693]]],[1585402510551,["yueyuesama@DESKTOP-AH4OHTF",[[1,3694,"\n"]],[3693,3693],[3694,3694]]],[1585402510765,["yueyuesama@DESKTOP-AH4OHTF",[[1,3695,"\n"]],[3694,3694],[3695,3695]]],[1585402511122,["yueyuesama@DESKTOP-AH4OHTF",[[1,3695,"OPTIONS说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。"]],[3695,3695],[3801,3801]]],[1585402513898,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3706,"\n"],[1,3707,"选项"]],[3706,3707],[3708,3708]]],[1585402514534,["yueyuesama@DESKTOP-AH4OHTF",[[1,3706,"\n"],[-1,3706,"选项"]],[3708,3708],[3706,3707]]],[1585402515182,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3695,"OPTIONS"],[1,3702,"选项"]],[3695,3702],[3697,3697]]],[1585402516574,["yueyuesama@DESKTOP-AH4OHTF",[[1,3695,"\n"]],[3694,3694],[3695,3695]]],[1585402516800,["yueyuesama@DESKTOP-AH4OHTF",[[1,3696,"\n"]],[3695,3695],[3696,3696]]],[1585402518599,["yueyuesama@DESKTOP-AH4OHTF",[[1,3695,"说明"]],[3695,3695],[3697,3697]]],[1585402520358,["yueyuesama@DESKTOP-AH4OHTF",[[1,3697,"："]],[3697,3697],[3698,3698]]],[1585402524166,["yueyuesama@DESKTOP-AH4OHTF",[[1,3693,"··"]],[3693,3693],[3695,3695]]],[1585402525092,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3693,"··"]],[3695,3695],[3693,3693]]],[1585402525686,["yueyuesama@DESKTOP-AH4OHTF",[[1,3693,"··"]],[3693,3693],[3695,3695]]],[1585402526476,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3693,"··"]],[3695,3695],[3693,3693]]],[1585402527155,["yueyuesama@DESKTOP-AH4OHTF",[[1,3693,"``"]],[3693,3693],[3695,3695]]],[1585402540568,["yueyuesama@DESKTOP-AH4OHTF",[[1,3694,"docker rm"]],[3694,3694],[3703,3703]]],[1585402543267,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3701,"rm`"]],[3704,3704],[3701,3701]]],[1585402544055,["yueyuesama@DESKTOP-AH4OHTF",[[1,3701,"`"]],[3701,3701],[3702,3702]]],[1585402546223,["yueyuesama@DESKTOP-AH4OHTF",[[1,3701,"em"]],[3701,3701],[3703,3703]]],[1585402546647,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3701,"em"]],[3703,3703],[3701,3701]]],[1585402548516,["yueyuesama@DESKTOP-AH4OHTF",[[1,3701,"rm docker"]],[3701,3701],[3710,3710]]],[1585402549931,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3704,"docker"]],[3710,3710],[3704,3704]]],[1585402551395,["yueyuesama@DESKTOP-AH4OHTF",[[1,3704,"ubnu"]],[3704,3704],[3708,3708]]],[1585402552984,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3704,"ubnu"]],[3708,3708],[3704,3704]]],[1585402555150,["yueyuesama@DESKTOP-AH4OHTF",[[1,3704,"ubuntu"]],[3704,3704],[3710,3710]]],[1585402800748,["yueyuesama@DESKTOP-AH4OHTF",[[1,3716,"sh"]],[3716,3716],[3718,3718]]],[1585402801290,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3716,"sh"]],[3718,3718],[3716,3716]]],[1585402812463,["yueyuesama@DESKTOP-AH4OHTF",[[1,3716,"删除一个已经结束，且"]],[3716,3716],[3726,3726]]],[1585402813170,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3724,"，且"]],[3726,3726],[3724,3724]]],[1585402818774,["yueyuesama@DESKTOP-AH4OHTF",[[1,3724,"且命名为"]],[3724,3724],[3728,3728]]],[1585402821245,["yueyuesama@DESKTOP-AH4OHTF",[[1,3728,"ubuntu"]],[3728,3728],[3734,3734]]],[1585402821278,["yueyuesama@DESKTOP-AH4OHTF",[[1,3728," "]],[3734,3734],[3735,3735]]],[1585402821330,["yueyuesama@DESKTOP-AH4OHTF",[[1,3735,"1"]],[3735,3735],[3736,3736]]],[1585402822233,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3735,"1"]],[3736,3736],[3735,3735]]],[1585402822668,["yueyuesama@DESKTOP-AH4OHTF",[[1,3735,"的"]],[3735,3735],[3736,3736]]],[1585402822701,["yueyuesama@DESKTOP-AH4OHTF",[[1,3735," "]],[3736,3736],[3737,3737]]],[1585402830392,["yueyuesama@DESKTOP-AH4OHTF",[[1,3737,"容器。"]],[3737,3737],[3740,3740]]],[1585402838541,["yueyuesama@DESKTOP-AH4OHTF",[[1,3844,"* \n"]],[3843,3843],[3846,3846]]],[1585402838782,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3844,"* "]],[3846,3846],[3845,3845]]],[1585402839881,["yueyuesama@DESKTOP-AH4OHTF",[[1,3845,"\n"]],[3845,3845],[3846,3846]]],[1585402849064,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3845,"\n"],[1,3846,"#"]],[3846,3846],[3846,3846]]],[1585402851547,["yueyuesama@DESKTOP-AH4OHTF",[[1,3846,"## chu"]],[3846,3846],[3852,3852]]],[1585402852690,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3849,"chu"]],[3852,3852],[3849,3849]]],[1585402861903,["yueyuesama@DESKTOP-AH4OHTF",[[1,3849,"初阶操作"]],[3849,3849],[3853,3853]]],[1585402863201,["yueyuesama@DESKTOP-AH4OHTF",[[1,3853,"\n\n"]],[3853,3853],[3854,3854]]],[1585402863954,["yueyuesama@DESKTOP-AH4OHTF",[[1,3855,"\n"]],[3854,3854],[3855,3855]]],[1585402865942,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3855,"\n"]],[3855,3855],[0,0]]],[1585402976711,["yueyuesama@DESKTOP-AH4OHTF",[[1,3855,"\n"]],[3854,3854],[3855,3855]]],[1585403015644,["yueyuesama@DESKTOP-AH4OHTF",[[-1,47," "],[-1,106," "],[1,107,"T"],[1,115,".000Z\ngoal: 1000"]],[3854,3854],[3869,3869]]],[1585403023264,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3870,"\n"],[1,3871,"l"]],[3870,3870],[3871,3871]]],[1585403023553,["yueyuesama@DESKTOP-AH4OHTF",[[1,3871,"ie"]],[3871,3871],[3873,3873]]],[1585403023998,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3871,"ie"]],[3873,3873],[3871,3871]]],[1585403024158,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3870,"l"],[1,3871,"\n"]],[3871,3871],[3870,3870]]],[1585403027534,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3870,"\n"],[1,3871,"#"]],[3870,3870],[3871,3871]]],[1585403046570,["yueyuesama@DESKTOP-AH4OHTF",[[1,3871,"### 列出镜像"]],[3871,3871],[3879,3879]]],[1585407968666,["yueyuesama@DESKTOP-AH4OHTF",[[1,3879,"\n\n"]],[3879,3879],[3880,3880]]],[1585407969103,["yueyuesama@DESKTOP-AH4OHTF",[[1,3881,"\n"]],[3880,3880],[3881,3881]]],[1585407981674,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"\n"],[1,3882,"docker"]],[3881,3881],[3887,3887]]],[1585407982051,["yueyuesama@DESKTOP-AH4OHTF",[[1,3887," "]],[3887,3887],[3888,3888]]],[1585407983403,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3882,"ocker "]],[3888,3888],[3882,3882]]],[1585407983805,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"d"],[1,3882,"\n"]],[3882,3882],[3881,3881]]],[1585407984278,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"\n"],[1,3882,"~"]],[3881,3881],[3882,3882]]],[1585407984510,["yueyuesama@DESKTOP-AH4OHTF",[[1,3882,"~~~"]],[3882,3882],[3883,3883]]],[1585407984985,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3883,"~~"]],[3883,3883],[3881,3881]]],[1585407987741,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3882,"~"]],[3883,3883],[3882,3882]]],[1585407987922,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"~"],[1,3882,"\n"]],[3882,3882],[3881,3881]]],[1585407988738,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"\n"],[1,3882,"~"]],[3881,3881],[3882,3882]]],[1585407988989,["yueyuesama@DESKTOP-AH4OHTF",[[1,3882,"~~~"]],[3882,3882],[3883,3883]]],[1585407989477,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3883,"~~"]],[3883,3883],[3881,3881]]],[1585407989679,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3880,"\n"]],[3881,3881],[3880,3880]]],[1585407991601,["yueyuesama@DESKTOP-AH4OHTF",[[1,3882,"\n\n"]],[3882,3882],[3883,3883]]],[1585407991807,["yueyuesama@DESKTOP-AH4OHTF",[[1,3884,"\n"]],[3883,3883],[3884,3884]]],[1585407992324,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3884,"\n"]],[3884,3884],[3883,3883]]],[1585407992479,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3883,"\n"]],[3883,3883],[3882,3882]]],[1585407993052,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3880,"~~"]],[3882,3882],[3880,3880]]],[1585407993293,["yueyuesama@DESKTOP-AH4OHTF",[[1,3881,"\n"]],[3880,3880],[3881,3881]]],[1585407994635,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"\n"],[1,3882,"`"]],[3881,3881],[3882,3882]]],[1585407995050,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"`"],[1,3882,"\n"]],[3882,3882],[3881,3881]]],[1585407995588,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3881,"\n"],[1,3882,"`"]],[3881,3881],[3882,3882]]],[1585407995740,["yueyuesama@DESKTOP-AH4OHTF",[[1,3882,"`"]],[3882,3882],[3883,3883]]],[1585408002988,["yueyuesama@DESKTOP-AH4OHTF",[[1,3882,"docker image "]],[3882,3882],[3895,3895]]],[1585408003975,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3894," "]],[3895,3895],[3894,3894]]],[1585408007825,["yueyuesama@DESKTOP-AH4OHTF",[[1,3894," la"]],[3894,3894],[3897,3897]]],[1585408008115,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3896,"a"]],[3897,3897],[3896,3896]]],[1585408008472,["yueyuesama@DESKTOP-AH4OHTF",[[1,3896,"s"]],[3896,3896],[3897,3897]]],[1585408009958,["yueyuesama@DESKTOP-AH4OHTF",[[1,3898,"\n\n"]],[3898,3898],[3899,3899]]],[1585408010179,["yueyuesama@DESKTOP-AH4OHTF",[[1,3900,"\n"]],[3899,3899],[3900,3900]]],[1585408011483,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3900,"\n"],[1,3901,"#"]],[3900,3900],[3901,3901]]],[1585408013896,["yueyuesama@DESKTOP-AH4OHTF",[[1,3901,"## "]],[3901,3901],[3904,3904]]],[1585408014310,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3903," "]],[3904,3904],[3903,3903]]],[1585408015488,["yueyuesama@DESKTOP-AH4OHTF",[[1,3903,"# "]],[3903,3903],[3905,3905]]],[1585408016018,["yueyuesama@DESKTOP-AH4OHTF",[[1,3905,"\n\n"]],[3905,3905],[3906,3906]]],[1585408016630,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3906,"\n"]],[3906,3906],[3905,3905]]],[1585408017145,["yueyuesama@DESKTOP-AH4OHTF",[[1,3905," "]],[3905,3905],[3906,3906]]],[1585408017595,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3905," "]],[3906,3906],[3905,3905]]],[1585408030616,["yueyuesama@DESKTOP-AH4OHTF",[[1,3905,"镜像大小"]],[3905,3905],[3909,3909]]],[1585408032666,["yueyuesama@DESKTOP-AH4OHTF",[[1,3910,"\n"]],[3909,3909],[3910,3910]]],[1585408036453,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3910,"\n"],[1,3911,"`"]],[3910,3910],[3911,3911]]],[1585408036658,["yueyuesama@DESKTOP-AH4OHTF",[[1,3911,"`"]],[3911,3911],[3912,3912]]],[1585408041827,["yueyuesama@DESKTOP-AH4OHTF",[[1,3911,"dockers"]],[3911,3911],[3918,3918]]],[1585408042845,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3917,"s"]],[3918,3918],[3917,3917]]],[1585408051966,["yueyuesama@DESKTOP-AH4OHTF",[[1,3917," system de"]],[3917,3917],[3927,3927]]],[1585408052257,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3926,"e"]],[3927,3927],[3926,3926]]],[1585408053160,["yueyuesama@DESKTOP-AH4OHTF",[[1,3926,"f"]],[3926,3926],[3927,3927]]],[1585408055755,["yueyuesama@DESKTOP-AH4OHTF",[[1,3910,"\n"]],[3909,3909],[3910,3910]]],[1585408057054,["yueyuesama@DESKTOP-AH4OHTF",[[1,3929,"\n\n"]],[3929,3929],[3930,3930]]],[1585408057818,["yueyuesama@DESKTOP-AH4OHTF",[[1,3931,"\n"]],[3930,3930],[3931,3931]]],[1585408078935,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3931,"\n"],[1,3932,"#"]],[3931,3931],[3932,3932]]],[1585408085169,["yueyuesama@DESKTOP-AH4OHTF",[[1,3932,"### 容器操作"]],[3932,3932],[3940,3940]]],[1585408085551,["yueyuesama@DESKTOP-AH4OHTF",[[1,3940,"\n\n"]],[3940,3940],[3941,3941]]],[1585408086353,["yueyuesama@DESKTOP-AH4OHTF",[[1,3942,"\n"]],[3941,3941],[3942,3942]]],[1585408090538,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"\n"],[1,3943,"`"]],[3942,3942],[3943,3943]]],[1585408090724,["yueyuesama@DESKTOP-AH4OHTF",[[1,3943,"`"]],[3943,3943],[3944,3944]]],[1585408102717,["yueyuesama@DESKTOP-AH4OHTF",[[1,3943,"docker container "]],[3943,3943],[3960,3960]]],[1585408196977,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"`"],[-1,3950,"container `"],[1,3961,"start [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]"]],[3942,3961],[4088,4088]]],[1585408200781,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"docker start [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]"],[1,4088,"·"]],[3942,3942],[3943,3943]]],[1585408202495,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"·"],[1,3943,"\n"]],[3943,3943],[3942,3942]]],[1585408203301,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"\n"],[1,3943,"`"]],[3942,3942],[3943,3943]]],[1585408203481,["yueyuesama@DESKTOP-AH4OHTF",[[1,3943,"`"]],[3943,3943],[3944,3944]]],[1585408203731,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3943,"`"]],[3944,3944],[3943,3943]]],[1585408204193,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"`"],[1,3943,"\n"]],[3943,3943],[3942,3942]]],[1585408204762,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3942,"\n"],[1,3943,"`"]],[3942,3942],[3943,3943]]],[1585408204978,["yueyuesama@DESKTOP-AH4OHTF",[[1,3943,"`"]],[3943,3943],[3944,3944]]],[1585408206236,["yueyuesama@DESKTOP-AH4OHTF",[[1,3943,"docker start [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]"]],[3943,3943],[4089,4089]]],[1585408211811,["yueyuesama@DESKTOP-AH4OHTF",[[1,3955,"/stop "]],[3955,3955],[3961,3961]]],[1585408216404,["yueyuesama@DESKTOP-AH4OHTF",[[1,3960,"/restart "]],[3960,3960],[3969,3969]]],[1585408222363,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4005,"\n\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\n\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]"]],[4005,4104],[4005,4005]]],[1585408254152,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3969,"  "]],[3970,3970],[3968,3968]]],[1585408257697,["yueyuesama@DESKTOP-AH4OHTF",[[1,4004,"\n\n"]],[4004,4004],[4005,4005]]],[1585408257736,["yueyuesama@DESKTOP-AH4OHTF",[[1,4006,"\n"]],[4005,4005],[4006,4006]]],[1585408260819,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4006,"\n"],[1,4007,"j"]],[4006,4006],[4007,4007]]],[1585408261427,["yueyuesama@DESKTOP-AH4OHTF",[[1,4007,"uli"]],[4007,4007],[4010,4010]]],[1585408261881,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4007,"uli"]],[4010,4010],[4007,4007]]],[1585408262103,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4006,"j"],[1,4007,"\n"]],[4007,4007],[4006,4006]]],[1585408263665,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4006,"\n"],[1,4007,"举例"]],[4006,4006],[4008,4008]]],[1585408266377,["yueyuesama@DESKTOP-AH4OHTF",[[1,4008,"：··"]],[4008,4008],[4011,4011]]],[1585408267233,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4009,"··"]],[4011,4011],[4009,4009]]],[1585408268942,["yueyuesama@DESKTOP-AH4OHTF",[[1,4009,"```"]],[4009,4009],[4012,4012]]],[1585408269757,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4011,"`"]],[4012,4012],[4011,4011]]],[1585408271028,["yueyuesama@DESKTOP-AH4OHTF",[[1,4010,"启动已被停止的容器myrunoob\n\ndocker start myrunoob"]],[4010,4010],[4050,4050]]],[1585408277698,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4010,"启动已被停止的容器myrunoob"]],[4010,4027],[4010,4010]]],[1585408279163,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4011,"\n"]],[4012,4012],[4011,4011]]],[1585408279918,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4010,"\n"]],[4011,4011],[4010,4010]]],[1585408281297,["yueyuesama@DESKTOP-AH4OHTF",[[1,4032,"\n\n"]],[4032,4032],[4033,4033]]],[1585408282037,["yueyuesama@DESKTOP-AH4OHTF",[[1,4034,"\n"]],[4033,4033],[4034,4034]]],[1585408282986,["yueyuesama@DESKTOP-AH4OHTF",[[1,4034,"启动已被停止的容器myrunoob"]],[4034,4034],[4051,4051]]],[1585408286849,["yueyuesama@DESKTOP-AH4OHTF",[[1,4034,"说明："]],[4034,4034],[4037,4037]]],[1585408293454,["yueyuesama@DESKTOP-AH4OHTF",[[1,4054,"/"]],[4054,4054],[4055,4055]]],[1585408309809,["yueyuesama@DESKTOP-AH4OHTF",[[1,4055,"停止运行中的容器myrunoob重启容器myrunoob"]],[4055,4055],[4083,4083]]],[1585408309849,["yueyuesama@DESKTOP-AH4OHTF",[[1,4071," "]],[4083,4083],[4084,4084]]],[1585408312268,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4071," "],[1,4072,"/"]],[4071,4071],[4072,4072]]],[1585408317983,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4022," "],[1,4023,"/stop/restart"]],[4017,4023],[4035,4035]]],[1585408318783,["yueyuesama@DESKTOP-AH4OHTF",[[1,4035," "]],[4035,4035],[4036,4036]]],[1585408324460,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4036,"myrunoob"],[1,4044,"CONTAINER "]],[4036,4044],[4046,4046]]],[1585408325354,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4045," "]],[4046,4046],[4045,4045]]],[1585408327919,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4060,"myrunoob"],[1,4068,"CONTAINER "]],[4060,4068],[4070,4070]]],[1585408329691,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4079,"myrunoob"],[1,4087,"CONTAINER "]],[4079,4087],[4089,4089]]],[1585408330870,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4094,"myrunoob"],[1,4102,"CONTAINER "]],[4094,4102],[4104,4104]]],[1585408333972,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4069," "]],[4070,4070],[4069,4069]]],[1585408334994,["yueyuesama@DESKTOP-AH4OHTF",[[1,4069," "]],[4069,4069],[4070,4070]]],[1585408339405,["yueyuesama@DESKTOP-AH4OHTF",[[1,4060," "]],[4060,4060],[4061,4061]]],[1585408340610,["yueyuesama@DESKTOP-AH4OHTF",[[1,4080," "]],[4080,4080],[4081,4081]]],[1585408341454,["yueyuesama@DESKTOP-AH4OHTF",[[1,4096," "]],[4096,4096],[4097,4097]]],[1585408355824,["yueyuesama@DESKTOP-AH4OHTF",[[1,4108,"\n"]],[4107,4107],[4108,4108]]],[1585408356071,["yueyuesama@DESKTOP-AH4OHTF",[[1,4109,"\n"]],[4108,4108],[4109,4109]]],[1585408357133,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4109,"\n"],[1,4110,"#"]],[4109,4109],[4110,4110]]],[1585408362310,["yueyuesama@DESKTOP-AH4OHTF",[[1,4110,"### 进入容器"]],[4110,4110],[4118,4118]]],[1585408363024,["yueyuesama@DESKTOP-AH4OHTF",[[1,4118,"\n\n"]],[4118,4118],[4119,4119]]],[1585408363803,["yueyuesama@DESKTOP-AH4OHTF",[[1,4120,"\n"]],[4119,4119],[4120,4120]]],[1585408372637,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4120,"\n"],[1,4121,"·"]],[4120,4120],[4121,4121]]],[1585408372793,["yueyuesama@DESKTOP-AH4OHTF",[[1,4121,"·"]],[4121,4121],[4122,4122]]],[1585408374023,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4121,"·"]],[4122,4122],[4121,4121]]],[1585408374189,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4120,"·"],[1,4121,"\n"]],[4121,4121],[4120,4120]]],[1585408375017,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4120,"\n"],[1,4121,"`"]],[4120,4120],[4121,4121]]],[1585408375930,["yueyuesama@DESKTOP-AH4OHTF",[[1,4121,"`"]],[4121,4121],[4122,4122]]],[1585408412164,["yueyuesama@DESKTOP-AH4OHTF",[[1,4121,"docker exec [命令]"]],[4121,4121],[4137,4137]]],[1585408425252,["yueyuesama@DESKTOP-AH4OHTF",[[1,4137," -it 【】"]],[4137,4137],[4144,4144]]],[1585408425941,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4142,"【】"]],[4144,4144],[4142,4142]]],[1585408426571,["yueyuesama@DESKTOP-AH4OHTF",[[1,4142,"[]"]],[4142,4142],[4144,4144]]],[1585408429153,["yueyuesama@DESKTOP-AH4OHTF",[[1,4143,"参数"]],[4143,4143],[4145,4145]]],[1585408430969,["yueyuesama@DESKTOP-AH4OHTF",[[1,4147,"\n\n"]],[4147,4147],[4148,4148]]],[1585408431641,["yueyuesama@DESKTOP-AH4OHTF",[[1,4149,"\n"]],[4148,4148],[4149,4149]]],[1585408437940,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4149,"\n"],[1,4150,"举例"]],[4149,4149],[4151,4151]]],[1585408440174,["yueyuesama@DESKTOP-AH4OHTF",[[1,4151,"：··"]],[4151,4151],[4154,4154]]],[1585408440607,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4152,"··"]],[4154,4154],[4152,4152]]],[1585408441931,["yueyuesama@DESKTOP-AH4OHTF",[[1,4152,"``·"]],[4152,4152],[4155,4155]]],[1585408442670,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4154,"·"]],[4155,4155],[4154,4154]]],[1585408472972,["yueyuesama@DESKTOP-AH4OHTF",[[1,4153,"docker exec -it ubunut bash"]],[4153,4153],[4180,4180]]],[1585408473800,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4176,"bash"]],[4180,4180],[4176,4176]]],[1585408480294,["yueyuesama@DESKTOP-AH4OHTF",[[1,4176,"/bin/bash"]],[4176,4176],[4185,4185]]],[1585408483559,["yueyuesama@DESKTOP-AH4OHTF",[[1,4186,"\n\n"]],[4186,4186],[4187,4187]]],[1585408483892,["yueyuesama@DESKTOP-AH4OHTF",[[1,4188,"\n"]],[4187,4187],[4188,4188]]],[1585408487546,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4188,"\n"],[1,4189,"说明"]],[4188,4188],[4190,4190]]],[1585408490457,["yueyuesama@DESKTOP-AH4OHTF",[[1,4190,"：··"]],[4190,4190],[4193,4193]]],[1585408491252,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4191,"··"]],[4193,4193],[4191,4191]]],[1585408492328,["yueyuesama@DESKTOP-AH4OHTF",[[1,4191,"``"]],[4191,4191],[4193,4193]]],[1585408513851,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4189,"明：``"]],[4193,4193],[4189,4189]]],[1585408514127,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4188,"说"],[1,4189,"\n"]],[4189,4189],[4188,4188]]],[1585408521703,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4188,"\n"],[1,4189,"注"]],[4188,4188],[4189,4189]]],[1585408522948,["yueyuesama@DESKTOP-AH4OHTF",[[1,4189,";"]],[4189,4189],[4190,4190]]],[1585408522988,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4189,";"],[1,4190,"；"]],[4190,4190],[4190,4190]]],[1585408523477,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4189,"；"]],[4190,4190],[4189,4189]]],[1585408529419,["yueyuesama@DESKTOP-AH4OHTF",[[1,4189,":shiy"]],[4189,4189],[4194,4194]]],[1585408530043,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4190,"shiy"]],[4194,4194],[4190,4190]]],[1585408531658,["yueyuesama@DESKTOP-AH4OHTF",[[1,4190,"使用"]],[4190,4190],[4192,4192]]],[1585408536683,["yueyuesama@DESKTOP-AH4OHTF",[[1,4192,"``"]],[4192,4192],[4194,4194]]],[1585408542892,["yueyuesama@DESKTOP-AH4OHTF",[[1,4193,"docker exec "]],[4193,4193],[4205,4205]]],[1585408543568,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4204," "]],[4205,4205],[4204,4204]]],[1585408545055,["yueyuesama@DESKTOP-AH4OHTF",[[1,4205," "]],[4205,4205],[4206,4206]]],[1585408545459,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4205," "]],[4206,4206],[4205,4205]]],[1585408557405,["yueyuesama@DESKTOP-AH4OHTF",[[1,4205,"如果从这个stdin"]],[4205,4205],[4215,4215]]],[1585408557443,["yueyuesama@DESKTOP-AH4OHTF",[[1,4210," "]],[4215,4215],[4216,4216]]],[1585408559517,["yueyuesama@DESKTOP-AH4OHTF",[[1,4216,"中"]],[4216,4216],[4217,4217]]],[1585408559554,["yueyuesama@DESKTOP-AH4OHTF",[[1,4216," "]],[4217,4217],[4218,4218]]],[1585408576805,["yueyuesama@DESKTOP-AH4OHTF",[[1,4218,"退出的时候不会导致容器停止。"]],[4218,4218],[4232,4232]]],[1585408580890,["yueyuesama@DESKTOP-AH4OHTF",[[1,4188,"\n"]],[4186,4186],[4187,4187]]],[1585408582249,["yueyuesama@DESKTOP-AH4OHTF",[[1,4189,"\n"]],[4187,4187],[4188,4188]]],[1585408595528,["yueyuesama@DESKTOP-AH4OHTF",[[1,4234,"\n\n> \n\n\n"]],[4190,4190],[4238,4238]]],[1585408598726,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4190,"注:使用`docker exec`如果从这个 stdin 中退出的时候不会导致容器停止。"]],[4190,4234],[4190,4190]]],[1585408599433,["yueyuesama@DESKTOP-AH4OHTF",[[1,4194,"注:使用`docker exec`如果从这个 stdin 中退出的时候不会导致容器停止。"]],[4194,4194],[4238,4238]]],[1585408602795,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4191,"\n"]],[4191,4191],[4190,4190]]],[1585408602987,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4190,"\n"]],[4190,4190],[4189,4189]]],[1585408603142,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4189,"\n"]],[4189,4189],[4188,4188]]],[1585408604994,["yueyuesama@DESKTOP-AH4OHTF",[[1,4189,"\n"]],[4187,4187],[4188,4188]]],[1585408618741,["yueyuesama@DESKTOP-AH4OHTF",[[1,4188,"说明：进入名为ubuntu"]],[4188,4188],[4201,4201]]],[1585408618781,["yueyuesama@DESKTOP-AH4OHTF",[[1,4195," "]],[4201,4201],[4202,4202]]],[1585408619316,["yueyuesama@DESKTOP-AH4OHTF",[[1,4202,"的"]],[4202,4202],[4203,4203]]],[1585408619355,["yueyuesama@DESKTOP-AH4OHTF",[[1,4202," "]],[4203,4203],[4204,4204]]],[1585408625149,["yueyuesama@DESKTOP-AH4OHTF",[[1,4204,"容器内，使用"]],[4204,4204],[4210,4210]]],[1585408625738,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4208,"使用"]],[4210,4210],[4208,4208]]],[1585408630033,["yueyuesama@DESKTOP-AH4OHTF",[[1,4208,"并运行bash"]],[4208,4208],[4215,4215]]],[1585408630070,["yueyuesama@DESKTOP-AH4OHTF",[[1,4211," "]],[4215,4215],[4216,4216]]],[1585408631504,["yueyuesama@DESKTOP-AH4OHTF",[[1,4216,"。"]],[4216,4216],[4217,4217]]],[1585408633980,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4106," "]],[4107,4107],[4106,4106]]],[1585408634185,["yueyuesama@DESKTOP-AH4OHTF",[[1,4106,"。"]],[4106,4106],[4107,4107]]],[1585408645420,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4267,"\n"],[1,4268,"#"]],[4267,4267],[4268,4268]]],[1585408650798,["yueyuesama@DESKTOP-AH4OHTF",[[1,4268,"### 删除容器"]],[4268,4268],[4276,4276]]],[1585408651262,["yueyuesama@DESKTOP-AH4OHTF",[[1,4276,"\n\n"]],[4276,4276],[4277,4277]]],[1585408652482,["yueyuesama@DESKTOP-AH4OHTF",[[1,4278,"\n"]],[4277,4277],[4278,4278]]],[1585408653603,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4278,"\n"],[1,4279,"`"]],[4278,4278],[4279,4279]]],[1585408653778,["yueyuesama@DESKTOP-AH4OHTF",[[1,4279,"`"]],[4279,4279],[4280,4280]]],[1585408684509,["yueyuesama@DESKTOP-AH4OHTF",[[1,4279,"docker container rm CONTAINER"]],[4279,4279],[4308,4308]]],[1585408685922,["yueyuesama@DESKTOP-AH4OHTF",[[1,4309,"\n\n"]],[4309,4309],[4310,4310]]],[1585408686743,["yueyuesama@DESKTOP-AH4OHTF",[[1,4311,"\n"]],[4310,4310],[4311,4311]]],[1585408688709,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4311,"\n"],[1,4312,"举例"]],[4311,4311],[4313,4313]]],[1585408691113,["yueyuesama@DESKTOP-AH4OHTF",[[1,4313,"：``"]],[4313,4313],[4316,4316]]],[1585408692269,["yueyuesama@DESKTOP-AH4OHTF",[[1,4315,"CONTAINER"]],[4315,4315],[4324,4324]]],[1585408699430,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4315,"CONTAINER`"]],[4315,4325],[4315,4315]]],[1585408704269,["yueyuesama@DESKTOP-AH4OHTF",[[1,4315,"docker container rm CONTAINER`\n\n"]],[4314,4315],[4346,4346]]],[1585408708248,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4335,"CONTAINER"],[1,4344,"ubuntu"]],[4335,4335],[4341,4341]]],[1585408709696,["yueyuesama@DESKTOP-AH4OHTF",[[1,4344,"\n"]],[4342,4342],[4343,4343]]],[1585408710234,["yueyuesama@DESKTOP-AH4OHTF",[[1,4345,"\n"]],[4343,4343],[4344,4344]]],[1585408711961,["yueyuesama@DESKTOP-AH4OHTF",[[1,4344,"说明："]],[4344,4344],[4347,4347]]],[1585408722895,["yueyuesama@DESKTOP-AH4OHTF",[[1,4347,"删除名为ubuntu"]],[4347,4347],[4357,4357]]],[1585408722934,["yueyuesama@DESKTOP-AH4OHTF",[[1,4351," "]],[4357,4357],[4358,4358]]],[1585408723499,["yueyuesama@DESKTOP-AH4OHTF",[[1,4358,"的"]],[4358,4358],[4359,4359]]],[1585408723538,["yueyuesama@DESKTOP-AH4OHTF",[[1,4358," "]],[4359,4359],[4360,4360]]],[1585408726199,["yueyuesama@DESKTOP-AH4OHTF",[[1,4360,"容器"]],[4360,4360],[4362,4362]]],[1585408740889,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"\n"]],[4362,4362],[4363,4363]]],[1585408741165,["yueyuesama@DESKTOP-AH4OHTF",[[1,4365,"\n"]],[4363,4363],[4364,4364]]],[1585408756940,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"docker container prune"]],[4364,4364],[4386,4386]]],[1585408759743,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4364,"docker container prune\n\n"],[1,4388,"·"]],[4364,4364],[4365,4365]]],[1585408760818,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"docker container prune\n\n"],[-1,4364,"·"]],[4365,4365],[4364,4364]]],[1585408767453,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"`"]],[4364,4364],[4365,4365]]],[1585408768101,["yueyuesama@DESKTOP-AH4OHTF",[[1,4387,"`"]],[4387,4387],[4388,4388]]],[1585408773105,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"zhu"]],[4364,4364],[4367,4367]]],[1585408773776,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4364,"zhu"]],[4367,4367],[4364,4364]]],[1585408779252,["yueyuesama@DESKTOP-AH4OHTF",[[1,4364,"注："]],[4364,4364],[4366,4366]]],[1585408805399,["yueyuesama@DESKTOP-AH4OHTF",[[1,4390,"为删除所有处于停止状态的容器。"]],[4390,4390],[4405,4405]]],[1585408814630,["yueyuesama@DESKTOP-AH4OHTF",[[1,4362,"，"]],[4362,4362],[4363,4363]]],[1585408815318,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4362,"，"]],[4363,4363],[4362,4362]]],[1585408815555,["yueyuesama@DESKTOP-AH4OHTF",[[1,4362,"。"]],[4362,4362],[4363,4363]]],[1585408819184,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4405,"。"],[1,4406,"，"]],[4405,4405],[4406,4406]]],[1585408820287,["yueyuesama@DESKTOP-AH4OHTF",[[1,4406,"··"]],[4406,4406],[4408,4408]]],[1585408820693,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4406,"··"]],[4408,4408],[4406,4406]]],[1585408821299,["yueyuesama@DESKTOP-AH4OHTF",[[1,4406,"``"]],[4406,4406],[4408,4408]]],[1585408827665,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4368,"docker container "]],[4368,4385],[4368,4368]]],[1585408828698,["yueyuesama@DESKTOP-AH4OHTF",[[1,4368,"docker container "]],[4368,4368],[4368,4385]]],[1585408835601,["yueyuesama@DESKTOP-AH4OHTF",[[1,4407,"docker container la"]],[4407,4407],[4426,4426]]],[1585408835871,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4425,"a"]],[4426,4426],[4425,4425]]],[1585408838718,["yueyuesama@DESKTOP-AH4OHTF",[[1,4424,"ls -a"]],[4424,4424],[4429,4429]]],[1585408848259,["yueyuesama@DESKTOP-AH4OHTF",[[1,4430,"删除所有容器。"]],[4430,4430],[4437,4437]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["327b88eb-ec0b-42fe-8659-74ae226b43e4",1585409096547,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n```Shell\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```\n\n举例：`docker pull ubuntu:16.04`\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n```Shell\ndocker run [选项] 镜像 [命令]  [ARG...]\n```\n\n举例：\n\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n```shell\ndocker rm [选项] 容器[容器...]\n```\n\n举例：`docker rm ubuntu`\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start/stop/restart CONTAINER`\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：`docker exec -it ubunut /bin/bash`\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`如果从这个 stdin 中退出的时候不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：`docker container rm ubuntu`\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n",[[1585409079495,["yueyuesama@DESKTOP-AH4OHTF",[[1,35,"()"]],[35,35],[37,37]]],[1585409081376,["yueyuesama@DESKTOP-AH4OHTF",[[1,36,"GO"]],[36,36],[38,38]]],[1585409084969,["yueyuesama@DESKTOP-AH4OHTF",[[-1,35,"(GO)"]],[38,38],[35,35]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["bb50add0-a95e-4e4e-bd7f-b05fee3f003f",1585460686415,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n```Shell\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```\n\n举例：`docker pull ubuntu:16.04`\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n```Shell\ndocker run [选项] 镜像 [命令]  [ARG...]\n```\n\n举例：\n\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n```shell\ndocker rm [选项] 容器[容器...]\n```\n\n举例：`docker rm ubuntu`\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start/stop/restart CONTAINER`\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：`docker exec -it ubunut /bin/bash`\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`如果从这个 stdin 中退出的时候不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：`docker container rm ubuntu`\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n",[[1585460663128,["yueyuesama@DESKTOP-AH4OHTF",[[1,4439,"\n"]],[4437,4437],[4438,4438]]],[1585460663324,["yueyuesama@DESKTOP-AH4OHTF",[[1,4440,"\n"]],[4438,4438],[4439,4439]]],[1585460667666,["yueyuesama@DESKTOP-AH4OHTF",[[1,4439,"## "]],[4439,4439],[4442,4442]]],[1585460670884,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4439,"## "]],[4442,4442],[4439,4439]]],[1585460705178,["yueyuesama@DESKTOP-AH4OHTF",[[1,4238,"的好处在于，"]],[4238,4238],[4244,4244]]],[1585460717302,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4259,"的时候"]],[4259,4262],[4259,4259]]],[1585462632203,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4443,"\n"],[1,4444,"#"]],[4443,4443],[4444,4444]]],[1585462632408,["yueyuesama@DESKTOP-AH4OHTF",[[1,4444,"#"]],[4444,4444],[4445,4445]]],[1585462633422,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4444,"#"]],[4445,4445],[4444,4444]]],[1585462649465,["yueyuesama@DESKTOP-AH4OHTF",[[1,4444,"## 进阶操作"]],[4444,4444],[4451,4451]]],[1585462649803,["yueyuesama@DESKTOP-AH4OHTF",[[1,4451,"\n\n"]],[4451,4451],[4452,4452]]],[1585462650279,["yueyuesama@DESKTOP-AH4OHTF",[[1,4453,"\n"]],[4452,4452],[4453,4453]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["23a7029a-8c23-4488-9388-fde2648f2987",1585473298080,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n```Shell\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```\n\n举例：`docker pull ubuntu:16.04`\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n```Shell\ndocker run [选项] 镜像 [命令]  [ARG...]\n```\n\n举例：\n\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n```shell\ndocker rm [选项] 容器[容器...]\n```\n\n举例：`docker rm ubuntu`\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start/stop/restart CONTAINER`\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：`docker exec -it ubunut /bin/bash`\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：`docker container rm ubuntu`\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n\n",[[1585473246681,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4453,"\n"],[1,4454,"#"]],[4453,4453],[4454,4454]]],[1585473248758,["yueyuesama@DESKTOP-AH4OHTF",[[1,4454," day"]],[4454,4454],[4458,4458]]],[1585473250455,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4455,"day"]],[4458,4458],[4455,4455]]],[1585473252886,["yueyuesama@DESKTOP-AH4OHTF",[[1,4455,"DAY "]],[4455,4455],[4459,4459]]],[1585473254093,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4458," "]],[4459,4459],[4458,4458]]],[1585473255078,["yueyuesama@DESKTOP-AH4OHTF",[[1,4458," 3"]],[4458,4458],[4460,4460]]],[1585473256095,["yueyuesama@DESKTOP-AH4OHTF",[[1,4460,"\n\n"]],[4460,4460],[4461,4461]]],[1585473258298,["yueyuesama@DESKTOP-AH4OHTF",[[1,4462,"\n"]],[4461,4461],[4462,4462]]],[1585473259878,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4462,"\n"],[1,4463,"#"]],[4462,4462],[4463,4463]]],[1585473260103,["yueyuesama@DESKTOP-AH4OHTF",[[1,4463,"#"]],[4463,4463],[4464,4464]]],[1585473262094,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4463,"#"]],[4464,4464],[4463,4463]]],[1585473262331,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4462,"#"],[1,4463,"\n"]],[4463,4463],[4462,4462]]],[1585473265474,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4462,"\n"]],[4462,4462],[0,0]]],[1585473266049,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4461,"\n"],[1,4462,"d"]],[0,0],[4461,4462]]],[1585473266586,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4461,"d"]],[4461,4461],[0,0]]],[1585473267418,["yueyuesama@DESKTOP-AH4OHTF",[[1,0,"\n"]],[0,0],[1,1]]],[1585473274102,["yueyuesama@DESKTOP-AH4OHTF",[[1,4462,"\n"]],[4461,4461],[4462,4462]]],[1585473274808,["yueyuesama@DESKTOP-AH4OHTF",[[1,4463,"\n"]],[4462,4462],[4463,4463]]],[1585473277106,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4463,"\n"],[1,4464,"docker"]],[4463,4463],[4469,4469]]],[1585473285034,["yueyuesama@DESKTOP-AH4OHTF",[[1,4469," 的三驾马车"]],[4469,4469],[4475,4475]]],[1585473286205,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4472,"驾"]],[4473,4473],[4472,4472]]],[1585473290421,["yueyuesama@DESKTOP-AH4OHTF",[[1,4472,"架"]],[4472,4472],[4473,4473]]],[1585473294467,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4463,"d"]],[4464,4464],[4463,4463]]],[1585473295791,["yueyuesama@DESKTOP-AH4OHTF",[[1,4463,"D"]],[4463,4463],[4464,4464]]],[1585473317655,["yueyuesama@DESKTOP-AH4OHTF",[[1,4475," Docker compose"]],[4475,4475],[4490,4490]]],[1585473320828,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4483,"c"]],[4484,4484],[4483,4483]]],[1585473322526,["yueyuesama@DESKTOP-AH4OHTF",[[1,4483,"C"]],[4483,4483],[4484,4484]]],[1585473349524,["yueyuesama@DESKTOP-AH4OHTF",[[1,4490,"、Docker Machine 、Docker Swarm。"]],[4490,4490],[4520,4520]]],[1585473350802,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4519,"。"]],[4520,4520],[4519,4519]]],[1585473352053,["yueyuesama@DESKTOP-AH4OHTF",[[1,4519,"，的"]],[4519,4519],[4521,4521]]],[1585473354352,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4519,"，的"]],[4521,4521],[4519,4519]]],[1585473356315,["yueyuesama@DESKTOP-AH4OHTF",[[1,4519,"。的"]],[4519,4519],[4521,4521]]],[1585473357565,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4520,"的"]],[4521,4521],[4520,4520]]],[1585473365091,["yueyuesama@DESKTOP-AH4OHTF",[[1,4520,"使用方法以及"]],[4520,4520],[4526,4526]]],[1585473370969,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4520,"使用方法以及"]],[4526,4526],[4520,4520]]],[1585473380410,["yueyuesama@DESKTOP-AH4OHTF",[[1,4520,"原理以及使用方法。"]],[4520,4520],[4529,4529]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["60c45700-a381-4c90-9fe8-e9f9928b2eee",1585478185145,"\n---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n```Shell\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```\n\n举例：`docker pull ubuntu:16.04`\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n```Shell\ndocker run [选项] 镜像 [命令]  [ARG...]\n```\n\n举例：\n\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n```shell\ndocker rm [选项] 容器[容器...]\n```\n\n举例：`docker rm ubuntu`\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start/stop/restart CONTAINER`\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：`docker exec -it ubunut /bin/bash`\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：`docker container rm ubuntu`\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。原理以及使用方法。",[[1585478136312,["yueyuesama@DESKTOP-AH4OHTF",[[1,4454,"\n"]],[4452,4452],[4453,4453]]],[1585478136395,["yueyuesama@DESKTOP-AH4OHTF",[[1,4455,"\n"]],[4453,4453],[4454,4454]]],[1585478144298,["yueyuesama@DESKTOP-AH4OHTF",[[1,4454,"#### Docker"]],[4454,4454],[4465,4465]]],[1585478150846,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4464,"r"]],[4465,4465],[4464,4464]]],[1585478155985,["yueyuesama@DESKTOP-AH4OHTF",[[1,4464," 镜像定制"]],[4464,4464],[4469,4469]]],[1585478158509,["yueyuesama@DESKTOP-AH4OHTF",[[1,4471,"\n"]],[4469,4469],[4470,4470]]],[1585478158897,["yueyuesama@DESKTOP-AH4OHTF",[[1,4472,"\n"]],[4470,4470],[4471,4471]]],[1585478174572,["yueyuesama@DESKTOP-AH4OHTF",[[1,4471,"#### Docker 数据共享"]],[4471,4471],[4487,4487]]],[1585478174822,["yueyuesama@DESKTOP-AH4OHTF",[[1,4489,"\n"]],[4487,4487],[4488,4488]]],[1585478175345,["yueyuesama@DESKTOP-AH4OHTF",[[1,4490,"\n"]],[4488,4488],[4489,4489]]],[1585478181861,["yueyuesama@DESKTOP-AH4OHTF",[[1,4489,"#### Docker "]],[4489,4489],[4501,4501]]],[1585478185279,["yueyuesama@DESKTOP-AH4OHTF",[[1,4503," "]],[4504,4504],[4505,4505]]],[1585478186408,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4504,"1"]],[4505,4505],[4504,4504]]],[1585478187636,["yueyuesama@DESKTOP-AH4OHTF",[[1,4504,"模式"]],[4504,4504],[4506,4506]]],[1585478189508,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4503," "]],[4504,4504],[4503,4503]]],[1585478193005,["yueyuesama@DESKTOP-AH4OHTF",[[1,4464,"r"]],[4464,4464],[4465,4465]]],[1585478203845,["yueyuesama@DESKTOP-AH4OHTF",[[1,4472,"\n"]],[4470,4470],[4471,4471]]],[1585478206520,["yueyuesama@DESKTOP-AH4OHTF",[[1,4473,"\n"]],[4471,4471],[4472,4472]]],[1585478303984,[null,[[1,4504,"网络模式"],[-1,4506,"模式"],[1,4508,"#"]],[4504,4504],[4509,4509]]],[1585478303984,[null,[[-1,4504,"网络模式"],[1,4510,"模式"],[-1,4510,"#"]],[4509,4509],[4504,4504]]],[1585478252419,["yueyuesama@DESKTOP-AH4OHTF",[[1,4472,"由于docker"]],[4472,4472],[4480,4480]]],[1585478252458,["yueyuesama@DESKTOP-AH4OHTF",[[1,4474," "]],[4480,4480],[4481,4481]]],[1585478254092,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4475,"docker"]],[4481,4481],[4475,4475]]],[1585478256342,["yueyuesama@DESKTOP-AH4OHTF",[[1,4475,"Docker的"]],[4475,4475],[4482,4482]]],[1585478256378,["yueyuesama@DESKTOP-AH4OHTF",[[1,4481," "]],[4482,4482],[4483,4483]]],[1585478259655,["yueyuesama@DESKTOP-AH4OHTF",[[1,4483,"镜像是"]],[4483,4483],[4486,4486]]],[1585478260179,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4485,"是"]],[4486,4486],[4485,4485]]],[1585478267164,["yueyuesama@DESKTOP-AH4OHTF",[[1,4485,"是只读"]],[4485,4485],[4488,4488]]],[1585478270967,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4485,"是只读"]],[4488,4488],[4485,4485]]],[1585478280014,["yueyuesama@DESKTOP-AH4OHTF",[[1,4485,"属性是只读"]],[4485,4485],[4490,4490]]],[1585478284970,["yueyuesama@DESKTOP-AH4OHTF",[[1,4485,"文件"]],[4485,4485],[4487,4487]]],[1585478301139,["yueyuesama@DESKTOP-AH4OHTF",[[1,4492,"，所以如果改变1"]],[4492,4492],[4500,4500]]],[1585478301177,["yueyuesama@DESKTOP-AH4OHTF",[[1,4499," "]],[4500,4500],[4501,4501]]],[1585478301654,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4500,"1"]],[4501,4501],[4500,4500]]],[1585478302330,["yueyuesama@DESKTOP-AH4OHTF",[[1,4500,"了"]],[4500,4500],[4501,4501]]],[1585478303816,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4500,"了"]],[4501,4501],[4500,4500]]],[1585478363975,[null,[[1,4532,"网络模式"],[-1,4534,"模式"],[1,4536,"#"]],[4532,4532],[4537,4537]]],[1585478363975,[null,[[-1,4532,"网络模式"],[1,4538,"模式"],[-1,4538,"#"]],[4537,4537],[4532,4532]]],[1585478315430,["yueyuesama@DESKTOP-AH4OHTF",[[1,4499,"了相关容器的存储"]],[4499,4499],[4507,4507]]],[1585478320428,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4500,"相关容器的存储"]],[4507,4507],[4500,4500]]],[1585478344053,["yueyuesama@DESKTOP-AH4OHTF",[[1,4500,"由此镜像创造的Container"]],[4500,4500],[4516,4516]]],[1585478344097,["yueyuesama@DESKTOP-AH4OHTF",[[1,4507," "]],[4516,4516],[4517,4517]]],[1585478355262,["yueyuesama@DESKTOP-AH4OHTF",[[1,4517," 能通过很简单的··"]],[4517,4517],[4527,4527]]],[1585478356013,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4525,"··"]],[4527,4527],[4525,4525]]],[1585478356174,["yueyuesama@DESKTOP-AH4OHTF",[[1,4525,"·"]],[4525,4525],[4526,4526]]],[1585478356851,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4525,"·"]],[4526,4526],[4525,4525]]],[1585478357580,["yueyuesama@DESKTOP-AH4OHTF",[[1,4525,"``"]],[4525,4525],[4527,4527]]],[1585478363542,["yueyuesama@DESKTOP-AH4OHTF",[[1,4526,"docker "]],[4526,4526],[4533,4533]]],[1585478423972,[null,[[-1,4534," "],[1,4567,"网络模式"],[-1,4569,"模式"],[1,4571,"#"]],[4534,4534],[4572,4572]]],[1585478423972,[null,[[1,4534," "],[-1,4566,"网络模式"],[1,4572,"模式"],[-1,4572,"#"]],[4572,4572],[4534,4534]]],[1585478367330,["yueyuesama@DESKTOP-AH4OHTF",[[1,4533,"diff "]],[4533,4533],[4538,4538]]],[1585478368051,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4537," "]],[4538,4538],[4537,4537]]],[1585478374668,["yueyuesama@DESKTOP-AH4OHTF",[[1,4537," CONTAINER"]],[4537,4537],[4547,4547]]],[1585478402110,["yueyuesama@DESKTOP-AH4OHTF",[[1,4548,"指令直接看到对容器存储层的改动。"]],[4548,4548],[4564,4564]]],[1585478402375,["yueyuesama@DESKTOP-AH4OHTF",[[1,4566,"\n"]],[4564,4564],[4565,4565]]],[1585478403125,["yueyuesama@DESKTOP-AH4OHTF",[[1,4567,"\n"]],[4565,4565],[4566,4566]]],[1585478419496,["yueyuesama@DESKTOP-AH4OHTF",[[1,4566,"也因为这种特性，"]],[4566,4566],[4574,4574]]],[1585478483980,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4574,"\n"],[1,4607,"网络模式"],[-1,4609,"模式"],[1,4611,"#"]],[4564,4564],[4612,4612]]],[1585478483980,[null,[[1,4564," "],[-1,4564,"\n"],[1,4574,"\n"],[-1,4606,"网络模式"],[1,4612,"模式"],[-1,4612,"#"]],[4612,4612],[4564,4564]]],[1585478428426,["yueyuesama@DESKTOP-AH4OHTF",[[1,4574,"Docker也"]],[4574,4574],[4581,4581]]],[1585478428465,["yueyuesama@DESKTOP-AH4OHTF",[[1,4580," "]],[4581,4581],[4582,4582]]],[1585478437811,["yueyuesama@DESKTOP-AH4OHTF",[[1,4582,"集成了类似于Git"]],[4582,4582],[4591,4591]]],[1585478437849,["yueyuesama@DESKTOP-AH4OHTF",[[1,4588," "]],[4591,4591],[4592,4592]]],[1585478438574,["yueyuesama@DESKTOP-AH4OHTF",[[1,4592,"的"]],[4592,4592],[4593,4593]]],[1585478438612,["yueyuesama@DESKTOP-AH4OHTF",[[1,4592," "]],[4593,4593],[4594,4594]]],[1585478439211,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4593,"的"]],[4594,4594],[4593,4593]]],[1585478443113,["yueyuesama@DESKTOP-AH4OHTF",[[1,4593,"类似的"]],[4593,4593],[4596,4596]]],[1585478603974,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4596,"\n"],[-1,4629,"\n\n"],[1,4631,"网络"],[1,4633,"\n\n#"]],[4564,4564],[4636,4636]]],[1585478603974,[null,[[1,4564," "],[-1,4564,"\n"],[1,4596,"\n"],[1,4628,"\n\n"],[-1,4628,"网络"],[-1,4632,"\n\n#"]],[4636,4636],[4564,4564]]],[1585478559072,["yueyuesama@DESKTOP-AH4OHTF",[[1,4596,"commit"]],[4596,4596],[4602,4602]]],[1585478559111,["yueyuesama@DESKTOP-AH4OHTF",[[1,4596," "]],[4602,4602],[4603,4603]]],[1585478562008,["yueyuesama@DESKTOP-AH4OHTF",[[1,4603," "]],[4603,4603],[4604,4604]]],[1585478564005,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4597,"commit "]],[4604,4604],[4597,4597]]],[1585478566095,["yueyuesama@DESKTOP-AH4OHTF",[[1,4597,"``"]],[4597,4597],[4599,4599]]],[1585478567805,["yueyuesama@DESKTOP-AH4OHTF",[[1,4598,"commit"]],[4598,4598],[4604,4604]]],[1585478572256,["yueyuesama@DESKTOP-AH4OHTF",[[1,4605,"管理方法"]],[4605,4605],[4609,4609]]],[1585478663983,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4611,"\n"],[1,4642,"网络模式"],[-1,4644,"模式"],[1,4646,"#"]],[4564,4564],[4647,4647]]],[1585478663983,[null,[[1,4564," "],[-1,4564,"\n"],[1,4611,"\n"],[-1,4641,"网络模式"],[1,4647,"模式"],[-1,4647,"#"]],[4647,4647],[4564,4564]]],[1585478640945,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4582,"集成了"],[1,4585,"有"]],[4582,4582],[4583,4583]]],[1585478723978,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4609,"\n"],[1,4640,"网络模式"],[-1,4642,"模式"],[1,4644,"#"]],[4564,4564],[4645,4645]]],[1585478723978,[null,[[1,4564," "],[-1,4564,"\n"],[1,4609,"\n"],[-1,4639,"网络模式"],[1,4645,"模式"],[-1,4645,"#"]],[4645,4645],[4564,4564]]],[1585478715515,["yueyuesama@DESKTOP-AH4OHTF",[[1,4607,"可以通过``"]],[4607,4607],[4613,4613]]],[1585478716975,["yueyuesama@DESKTOP-AH4OHTF",[[1,4612,"docker commit"]],[4612,4612],[4625,4625]]],[1585478721125,["yueyuesama@DESKTOP-AH4OHTF",[[1,4626,"命令"]],[4626,4626],[4628,4628]]],[1585478783980,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4630,"\n"],[1,4661,"网络模式"],[-1,4663,"模式"],[1,4665,"#"]],[4564,4564],[4666,4666]]],[1585478783980,[null,[[1,4564," "],[-1,4564,"\n"],[1,4630,"\n"],[-1,4660,"网络模式"],[1,4666,"模式"],[-1,4666,"#"]],[4666,4666],[4564,4564]]],[1585478737477,["yueyuesama@DESKTOP-AH4OHTF",[[1,4628,"，将当前状态下的Container"]],[4628,4628],[4645,4645]]],[1585478737515,["yueyuesama@DESKTOP-AH4OHTF",[[1,4636," "]],[4645,4645],[4646,4646]]],[1585478744827,["yueyuesama@DESKTOP-AH4OHTF",[[1,4646,"保存"]],[4646,4646],[4648,4648]]],[1585478744863,["yueyuesama@DESKTOP-AH4OHTF",[[1,4646," "]],[4648,4648],[4649,4649]]],[1585478766601,["yueyuesama@DESKTOP-AH4OHTF",[[1,4649,"起来，甚至于定义为镜像"]],[4649,4649],[4660,4660]]],[1585478771109,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4655,"定义为"]],[4658,4658],[4655,4655]]],[1585478773849,["yueyuesama@DESKTOP-AH4OHTF",[[1,4655,"保持"]],[4655,4655],[4657,4657]]],[1585478774322,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4655,"保持"]],[4657,4657],[4655,4655]]],[1585478776210,["yueyuesama@DESKTOP-AH4OHTF",[[1,4655,"保存为"]],[4655,4655],[4658,4658]]],[1585478781407,["yueyuesama@DESKTOP-AH4OHTF",[[1,4660,"。"]],[4660,4660],[4661,4661]]],[1585478782122,["yueyuesama@DESKTOP-AH4OHTF",[[1,4663,"\n"]],[4661,4661],[4662,4662]]],[1585478782647,["yueyuesama@DESKTOP-AH4OHTF",[[1,4664,"\n"]],[4662,4662],[4663,4663]]],[1585478843985,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4665,"\n"],[1,4696,"网络模式"],[-1,4698,"模式"],[1,4700,"#"]],[4564,4564],[4701,4701]]],[1585478843985,[null,[[1,4564," "],[-1,4564,"\n"],[1,4665,"\n"],[-1,4695,"网络模式"],[1,4701,"模式"],[-1,4701,"#"]],[4701,4701],[4564,4564]]],[1585478785000,["yueyuesama@DESKTOP-AH4OHTF",[[1,4663,"举例"]],[4663,4663],[4665,4665]]],[1585478800969,["yueyuesama@DESKTOP-AH4OHTF",[[1,4660,"部署在其他环境、"]],[4660,4660],[4668,4668]]],[1585478801845,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4667,"、"]],[4668,4668],[4667,4667]]],[1585478802857,["yueyuesama@DESKTOP-AH4OHTF",[[1,4667,"？"]],[4667,4667],[4668,4668]]],[1585478803384,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4667,"？"]],[4668,4668],[4667,4667]]],[1585478805773,["yueyuesama@DESKTOP-AH4OHTF",[[1,4667,"/h"]],[4667,4667],[4669,4669]]],[1585478806820,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4667,"/h"]],[4669,4669],[4667,4667]]],[1585478807185,["yueyuesama@DESKTOP-AH4OHTF",[[1,4667,"h"]],[4667,4667],[4668,4668]]],[1585478807225,["yueyuesama@DESKTOP-AH4OHTF",[[1,4667," "]],[4668,4668],[4669,4669]]],[1585478807386,["yueyuesama@DESKTOP-AH4OHTF",[[1,4669,"u"]],[4669,4669],[4670,4670]]],[1585478808858,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4667," hu"]],[4670,4670],[4667,4667]]],[1585478815597,["yueyuesama@DESKTOP-AH4OHTF",[[1,4667,"或用于Debug"]],[4667,4667],[4675,4675]]],[1585478815633,["yueyuesama@DESKTOP-AH4OHTF",[[1,4670," "]],[4675,4675],[4676,4676]]],[1585478818262,["yueyuesama@DESKTOP-AH4OHTF",[[1,4676," "]],[4676,4676],[4677,4677]]],[1585478820255,["yueyuesama@DESKTOP-AH4OHTF",[[1,4682,"："]],[4682,4682],[4683,4683]]],[1585478821670,["yueyuesama@DESKTOP-AH4OHTF",[[1,4685,"\n"]],[4683,4683],[4684,4684]]],[1585478822742,["yueyuesama@DESKTOP-AH4OHTF",[[1,4684,"···"]],[4684,4684],[4687,4687]]],[1585478823508,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4684,"···"]],[4687,4687],[4684,4684]]],[1585478824473,["yueyuesama@DESKTOP-AH4OHTF",[[1,4684,"```"]],[4684,4684],[4687,4687]]],[1585478824510,["yueyuesama@DESKTOP-AH4OHTF",[[1,4687,"language\n```\n"]],[4687,4687],[4687,4695]]],[1585478826372,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4687,"language"],[1,4695,"s"]],[4687,4695],[4688,4688]]],[1585478828073,["yueyuesama@DESKTOP-AH4OHTF",[[1,4688,"hell"]],[4688,4688],[4692,4692]]],[1585478828369,["yueyuesama@DESKTOP-AH4OHTF",[[1,4693,"\n"]],[4692,4692],[4693,4693]]],[1585478841432,["yueyuesama@DESKTOP-AH4OHTF",[[1,4693,"docker commit \\\n\n--author \"海⻢学院\" \\\n\n--message \"修改了默认⾸⻚\" \\\n\nwebserver \\\n\nnginx:v2"]],[4693,4693],[4773,4773]]],[1585478903981,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4780,"\n"],[1,4811,"网络模式"],[-1,4813,"模式"],[1,4815,"#"]],[4564,4564],[4816,4816]]],[1585478903981,[null,[[1,4564," "],[-1,4564,"\n"],[1,4780,"\n"],[-1,4810,"网络模式"],[1,4816,"模式"],[-1,4816,"#"]],[4816,4816],[4564,4564]]],[1585478846234,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4720,"海⻢学院"],[1,4724,"T"]],[4720,4724],[4721,4721]]],[1585478847397,["yueyuesama@DESKTOP-AH4OHTF",[[1,4721,"in"]],[4721,4721],[4723,4723]]],[1585478848193,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4722,"n"]],[4723,4723],[4722,4722]]],[1585478855820,["yueyuesama@DESKTOP-AH4OHTF",[[1,4722,"nt"]],[4722,4722],[4724,4724]]],[1585478856141,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4723,"t"]],[4724,4724],[4723,4723]]],[1585478858208,["yueyuesama@DESKTOP-AH4OHTF",[[1,4723,"yxiu"]],[4723,4723],[4727,4727]]],[1585478859254,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4724,"xiu"]],[4727,4727],[4724,4724]]],[1585478860483,["yueyuesama@DESKTOP-AH4OHTF",[[1,4724,"Xiu"]],[4724,4724],[4727,4727]]],[1585478868483,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4743,"修改了默认⾸⻚"],[1,4750,"d"]],[4743,4750],[4744,4744]]],[1585478869633,["yueyuesama@DESKTOP-AH4OHTF",[[1,4744,"iy="]],[4744,4744],[4747,4747]]],[1585478870516,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4743,"diy="]],[4747,4747],[4743,4743]]],[1585478873769,["yueyuesama@DESKTOP-AH4OHTF",[[1,4743,"第一次修改"]],[4743,4743],[4748,4748]]],[1585478876779,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4743,"第一次修改"]],[4748,4748],[4743,4743]]],[1585478963984,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4776,"\n"],[1,4807,"网络模式"],[-1,4809,"模式"],[1,4811,"#"]],[4564,4564],[4812,4812]]],[1585478963984,[null,[[1,4564," "],[-1,4564,"\n"],[1,4776,"\n"],[-1,4806,"网络模式"],[1,4812,"模式"],[-1,4812,"#"]],[4812,4812],[4564,4564]]],[1585478937342,["yueyuesama@DESKTOP-AH4OHTF",[[1,4743,"2020年3月29日备份"]],[4743,4743],[4755,4755]]],[1585478946732,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4779,"v2"],[1,4781,"backup"]],[4779,4779],[4785,4785]]],[1585478950461,["yueyuesama@DESKTOP-AH4OHTF",[[1,4785,"001"]],[4785,4785],[4788,4788]]],[1585478955425,["yueyuesama@DESKTOP-AH4OHTF",[[1,4795,"\n"]],[4793,4793],[4794,4794]]],[1585478955714,["yueyuesama@DESKTOP-AH4OHTF",[[1,4796,"\n"]],[4794,4794],[4795,4795]]],[1585478956463,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4796,"\n"]],[4795,4795],[4794,4794]]],[1585479024000,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4796,"\n"],[1,4827,"网络模式"],[-1,4829,"模式"],[1,4831,"#"]],[4564,4564],[4832,4832]]],[1585479024000,[null,[[1,4564," "],[-1,4564,"\n"],[1,4796,"\n"],[-1,4826,"网络模式"],[1,4832,"模式"],[-1,4832,"#"]],[4832,4832],[4564,4564]]],[1585478964727,["yueyuesama@DESKTOP-AH4OHTF",[[1,4794,"其中 --author 是指定修改的作者，⽽ --message 则是记录本次修改的内容。这点和 git 版本控制相\n\n似，不过这⾥这些信息可以省略留空。"]],[4794,4794],[4871,4871]]],[1585478971180,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4594," `commit`"],[1,4603,"版本控制"]],[4594,4594],[4598,4598]]],[1585478975169,["yueyuesama@DESKTOP-AH4OHTF",[[1,4602,"，"]],[4602,4602],[4603,4603]]],[1585478978736,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4604,"以"]],[4604,4605],[4604,4604]]],[1585479143992,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4868,"\n"],[1,4899,"网络模式"],[-1,4901,"模式"],[1,4903,"#"]],[4564,4564],[4904,4904]]],[1585479143992,[null,[[1,4564," "],[-1,4564,"\n"],[1,4868,"\n"],[-1,4898,"网络模式"],[1,4904,"模式"],[-1,4904,"#"]],[4904,4904],[4564,4564]]],[1585479086470,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4848,"\n"]],[4849,4849],[4848,4848]]],[1585479087220,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4847,"\n"]],[4848,4848],[4847,4847]]],[1585479093757,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4810,"⽽"]],[4810,4811],[4810,4810]]],[1585479097355,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4821,"则"]],[4821,4822],[4821,4821]]],[1585479101785,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4829,"内容"],[1,4831,"备注"]],[4829,4829],[4831,4831]]],[1585479108732,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4836,"g"],[1,4837,"G"],[-1,4839," "]],[4836,4836],[4839,4839]]],[1585479111585,["yueyuesama@DESKTOP-AH4OHTF",[[1,4839," "]],[4839,4839],[4840,4840]]],[1585479114446,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4850,"⾥"],[1,4851,"里"]],[4850,4850],[4851,4851]]],[1585479128344,["yueyuesama@DESKTOP-AH4OHTF",[[1,4864,"\n"]],[4863,4863],[4864,4864]]],[1585479128519,["yueyuesama@DESKTOP-AH4OHTF",[[1,4865,"\n"]],[4864,4864],[4865,4865]]],[1585479131679,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4846,"，不过这里这些信息可以省略留空"]],[4846,4861],[4846,4846]]],[1585479203989,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4851,"\n"],[1,4882,"网络模式"],[-1,4884,"模式"],[1,4886,"#"]],[4564,4564],[4887,4887]]],[1585479203989,[null,[[1,4564," "],[-1,4564,"\n"],[1,4851,"\n"],[-1,4881,"网络模式"],[1,4887,"模式"],[-1,4887,"#"]],[4887,4887],[4564,4564]]],[1585479154028,["yueyuesama@DESKTOP-AH4OHTF",[[1,4849,"虽然··"]],[4849,4849],[4853,4853]]],[1585479154606,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4851,"··"]],[4853,4853],[4851,4851]]],[1585479155471,["yueyuesama@DESKTOP-AH4OHTF",[[1,4851,"``"]],[4851,4851],[4853,4853]]],[1585479163045,["yueyuesama@DESKTOP-AH4OHTF",[[1,4852,"docker commit "]],[4852,4852],[4866,4866]]],[1585479164318,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4865," "]],[4866,4866],[4865,4865]]],[1585479182385,["yueyuesama@DESKTOP-AH4OHTF",[[1,4866,"命令能让我们轻松的修改一个Dockers"]],[4866,4866],[4886,4886]]],[1585479182425,["yueyuesama@DESKTOP-AH4OHTF",[[1,4879," "]],[4886,4886],[4887,4887]]],[1585479184820,["yueyuesama@DESKTOP-AH4OHTF",[[1,4887," image "]],[4887,4887],[4894,4894]]],[1585479186379,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4893," "]],[4894,4894],[4893,4893]]],[1585479188580,["yueyuesama@DESKTOP-AH4OHTF",[[1,4893,"但是"]],[4893,4893],[4895,4895]]],[1585479188622,["yueyuesama@DESKTOP-AH4OHTF",[[1,4893," "]],[4895,4895],[4896,4896]]],[1585479203031,["yueyuesama@DESKTOP-AH4OHTF",[[1,4896,"在实际的操作中，不推荐这样进行操作"]],[4896,4896],[4913,4913]]],[1585479263988,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4915,"\n"],[1,4946,"网络模式"],[-1,4948,"模式"],[1,4950,"#"]],[4564,4564],[4951,4951]]],[1585479263988,[null,[[1,4564," "],[-1,4564,"\n"],[1,4915,"\n"],[-1,4945,"网络模式"],[1,4951,"模式"],[-1,4951,"#"]],[4951,4951],[4564,4564]]],[1585479209523,["yueyuesama@DESKTOP-AH4OHTF",[[1,4913,"。因为纤维"]],[4913,4913],[4918,4918]]],[1585479210028,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4916,"纤维"]],[4918,4918],[4916,4916]]],[1585479229395,["yueyuesama@DESKTOP-AH4OHTF",[[1,4916,"通过前面的学习，我们知道Dockers"]],[4916,4916],[4935,4935]]],[1585479229437,["yueyuesama@DESKTOP-AH4OHTF",[[1,4928," "]],[4935,4935],[4936,4936]]],[1585479231002,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4935,"s"]],[4936,4936],[4935,4935]]],[1585479234892,["yueyuesama@DESKTOP-AH4OHTF",[[1,4935,"image"]],[4935,4935],[4940,4940]]],[1585479236818,["yueyuesama@DESKTOP-AH4OHTF",[[1,4935," "]],[4935,4935],[4936,4936]]],[1585479240125,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4886,"s"]],[4887,4887],[4886,4886]]],[1585479242803,["yueyuesama@DESKTOP-AH4OHTF",[[1,4940,"的"]],[4940,4940],[4941,4941]]],[1585479242843,["yueyuesama@DESKTOP-AH4OHTF",[[1,4940," "]],[4941,4941],[4942,4942]]],[1585479250303,["yueyuesama@DESKTOP-AH4OHTF",[[1,4942,"构建是通过"]],[4942,4942],[4947,4947]]],[1585479324002,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4949,"\n"],[1,4980,"网络模式"],[-1,4982,"模式"],[1,4984,"#"]],[4564,4564],[4985,4985]]],[1585479324002,[null,[[1,4564," "],[-1,4564,"\n"],[1,4949,"\n"],[-1,4979,"网络模式"],[1,4985,"模式"],[-1,4985,"#"]],[4985,4985],[4564,4564]]],[1585479267805,["yueyuesama@DESKTOP-AH4OHTF",[[1,4947,"异常"]],[4947,4947],[4949,4949]]],[1585479268338,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4947,"异常"]],[4949,4949],[4947,4947]]],[1585479278849,["yueyuesama@DESKTOP-AH4OHTF",[[1,4947,"一层一层的构建上去的。"]],[4947,4947],[4958,4958]]],[1585479299215,["yueyuesama@DESKTOP-AH4OHTF",[[1,4952,"docker"]],[4952,4952],[4958,4958]]],[1585479299255,["yueyuesama@DESKTOP-AH4OHTF",[[1,4952," "],[1,4958," "]],[4958,4958],[4959,4959]]],[1585479299724,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4958,"r"]],[4959,4959],[4958,4958]]],[1585479300785,["yueyuesama@DESKTOP-AH4OHTF",[[1,4958,"r"]],[4958,4958],[4959,4959]]],[1585479301327,["yueyuesama@DESKTOP-AH4OHTF",[[1,4960," "]],[4959,4959],[4960,4960]]],[1585479303414,["yueyuesama@DESKTOP-AH4OHTF",[[1,4960,"层"]],[4960,4960],[4961,4961]]],[1585479305712,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4961," "]],[4962,4962],[4961,4961]]],[1585479308962,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4953,"d"]],[4954,4954],[4953,4953]]],[1585479310148,["yueyuesama@DESKTOP-AH4OHTF",[[1,4953,"D"]],[4953,4953],[4954,4954]]],[1585479384002,[null,[[-1,4564," "],[1,4565,"\n"],[-1,4969,"\n"],[1,5000,"网络模式"],[-1,5002,"模式"],[1,5004,"#"]],[4564,4564],[5005,5005]]],[1585479384002,[null,[[1,4564," "],[-1,4564,"\n"],[1,4969,"\n"],[-1,4999,"网络模式"],[1,5005,"模式"],[-1,5005,"#"]],[5005,5005],[4564,4564]]],[1585479332388,["yueyuesama@DESKTOP-AH4OHTF",[[1,4967,"如果这样"]],[4967,4967],[4971,4971]]],[1585479334849,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4967,"如果这样"]],[4971,4971],[4967,4967]]],[1585479347376,["yueyuesama@DESKTOP-AH4OHTF",[[1,4967,"通过``"]],[4967,4967],[4971,4971]]],[1585479355451,["yueyuesama@DESKTOP-AH4OHTF",[[1,4970,"docker commit "]],[4970,4970],[4984,4984]]],[1585479356711,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4983," "]],[4984,4984],[4983,4983]]],[1585479378875,["yueyuesama@DESKTOP-AH4OHTF",[[1,4984,"来构建会徒增Docker"]],[4984,4984],[4996,4996]]],[1585479378917,["yueyuesama@DESKTOP-AH4OHTF",[[1,4990," "]],[4996,4996],[4997,4997]]],[1585479379510,["yueyuesama@DESKTOP-AH4OHTF",[[1,4997,"的"]],[4997,4997],[4998,4998]]],[1585479379551,["yueyuesama@DESKTOP-AH4OHTF",[[1,4997," "]],[4998,4998],[4999,4999]]],[1585479382551,["yueyuesama@DESKTOP-AH4OHTF",[[1,4999,"层"]],[4999,4999],[5000,5000]]],[1585479444002,[null,[[-1,4564," "],[1,4565,"\n"],[-1,5002,"\n"],[1,5033,"网络模式"],[-1,5035,"模式"],[1,5037,"#"]],[4564,4564],[5038,5038]]],[1585479444002,[null,[[1,4564," "],[-1,4564,"\n"],[1,5002,"\n"],[-1,5032,"网络模式"],[1,5038,"模式"],[-1,5038,"#"]],[5038,5038],[4564,4564]]],[1585479416993,["yueyuesama@DESKTOP-AH4OHTF",[[1,5000,"数，消耗存储空间增加构建时间。"]],[5000,5000],[5015,5015]]],[1585479424593,["yueyuesama@DESKTOP-AH4OHTF",[[1,5017,"\n"]],[5015,5015],[5016,5016]]],[1585479425084,["yueyuesama@DESKTOP-AH4OHTF",[[1,5016,"Dockerfile"]],[5016,5016],[5026,5026]]],[1585479427481,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5016,"Dockerfile"]],[5026,5026],[5016,5016]]],[1585479428232,["yueyuesama@DESKTOP-AH4OHTF",[[1,5018,"\n"]],[5016,5016],[5017,5017]]],[1585479441551,["yueyuesama@DESKTOP-AH4OHTF",[[1,5017,"比较"]],[5017,5017],[5019,5019]]],[1585479504004,[null,[[-1,4564," "],[1,4565,"\n"],[-1,5021,"\n"],[1,5052,"网络模式"],[-1,5054,"模式"],[1,5056,"#"]],[4564,4564],[5057,5057]]],[1585479504004,[null,[[1,4564," "],[-1,4564,"\n"],[1,5021,"\n"],[-1,5051,"网络模式"],[1,5057,"模式"],[-1,5057,"#"]],[5057,5057],[4564,4564]]],[1585479445656,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5017,"比较"]],[5019,5019],[5017,5017]]],[1585479448121,["yueyuesama@DESKTOP-AH4OHTF",[[1,5017,"最有"]],[5017,5017],[5019,5019]]],[1585479448568,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5017,"最有"]],[5019,5019],[5017,5017]]],[1585479454846,["yueyuesama@DESKTOP-AH4OHTF",[[1,5017,"最优的方案就是我"]],[5017,5017],[5025,5025]]],[1585479455969,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5024,"我"]],[5025,5025],[5024,5024]]],[1585479463419,["yueyuesama@DESKTOP-AH4OHTF",[[1,5024,"我们自己构建自己的Dockerfile"]],[5024,5024],[5043,5043]]],[1585479463464,["yueyuesama@DESKTOP-AH4OHTF",[[1,5033," "]],[5043,5043],[5044,5044]]],[1585479564007,[null,[[-1,4564," "],[1,4565,"\n"],[-1,5046,"\n"],[1,5077,"网络模式"],[-1,5079,"模式"],[1,5081,"#"]],[4564,4564],[5082,5082]]],[1585479564007,[null,[[1,4564," "],[-1,4564,"\n"],[1,5046,"\n"],[-1,5076,"网络模式"],[1,5082,"模式"],[-1,5082,"#"]],[5082,5082],[4564,4564]]],[1585479508191,["yueyuesama@DESKTOP-AH4OHTF",[[1,5034,"·"]],[5034,5034],[5035,5035]]],[1585479510044,["yueyuesama@DESKTOP-AH4OHTF",[[1,5045,"`"]],[5045,5045],[5046,5046]]],[1585479512466,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5034,"·"]],[5035,5035],[5034,5034]]],[1585479512670,["yueyuesama@DESKTOP-AH4OHTF",[[1,5034,"`"]],[5034,5034],[5035,5035]]],[1585479532051,["yueyuesama@DESKTOP-AH4OHTF",[[1,5046,"。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀\n条指令的内容，就是描述该层应当如何构建。"]],[5046,5046],[5126,5126]]],[1585479535003,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5076,"令"]],[5077,5077],[5076,5076]]],[1585479537427,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5104,"\n"]],[5105,5105],[5104,5104]]],[1585479550705,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。\n"]],[5047,5125],[5047,5047]]],[1585479552911,["yueyuesama@DESKTOP-AH4OHTF",[[1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。\n"]],[5047,5047],[5047,5125]]],[1585479554857,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。\n"]],[5047,5125],[5047,5047]]],[1585479555482,["yueyuesama@DESKTOP-AH4OHTF",[[1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。\n"]],[5047,5047],[5047,5125]]],[1585479624009,[null,[[-1,4564," "],[1,4565,"\n"],[-1,5126,"\n"],[1,5157,"网络模式"],[-1,5159,"模式"],[1,5161,"#"]],[4564,4564],[5162,5162]]],[1585479624009,[null,[[1,4564," "],[-1,4564,"\n"],[1,5126,"\n"],[-1,5156,"网络模式"],[1,5162,"模式"],[-1,5162,"#"]],[5162,5162],[4564,4564]]],[1585479579553,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。"]],[5047,5124],[5047,5047]]],[1585479581119,["yueyuesama@DESKTOP-AH4OHTF",[[1,5047,"Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层应当如何构建。"]],[5047,5047],[5047,5124]]],[1585479586766,["yueyuesama@DESKTOP-AH4OHTF",[[1,5076,"令"]],[5076,5076],[5077,5077]]],[1585479606788,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5118,"应当如何"]],[5122,5122],[5118,5118]]],[1585479608491,["yueyuesama@DESKTOP-AH4OHTF",[[1,5118,"的"]],[5118,5118],[5119,5119]]],[1585479610316,["yueyuesama@DESKTOP-AH4OHTF",[[1,5121,"方法"]],[5121,5121],[5123,5123]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["6e7f0ea5-a8ac-4704-b2d0-2f724b801336",1585490622807,"\n---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n```Shell\ndocker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]\n```\n\n举例：`docker pull ubuntu:16.04`\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n```Shell\ndocker run [选项] 镜像 [命令]  [ARG...]\n```\n\n举例：\n\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n```shell\ndocker rm [选项] 容器[容器...]\n```\n\n举例：`docker rm ubuntu`\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：`docker start/stop/restart CONTAINER`\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：`docker exec -it ubunut /bin/bash`\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：`docker container rm ubuntu`\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n#### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"TinyXiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n#### Docker 数据共享\n\n#### Docker 网络模式\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。原理以及使用方法。",[[1585490576833,["yueyuesama@DESKTOP-AH4OHTF",[[1,5126,"\n"]],[5124,5124],[5125,5125]]],[1585490576986,["yueyuesama@DESKTOP-AH4OHTF",[[1,5127,"\n"]],[5125,5125],[5126,5126]]],[1585490591796,["yueyuesama@DESKTOP-AH4OHTF",[[1,5126,"首先先弄个最简单的例子。"]],[5126,5126],[5138,5138]]],[1585490592585,["yueyuesama@DESKTOP-AH4OHTF",[[1,5140,"\n"]],[5138,5138],[5139,5139]]],[1585490595392,["yueyuesama@DESKTOP-AH4OHTF",[[1,5139,"```"]],[5139,5139],[5142,5142]]],[1585490595456,["yueyuesama@DESKTOP-AH4OHTF",[[1,5142,"language\n```\n"]],[5142,5142],[5142,5150]]],[1585490598320,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5142,"language"],[1,5150,"shell"]],[5142,5142],[5147,5147]]],[1585490598585,["yueyuesama@DESKTOP-AH4OHTF",[[1,5148,"\n"]],[5147,5147],[5148,5148]]],[1585490600690,["yueyuesama@DESKTOP-AH4OHTF",[[1,5148,"FROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html"]],[5148,5148],[5223,5223]]],[1585490608634,["yueyuesama@DESKTOP-AH4OHTF",[[1,5230,"\n"]],[5228,5228],[5229,5229]]],[1585490613160,["yueyuesama@DESKTOP-AH4OHTF",[[1,5139,"\n"]],[5138,5138],[5139,5139]]],[1585490620208,["yueyuesama@DESKTOP-AH4OHTF",[[1,5139,"举例"]],[5139,5139],[5141,5141]]],[1585490625008,["yueyuesama@DESKTOP-AH4OHTF",[[1,5139,"、"]],[5139,5139],[5140,5140]]],[1585490625535,["yueyuesama@DESKTOP-AH4OHTF",[[1,5140,"\n"]],[5140,5140],[5141,5141]]],[1585490627895,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5139,"、"]],[5140,5140],[5139,5139]]],[1585490630222,["yueyuesama@DESKTOP-AH4OHTF",[[1,5142,"："]],[5142,5142],[5143,5143]]],[1585490632557,["yueyuesama@DESKTOP-AH4OHTF",[[1,5233,"s"]],[5233,5233],[5232,5234]]],[1585490634353,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5233,"s\n\n"]],[5232,5232],[5232,5232]]],[1585490634968,["yueyuesama@DESKTOP-AH4OHTF",[[1,5234,"\n"]],[5232,5232],[5233,5233]]],[1585490635399,["yueyuesama@DESKTOP-AH4OHTF",[[1,5235,"\n"]],[5233,5233],[5234,5234]]],[1585490667898,["yueyuesama@DESKTOP-AH4OHTF",[[1,5234,"说明：**FROM**应用"]],[5234,5234],[5247,5247]]],[1585490668285,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5245,"应用"]],[5247,5247],[5245,5245]]],[1585490681305,["yueyuesama@DESKTOP-AH4OHTF",[[1,5245,"引用了一个基础镜像"]],[5245,5245],[5254,5254]]],[1585490692663,["yueyuesama@DESKTOP-AH4OHTF",[[1,5254,"nginx"]],[5254,5254],[5259,5259]]],[1585490692732,["yueyuesama@DESKTOP-AH4OHTF",[[1,5254," "]],[5259,5259],[5260,5260]]],[1585490696912,["yueyuesama@DESKTOP-AH4OHTF",[[1,5260," ，"]],[5260,5260],[5262,5262]]],[1585490698842,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5261,"，"]],[5262,5262],[5261,5261]]],[1585490700673,["yueyuesama@DESKTOP-AH4OHTF",[[1,5261,"作为"]],[5261,5261],[5263,5263]]],[1585490701679,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5261,"作为"]],[5263,5263],[5261,5261]]],[1585490714630,["yueyuesama@DESKTOP-AH4OHTF",[[1,5261,"做"]],[5261,5261],[5262,5262]]],[1585490716416,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5261,"做"]],[5262,5262],[5261,5261]]],[1585490719052,["yueyuesama@DESKTOP-AH4OHTF",[[1,5261,"作为基地"]],[5261,5261],[5265,5265]]],[1585490719954,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5264,"地"]],[5265,5265],[5264,5264]]],[1585490722855,["yueyuesama@DESKTOP-AH4OHTF",[[1,5264,"低。"]],[5264,5264],[5266,5266]]],[1585490731577,["yueyuesama@DESKTOP-AH4OHTF",[[1,5237,"首先"]],[5237,5237],[5239,5239]]],[1585490739326,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5266,"低"],[1,5267,"底"]],[5266,5266],[5267,5267]]],[1585490745930,["yueyuesama@DESKTOP-AH4OHTF",[[1,5267,"（）"]],[5267,5267],[5269,5269]]],[1585490754681,["yueyuesama@DESKTOP-AH4OHTF",[[1,5268,"Docker将"]],[5268,5268],[5275,5275]]],[1585490754748,["yueyuesama@DESKTOP-AH4OHTF",[[1,5274," "]],[5275,5275],[5276,5276]]],[1585490755624,["yueyuesama@DESKTOP-AH4OHTF",[[1,5276,"会"]],[5276,5276],[5277,5277]]],[1585490757940,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5275,"将会"]],[5277,5277],[5275,5275]]],[1585490763099,["yueyuesama@DESKTOP-AH4OHTF",[[1,5268,"如 "]],[5268,5268],[5269,5269]]],[1585490769295,["yueyuesama@DESKTOP-AH4OHTF",[[1,5269,"本地不存在nginx"]],[5269,5269],[5279,5279]]],[1585490769363,["yueyuesama@DESKTOP-AH4OHTF",[[1,5274," "]],[5279,5279],[5280,5280]]],[1585490777916,["yueyuesama@DESKTOP-AH4OHTF",[[1,5280,"镜像"]],[5280,5280],[5282,5282]]],[1585490777981,["yueyuesama@DESKTOP-AH4OHTF",[[1,5280," "]],[5282,5282],[5283,5283]]],[1585490779062,["yueyuesama@DESKTOP-AH4OHTF",[[1,5283,"时候"]],[5283,5283],[5285,5285]]],[1585490779231,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5284,"候"]],[5285,5285],[5284,5284]]],[1585490780256,["yueyuesama@DESKTOP-AH4OHTF",[[1,5284,"，"]],[5284,5284],[5285,5285]]],[1585490800053,["yueyuesama@DESKTOP-AH4OHTF",[[1,5293,"将从Docker"]],[5293,5293],[5301,5301]]],[1585490800119,["yueyuesama@DESKTOP-AH4OHTF",[[1,5295," "]],[5301,5301],[5302,5302]]],[1585490800707,["yueyuesama@DESKTOP-AH4OHTF",[[1,5302," "]],[5302,5302],[5303,5303]]],[1585490825352,["yueyuesama@DESKTOP-AH4OHTF",[[1,5303,"Hub 上拉取一个Nginx"]],[5303,5303],[5317,5317]]],[1585490825420,["yueyuesama@DESKTOP-AH4OHTF",[[1,5312," "]],[5317,5317],[5318,5318]]],[1585490828764,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5257,"n"],[1,5258,"N"]],[5257,5257],[5258,5258]]],[1585490833209,["yueyuesama@DESKTOP-AH4OHTF",[[1,5318,"作为"]],[5318,5318],[5320,5320]]],[1585490833269,["yueyuesama@DESKTOP-AH4OHTF",[[1,5318," "]],[5320,5320],[5321,5321]]],[1585490845438,["yueyuesama@DESKTOP-AH4OHTF",[[1,5321,"这个Docker"]],[5321,5321],[5329,5329]]],[1585490845503,["yueyuesama@DESKTOP-AH4OHTF",[[1,5323," "]],[5329,5329],[5330,5330]]],[1585490849640,["yueyuesama@DESKTOP-AH4OHTF",[[1,5330,"镜像"]],[5330,5330],[5332,5332]]],[1585490849717,["yueyuesama@DESKTOP-AH4OHTF",[[1,5330," "]],[5332,5332],[5333,5333]]],[1585490860362,["yueyuesama@DESKTOP-AH4OHTF",[[1,5333,"的基础，再执行"]],[5333,5333],[5340,5340]]],[1585490861013,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5338,"执行"]],[5340,5340],[5338,5338]]],[1585490862431,["yueyuesama@DESKTOP-AH4OHTF",[[1,5338,"安装"]],[5338,5338],[5340,5340]]],[1585490864785,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5338,"安装"]],[5340,5340],[5338,5338]]],[1585490897473,["yueyuesama@DESKTOP-AH4OHTF",[[1,5338,"按照之后的**RUN**指令执行相应的命令"]],[5338,5338],[5359,5359]]],[1585490904584,["yueyuesama@DESKTOP-AH4OHTF",[[1,5361,"再修改"]],[5361,5361],[5364,5364]]],[1585490908796,["yueyuesama@DESKTOP-AH4OHTF",[[1,5362,"根据**RUN**"]],[5362,5362],[5371,5371]]],[1585490913076,["yueyuesama@DESKTOP-AH4OHTF",[[1,5373,"n"]],[5373,5373],[5374,5374]]],[1585490913141,["yueyuesama@DESKTOP-AH4OHTF",[[1,5373," "]],[5374,5374],[5375,5375]]],[1585490915504,["yueyuesama@DESKTOP-AH4OHTF",[[1,5375,"ginx"]],[5375,5375],[5379,5379]]],[1585490916071,["yueyuesama@DESKTOP-AH4OHTF",[[1,5381,"\n"]],[5379,5379],[5380,5380]]],[1585490920681,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5374,"n"]],[5375,5375],[5374,5374]]],[1585490920942,["yueyuesama@DESKTOP-AH4OHTF",[[1,5374,"N"]],[5374,5374],[5375,5375]]],[1585490939041,["yueyuesama@DESKTOP-AH4OHTF",[[1,5379," de1"]],[5379,5379],[5383,5383]]],[1585490940127,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5380,"de1"]],[5383,5383],[5380,5380]]],[1585490948608,["yueyuesama@DESKTOP-AH4OHTF",[[1,5380,"的初始页面。"]],[5380,5380],[5386,5386]]],[1585491353366,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2415,"``Shell"]],[2415,2422],[2415,2415]]],[1585491354640,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2415,"\n"]],[2416,2416],[2415,2415]]],[1585491356277,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2469,"``"]],[2469,2471],[2469,2469]]],[1585491357802,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2467,"\n"]],[2468,2468],[2467,2467]]],[1585491362080,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2473,"`"],[1,2474,"·"]],[2473,2473],[2474,2474]]],[1585491362466,["yueyuesama@DESKTOP-AH4OHTF",[[1,2474,"·"]],[2474,2474],[2475,2475]]],[1585491364052,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2473,"··"]],[2475,2475],[2473,2473]]],[1585491365319,["yueyuesama@DESKTOP-AH4OHTF",[[1,2473,"```"]],[2473,2473],[2476,2476]]],[1585491368232,["yueyuesama@DESKTOP-AH4OHTF",[[1,2501,"```"]],[2501,2501],[2504,2504]]],[1585491371701,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2503,"`"]],[2501,2501],[2500,2500]]],[1585491375113,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2475,"`"]],[2475,2476],[2475,2475]]],[1585491377634,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2473,"``"],[1,2475,"\n"]],[2473,2475],[2474,2474]]],[1585491380002,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2498,"```"],[1,2501,"\n"]],[2498,2501],[2499,2499]]],[1585491382627,["yueyuesama@DESKTOP-AH4OHTF",[[1,2474,"\n"]],[2473,2473],[2474,2474]]],[1585491384069,["yueyuesama@DESKTOP-AH4OHTF",[[1,2474,"```"]],[2474,2474],[2477,2477]]],[1585491385815,["yueyuesama@DESKTOP-AH4OHTF",[[1,2503,"```"]],[2503,2503],[2506,2506]]],[1585491393274,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2703,"``Shell\n"]],[2703,2711],[2703,2703]]],[1585491395287,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2738,"``"]],[2738,2740],[2738,2738]]],[1585491396725,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2744,"\n"]],[2744,2744],[2743,2743]]],[1585491398437,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2736,"\n"]],[2737,2737],[2736,2736]]],[1585491403323,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3686,"``"]],[3686,3688],[3686,3686]]],[1585491407087,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3652,"``shell\n"]],[3652,3660],[3652,3652]]],[1585491408249,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3676,"\n"]],[3677,3677],[3676,3676]]],[1585491411288,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3682,"`"],[1,3683,"\n"]],[3682,3683],[3683,3683]]],[1585491413730,["yueyuesama@DESKTOP-AH4OHTF",[[1,3683,"```"]],[3683,3683],[3686,3686]]],[1585491414980,["yueyuesama@DESKTOP-AH4OHTF",[[1,3703,"``"]],[3703,3703],[3705,3705]]],[1585491417628,["yueyuesama@DESKTOP-AH4OHTF",[[1,3702," "]],[3702,3702],[3703,3703]]],[1585491420937,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3703,"```"]],[3703,3706],[3703,3703]]],[1585491422755,["yueyuesama@DESKTOP-AH4OHTF",[[1,3686,"`"]],[3685,3686],[3686,3686]]],[1585491422817,["yueyuesama@DESKTOP-AH4OHTF",[[1,3686,"language\n```\n"]],[3686,3686],[3686,3694]]],[1585491426849,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3686,"language\n```\n`"]],[3686,3694],[3685,3685]]],[1585491429999,["yueyuesama@DESKTOP-AH4OHTF",[[1,3703,"```"]],[3703,3703],[3706,3706]]],[1585491442546,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3702," ```"]],[3703,3703],[3702,3702]]],[1585491443848,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3683,"```"]],[3683,3686],[3683,3683]]],[1585491444913,["yueyuesama@DESKTOP-AH4OHTF",[[1,3683,"\n"]],[3683,3683],[3684,3684]]],[1585491446979,["yueyuesama@DESKTOP-AH4OHTF",[[1,3683,"```"]],[3683,3683],[3686,3686]]],[1585491448366,["yueyuesama@DESKTOP-AH4OHTF",[[1,3704,"```"]],[3704,3704],[3707,3707]]],[1585491449636,["yueyuesama@DESKTOP-AH4OHTF",[[1,3708,"\n"]],[3707,3707],[3708,3708]]],[1585491457861,["yueyuesama@DESKTOP-AH4OHTF",[[1,3990,"\n"]],[3990,3990],[3991,3991]]],[1585491460278,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3991,"`"],[1,3992,"\n"]],[3991,3992],[3992,3992]]],[1585491462141,["yueyuesama@DESKTOP-AH4OHTF",[[1,3991,"```"]],[3991,3991],[3994,3994]]],[1585491464609,["yueyuesama@DESKTOP-AH4OHTF",[[1,4033,"\n"]],[4032,4032],[4033,4033]]],[1585491466441,["yueyuesama@DESKTOP-AH4OHTF",[[1,4032,"```"]],[4032,4032],[4035,4035]]],[1585491467785,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4030,"`"]],[4031,4031],[4030,4030]]],[1585491470121,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4140,"`"],[1,4141,"\n"]],[4140,4141],[4141,4141]]],[1585491471284,["yueyuesama@DESKTOP-AH4OHTF",[[1,4141,"\n"]],[4141,4141],[4142,4142]]],[1585491474315,["yueyuesama@DESKTOP-AH4OHTF",[[1,4141,"```"]],[4141,4141],[4144,4144]]],[1585491476135,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4177,"`"],[1,4178,"\n"]],[4177,4178],[4178,4178]]],[1585491476966,["yueyuesama@DESKTOP-AH4OHTF",[[1,4178,"```"]],[4178,4178],[4181,4181]]],[1585491479997,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4312,"`"],[1,4313,"\n"]],[4312,4313],[4313,4313]]],[1585491480496,["yueyuesama@DESKTOP-AH4OHTF",[[1,4313,"\n"]],[4313,4313],[4314,4314]]],[1585491481554,["yueyuesama@DESKTOP-AH4OHTF",[[1,4314,"```"]],[4314,4314],[4317,4317]]],[1585491486597,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4314,"```"]],[4314,4317],[4314,4314]]],[1585491489146,["yueyuesama@DESKTOP-AH4OHTF",[[1,4313,"```"]],[4313,4313],[4316,4316]]],[1585491491047,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4343,"`"]],[4343,4345],[4344,4344]]],[1585491492765,["yueyuesama@DESKTOP-AH4OHTF",[[1,4344,"```"]],[4344,4344],[4347,4347]]],[1585491495054,["yueyuesama@DESKTOP-AH4OHTF",[[1,4348,"\n"]],[4347,4347],[4348,4348]]],[1585491520882,["yueyuesama@DESKTOP-AH4OHTF",[[1,5390,"\n"]],[5388,5388],[5389,5389]]],[1585491580683,["yueyuesama@DESKTOP-AH4OHTF",[[1,5389,"**FROM 和 RUN 指令的作用**\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下俩种格式：\n\nshell 格式：\n\nRUN <命令行命令>  # <命令行命令> 等同于，在终端操作的 shell 命令。\n\nexec 格式：\n\nRUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline"]],[5389,5389],[5685,5685]]],[1585491585645,["yueyuesama@DESKTOP-AH4OHTF",[[1,5687,"\n"]],[5685,5685],[5686,5686]]],[1585491586693,["yueyuesama@DESKTOP-AH4OHTF",[[1,5578,"\n"]],[5577,5577],[5578,5578]]],[1585491590376,["yueyuesama@DESKTOP-AH4OHTF",[[1,5579,"`"]],[5579,5579],[5580,5580]]],[1585491591162,["yueyuesama@DESKTOP-AH4OHTF",[[1,5687,"`"]],[5687,5687],[5688,5688]]],[1585491592637,["yueyuesama@DESKTOP-AH4OHTF",[[1,5523,"`"]],[5523,5523],[5524,5524]]],[1585491603109,["yueyuesama@DESKTOP-AH4OHTF",[[1,5537,"`"]],[5537,5537],[5538,5538]]],[1585491604142,["yueyuesama@DESKTOP-AH4OHTF",[[1,5538,"\n"]],[5538,5538],[5539,5539]]],[1585491604808,["yueyuesama@DESKTOP-AH4OHTF",[[1,5539,"`"]],[5539,5539],[5540,5540]]],[1585491606272,["yueyuesama@DESKTOP-AH4OHTF",[[1,5570,"`"]],[5570,5570],[5571,5571]]],[1585491626088,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5583,"\n"]],[5583,5583],[5582,5582]]],[1585491641801,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5234,"\n"]],[5234,5234],[5233,5233]]],[1585491644953,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5232,"`"]],[5233,5233],[5232,5232]]],[1585491646404,["yueyuesama@DESKTOP-AH4OHTF",[[1,5232,"`"]],[5232,5232],[5233,5233]]],[1585491647190,["yueyuesama@DESKTOP-AH4OHTF",[[1,5234,"\n"]],[5233,5233],[5234,5234]]],[1585491648315,["yueyuesama@DESKTOP-AH4OHTF",[[1,5145,"\n"]],[5144,5144],[5145,5145]]],[1585491659377,["yueyuesama@DESKTOP-AH4OHTF",[[1,5412,"\n"]],[5411,5411],[5412,5412]]],[1585491660664,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5412,"\n"]],[5412,5412],[5411,5411]]],[1585491663487,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5411,"\n"]],[5411,5411],[5410,5410]]],[1585491686915,["yueyuesama@DESKTOP-AH4OHTF",[[1,5390,"\n"]],[5389,5389],[5390,5390]]],[1585491693001,["yueyuesama@DESKTOP-AH4OHTF",[[1,5391,"\n"]],[5389,5389],[5390,5390]]],[1585491694308,["yueyuesama@DESKTOP-AH4OHTF",[[1,5390,"zhu"]],[5390,5390],[5393,5393]]],[1585491694990,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5390,"zhu"]],[5393,5393],[5390,5390]]],[1585491700380,["yueyuesama@DESKTOP-AH4OHTF",[[1,5390,"注：**注意**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：\n\nFROM centos\nRUN yum install wget\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"\nRUN tar -xvf redis.tar.gz\n以上执行会创建 3 层镜像。可简化为以下格式：\nFROM centos\nRUN yum install wget \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\\n    && tar -xvf redis.tar.gz\n\n如上，以 && 符号连接命令，这样执行后，只会创建 1 层镜像。"]],[5390,5390],[5805,5805]]],[1585491708225,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5455,"例如：\n\nFROM centos\nRUN yum install wget\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"\nRUN tar -xvf redis.tar.gz\n以上执行会创建 3 层镜像。可简化为以下格式：\nFROM centos\nRUN yum install wget \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\\n    && tar -xvf redis.tar.gz\n\n如上，"]],[5455,5776],[5455,5455]]],[1585491713675,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5392,"**注意**："]],[5392,5398],[5391,5391]]],[1585491716952,["yueyuesama@DESKTOP-AH4OHTF",[[1,5391,"*"],[-1,5449," && "],[1,5453," && "]],[5391,5391],[5392,5392]]],[1585491717214,["yueyuesama@DESKTOP-AH4OHTF",[[1,5392,"***"]],[5392,5392],[5393,5393]]],[1585491719349,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5393,"**"]],[5393,5393],[5391,5391]]],[1585491720975,["yueyuesama@DESKTOP-AH4OHTF",[[1,5390,"**"]],[5390,5390],[5392,5392]]],[1585492304348,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5489," 和 RUN 指令的作用**\n**FROM"]],[5482,5503],[5482,5482]]],[1585492319363,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5236,"说明：首先**FROM**引用了一个基础镜像 Nginx 作为基底（如本地不存在 nginx 镜像时， Docker 将从 Docker Hub 上拉取一个 Nginx 作为这个 Docker 镜像的基础，再按照之后的**RUN**指令执行相应的命令）。再根据**RUN**修改 Nginx 的初始页面。"]],[5236,5388],[5236,5236]]],[1585492320012,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5237,"\n"]],[5236,5236],[5235,5235]]],[1585492321025,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5236,"\n"]],[5236,5236],[5235,5235]]],[1585492337204,["yueyuesama@DESKTOP-AH4OHTF",[[1,5441,"> \n\n"]],[5430,5610],[5443,5443]]],[1585492342589,["yueyuesama@DESKTOP-AH4OHTF",[[1,5444,"  "],[1,5445,"  "],[1,5461,"  "],[1,5494,"  "],[1,5495,"  "],[1,5504,"  "],[1,5505,"  "]],[5444,5614],[5444,5628]]],[1585492347461,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5441,"> "]],[5441,5443],[5441,5441]]],[1585492348811,["yueyuesama@DESKTOP-AH4OHTF",[[1,5446,"> "]],[5446,5446],[5448,5448]]],[1585492349774,["yueyuesama@DESKTOP-AH4OHTF",[[1,5466,"> "]],[5466,5466],[5468,5468]]],[1585492351061,["yueyuesama@DESKTOP-AH4OHTF",[[1,5505,"> "]],[5505,5505],[5507,5507]]],[1585492352061,["yueyuesama@DESKTOP-AH4OHTF",[[1,5430,"> "]],[5430,5430],[5432,5432]]],[1585492353036,["yueyuesama@DESKTOP-AH4OHTF",[[1,5523,"> "]],[5523,5523],[5525,5525]]],[1585492357410,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5524,"   "]],[5524,5527],[5524,5524]]],[1585492362210,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5444,"  "]],[5446,5446],[5444,5444]]],[1585492362598,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5444,"\n"]],[5444,5444],[5443,5443]]],[1585492362923,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5443,"\n"]],[5443,5443],[5442,5442]]],[1585492363498,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5442,"\n"]],[5442,5442],[5441,5441]]],[1585492365047,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5499,"  "]],[5501,5501],[5499,5499]]],[1585492365547,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5499,"\n"]],[5499,5499],[5498,5498]]],[1585492366797,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5512,"  "]],[5514,5514],[5512,5512]]],[1585492367685,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5512,"\n"]],[5512,5512],[5511,5511]]],[1585492369353,["yueyuesama@DESKTOP-AH4OHTF",[[1,5513," "]],[5513,5513],[5514,5514]]],[1585492370391,["yueyuesama@DESKTOP-AH4OHTF",[[1,5466," "]],[5464,5464],[5465,5465]]],[1585492372355,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5465,"  "]],[5464,5467],[5465,5465]]],[1585492373742,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5445," "]],[5444,5446],[5445,5445]]],[1585492376859,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5623,"\n"]],[5622,5622],[5621,5621]]],[1585492390957,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5442," "]],[5443,5443],[5442,5442]]],[1585492391946,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5460," "]],[5461,5461],[5460,5460]]],[1585492420208,["yueyuesama@DESKTOP-AH4OHTF",[[1,5236,"\n"]],[5235,5235],[5236,5236]]],[1585492422171,["yueyuesama@DESKTOP-AH4OHTF",[[1,5237,"\n"]],[5236,5236],[5237,5237]]],[1585492436301,["yueyuesama@DESKTOP-AH4OHTF",[[1,5236,"说明：这里使用了nginx"]],[5236,5236],[5249,5249]]],[1585492436367,["yueyuesama@DESKTOP-AH4OHTF",[[1,5244," "]],[5249,5249],[5250,5250]]],[1585492439307,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5245,"nginx"]],[5250,5250],[5245,5245]]],[1585492441515,["yueyuesama@DESKTOP-AH4OHTF",[[1,5245,"Ngins"]],[5245,5245],[5250,5250]]],[1585492442069,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5249,"s"]],[5250,5250],[5249,5249]]],[1585492445642,["yueyuesama@DESKTOP-AH4OHTF",[[1,5249,"x作为"]],[5249,5249],[5252,5252]]],[1585492445709,["yueyuesama@DESKTOP-AH4OHTF",[[1,5250," "]],[5252,5252],[5253,5253]]],[1585492472458,["yueyuesama@DESKTOP-AH4OHTF",[[1,5253,"基础镜像，并对其初始页面进行了修改。"]],[5253,5253],[5271,5271]]],[1585497350241,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5460,"俩"]],[5460,5460],[5460,5460]]],[1585497352064,["yueyuesama@DESKTOP-AH4OHTF",[[1,5460,"两"]],[5460,5460],[5461,5461]]],[1585497363587,["yueyuesama@DESKTOP-AH4OHTF",[[1,5676,"\n"]],[5675,5675],[5676,5676]]],[1585497364396,["yueyuesama@DESKTOP-AH4OHTF",[[1,5695,"\n"]],[5694,5694],[5695,5695]]],[1585497364734,["yueyuesama@DESKTOP-AH4OHTF",[[1,5696,"\n"]],[5695,5695],[5696,5696]]],[1585497365696,["yueyuesama@DESKTOP-AH4OHTF",[[1,5697,"\n"]],[5695,5695],[5696,5696]]],[1585497369306,["yueyuesama@DESKTOP-AH4OHTF",[[1,5677,"\n"]],[5676,5676],[5677,5677]]],[1585497371308,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5698,"\n"]],[5697,5697],[5696,5696]]],[1585497376934,["yueyuesama@DESKTOP-AH4OHTF",[[1,5773,"\n\n"]],[5773,5773],[5774,5774]]],[1585497377108,["yueyuesama@DESKTOP-AH4OHTF",[[1,5775,"\n"]],[5774,5774],[5775,5775]]],[1585497379708,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5775,"\n"],[1,5776,"#"]],[5775,5775],[5776,5776]]],[1585497380958,["yueyuesama@DESKTOP-AH4OHTF",[[1,5776,"#Docker Compose"]],[5776,5776],[5791,5791]]],[1585497383535,["yueyuesama@DESKTOP-AH4OHTF",[[1,5777," "]],[5777,5777],[5778,5778]]],[1585497384971,["yueyuesama@DESKTOP-AH4OHTF",[[1,5792,"\n\n"]],[5792,5792],[5793,5793]]],[1585497385146,["yueyuesama@DESKTOP-AH4OHTF",[[1,5794,"\n"]],[5793,5793],[5794,5794]]],[1585497390282,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5794,"\n"],[1,5795,"#"]],[5794,5794],[5795,5795]]],[1585497390744,["yueyuesama@DESKTOP-AH4OHTF",[[1,5795,"##"]],[5795,5795],[5797,5797]]],[1585497392145,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5796,"#"]],[5797,5797],[5796,5796]]],[1585497403545,["yueyuesama@DESKTOP-AH4OHTF",[[1,5796," Docker Machine"]],[5796,5796],[5811,5811]]],[1585497407744,["yueyuesama@DESKTOP-AH4OHTF",[[1,5811,"\n\n"]],[5811,5811],[5812,5812]]],[1585497408033,["yueyuesama@DESKTOP-AH4OHTF",[[1,5813,"\n"]],[5812,5812],[5813,5813]]],[1585497408332,["yueyuesama@DESKTOP-AH4OHTF",[[1,5814,"\n"]],[5813,5813],[5814,5814]]],[1585497409719,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5814,"\n"],[1,5815,"#"]],[5814,5814],[5815,5815]]],[1585497411508,["yueyuesama@DESKTOP-AH4OHTF",[[1,5815,"# Docker Swarm"]],[5815,5815],[5829,5829]]],[1585497413457,["yueyuesama@DESKTOP-AH4OHTF",[[1,5794,"\n"]],[5793,5793],[5794,5794]]],[1585497413632,["yueyuesama@DESKTOP-AH4OHTF",[[1,5795,"\n"]],[5794,5794],[5795,5795]]],[1585497416570,["yueyuesama@DESKTOP-AH4OHTF",[[1,5816,"\n"]],[5815,5815],[5816,5816]]],[1585500623886,["yueyuesama@DESKTOP-AH4OHTF",[[1,5658,"\n"]],[5656,5656],[5657,5657]]],[1585500624074,["yueyuesama@DESKTOP-AH4OHTF",[[1,5659,"\n"]],[5657,5657],[5658,5658]]],[1585500636256,["yueyuesama@DESKTOP-AH4OHTF",[[1,5658,"类似于**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**"]],[5658,5658],[5736,5736]]],[1585500640448,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5669,"：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n"]],[5669,5729],[5669,5669]]],[1585500641585,["yueyuesama@DESKTOP-AH4OHTF",[[1,5669,"、"]],[5669,5669],[5670,5670]]],[1585500649738,["yueyuesama@DESKTOP-AH4OHTF",[[1,5677,"Dockerfile中"]],[5677,5677],[5688,5688]]],[1585500649782,["yueyuesama@DESKTOP-AH4OHTF",[[1,5687," "]],[5688,5688],[5689,5689]]],[1585500663410,["yueyuesama@DESKTOP-AH4OHTF",[[1,5689,"也定义了一些其他的指令："]],[5689,5689],[5701,5701]]],[1585500663862,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5700,"："]],[5701,5701],[5700,5700]]],[1585500666087,["yueyuesama@DESKTOP-AH4OHTF",[[1,5700,":"]],[5700,5700],[5701,5701]]],[1585500666376,["yueyuesama@DESKTOP-AH4OHTF",[[1,5703,"\n"]],[5701,5701],[5702,5702]]],[1585500668206,["yueyuesama@DESKTOP-AH4OHTF",[[1,5704,"\n"]],[5702,5702],[5703,5703]]],[1585500700715,["yueyuesama@DESKTOP-AH4OHTF",[[1,5703,"### COPY\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\nCOPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]\n\n**[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n**<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\n\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n**<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n### ADD\n\nADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n*   ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n*   ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n### CMD\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n### ENTRYPOINT\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n### ENV\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n### ARG\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n### VOLUME\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n### EXPOSE\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n### WORKDIR\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n### USER\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\nUSER <用户名>[:<用户组>]\n\n### HEALTHCHECK\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n### ONBUILD\n\n用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n格式：\n\nONBUILD <其它指令>"]],[5703,5703],[9065,9065]]],[1585500704207,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5703,"### "]],[5703,5707],[5703,5703]]],[1585500708715,["yueyuesama@DESKTOP-AH4OHTF",[[1,5703,"**"],[1,5707,"**"]],[5703,5707],[5703,5711]]],[1585500713802,["yueyuesama@DESKTOP-AH4OHTF",[[1,5749,"`"],[1,5853,"`"]],[5749,5853],[5749,5855]]],[1585500713884,["yueyuesama@DESKTOP-AH4OHTF",[[1,5749,"#### "]],[5749,5855],[5860,5860]]],[1585500717229,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5749,"#### "]],[5749,5754],[5749,5749]]],[1585500736958,["yueyuesama@DESKTOP-AH4OHTF",[[1,5857,"》"]],[5857,5857],[5858,5858]]],[1585500738313,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5857,"》"]],[5858,5858],[5857,5857]]],[1585500739123,["yueyuesama@DESKTOP-AH4OHTF",[[1,5857,">"]],[5857,5857],[5858,5858]]],[1585500744594,["yueyuesama@DESKTOP-AH4OHTF",[[1,5914,">"]],[5914,5914],[5915,5915]]],[1585500745633,["yueyuesama@DESKTOP-AH4OHTF",[[1,5984,">"]],[5984,5984],[5985,5985]]],[1585500746656,["yueyuesama@DESKTOP-AH4OHTF",[[1,6027,">"]],[6027,6027],[6028,6028]]],[1585500747967,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6026,"\n"]],[6026,6026],[6025,6025]]],[1585500748790,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5983,"\n"]],[5983,5983],[5982,5982]]],[1585500749643,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5913,"\n"]],[5913,5913],[5912,5912]]],[1585500759729,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6071,"### "]],[6071,6075],[6071,6071]]],[1585500762039,["yueyuesama@DESKTOP-AH4OHTF",[[1,6071,"**"],[1,6074,"**"]],[6071,6074],[6071,6078]]],[1585500768642,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6024,">"]],[6025,6025],[6024,6024]]],[1585500769518,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5982,">"]],[5983,5983],[5982,5982]]],[1585500770242,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5913,">"]],[5914,5914],[5913,5913]]],[1585500770867,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5857,">"]],[5858,5858],[5857,5857]]],[1585500773222,["yueyuesama@DESKTOP-AH4OHTF",[[1,5859,"*"]],[5857,5857],[5858,5858]]],[1585500774735,["yueyuesama@DESKTOP-AH4OHTF",[[1,5915,"*"]],[5913,5913],[5914,5914]]],[1585500777484,["yueyuesama@DESKTOP-AH4OHTF",[[1,5979,"****"]],[5979,5979],[5981,5981]]],[1585500779956,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5980,"***"]],[5979,5979],[5980,5980]]],[1585500780841,["yueyuesama@DESKTOP-AH4OHTF",[[1,5980,"***"]],[5980,5980],[5981,5981]]],[1585500788441,["yueyuesama@DESKTOP-AH4OHTF",[[-1,5979,"****"]],[5980,5983],[5979,5979]]],[1585500791193,["yueyuesama@DESKTOP-AH4OHTF",[[1,6025,"*"]],[6023,6023],[6024,6024]]],[1585500797241,["yueyuesama@DESKTOP-AH4OHTF",[[1,5913,"\n"]],[5912,5912],[5913,5913]]],[1585500800043,["yueyuesama@DESKTOP-AH4OHTF",[[1,6024,"\n"]],[6023,6023],[6024,6024]]],[1585500810596,["yueyuesama@DESKTOP-AH4OHTF",[[1,6081,"* "]],[6081,6081],[6083,6083]]],[1585500812220,["yueyuesama@DESKTOP-AH4OHTF",[[1,6026," "]],[6026,6026],[6027,6027]]],[1585500813532,["yueyuesama@DESKTOP-AH4OHTF",[[1,5915," "]],[5915,5915],[5916,5916]]],[1585500814495,["yueyuesama@DESKTOP-AH4OHTF",[[1,5858," "]],[5858,5858],[5859,5859]]],[1585500822389,["yueyuesama@DESKTOP-AH4OHTF",[[1,6315,"**"],[1,6318,"**"]],[6315,6318],[6315,6322]]],[1585500824737,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6311,"### "]],[6311,6315],[6311,6311]]],[1585500832439,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6729,"### "]],[6729,6733],[6729,6729]]],[1585500834282,["yueyuesama@DESKTOP-AH4OHTF",[[1,6729,"**"],[1,6739,"**"]],[6729,6739],[6729,6743]]],[1585500838228,["yueyuesama@DESKTOP-AH4OHTF",[[1,7496,"**"],[1,7499,"**"]],[7496,7499],[7496,7503]]],[1585500840302,["yueyuesama@DESKTOP-AH4OHTF",[[-1,7492,"### "]],[7492,7496],[7492,7492]]],[1585500843345,["yueyuesama@DESKTOP-AH4OHTF",[[1,7861,"**"],[1,7864,"**"]],[7861,7864],[7861,7868]]],[1585500845572,["yueyuesama@DESKTOP-AH4OHTF",[[-1,7857,"### "]],[7857,7861],[7857,7857]]],[1585500847861,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8040,"### "]],[8040,8044],[8040,8040]]],[1585500850630,["yueyuesama@DESKTOP-AH4OHTF",[[1,8040,"**"],[1,8046,"**"]],[8040,8046],[8040,8050]]],[1585500853052,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8225,"### "]],[8225,8229],[8225,8225]]],[1585500854648,["yueyuesama@DESKTOP-AH4OHTF",[[1,8225,"**"],[1,8231,"**"]],[8225,8231],[8225,8235]]],[1585500857275,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8377,"### "]],[8377,8381],[8377,8377]]],[1585500858763,["yueyuesama@DESKTOP-AH4OHTF",[[1,8377,"**"],[1,8384,"**"]],[8377,8384],[8377,8388]]],[1585500861362,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8550,"### "]],[8550,8554],[8550,8550]]],[1585500863762,["yueyuesama@DESKTOP-AH4OHTF",[[1,8550,"**"],[1,8554,"**"]],[8550,8554],[8550,8558]]],[1585500866051,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8637,"### "]],[8637,8641],[8637,8637]]],[1585500867602,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8637,"HEALTHCHECK"],[1,8648,">"]],[8637,8648],[8638,8638]]],[1585500868799,["yueyuesama@DESKTOP-AH4OHTF",[[1,8637,"HEALTHCHECK"],[-1,8637,">"]],[8638,8638],[8637,8648]]],[1585500869610,["yueyuesama@DESKTOP-AH4OHTF",[[1,8637,"**"],[1,8648,"**"]],[8637,8648],[8637,8652]]],[1585500874502,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8844,"### "]],[8844,8848],[8844,8844]]],[1585500876452,["yueyuesama@DESKTOP-AH4OHTF",[[1,8844,"**"],[1,8851,"**"]],[8844,8851],[8844,8855]]],[1585500883452,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9060,9075],[9079,9079]]],[1585500885061,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"#### "]],[9079,9079],[9060,9075]]],[1585500888257,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9060,9075],[9079,9079]]],[1585500890511,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"#### "]],[9079,9079],[9060,9075]]],[1585500893794,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"ONBUILD <其它指令>\n"],[1,9075,"~"]],[9060,9060],[9061,9061]]],[1585500895333,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"ONBUILD <其它指令>\n"],[-1,9060,"~"]],[9061,9061],[9060,9060]]],[1585500897563,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9060,9075],[9079,9079]]],[1585500902974,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"#### "]],[9060,9065],[9060,9060]]],[1585500904719,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9060,9075],[9079,9079]]],[1585500910687,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"`"],[1,9065,"`"]],[9060,9065],[9060,9067]]],[1585500910757,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9060,9067],[9086,9086]]],[1585500913059,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"#### "]],[9086,9086],[9060,9067]]],[1585500915528,["yueyuesama@DESKTOP-AH4OHTF",[[1,9067,"`"],[1,9081,"`"]],[9067,9081],[9067,9083]]],[1585500915610,["yueyuesama@DESKTOP-AH4OHTF",[[1,9060,"#### "]],[9067,9083],[9088,9088]]],[1585500918345,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"#### `#### `"]],[9060,9072],[9060,9060]]],[1585500926516,["yueyuesama@DESKTOP-AH4OHTF",[[1,8857,"* "]],[8857,8857],[8859,8859]]],[1585500929246,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9061,"\n"]],[9062,9062],[9061,9061]]],[1585500929711,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9060,"\n"]],[9061,9061],[9060,9060]]],[1585500932415,["yueyuesama@DESKTOP-AH4OHTF",[[1,9057,"* "]],[9057,9057],[9059,9059]]],[1585500947601,["yueyuesama@DESKTOP-AH4OHTF",[[1,8617,"`"],[1,8635,"`"]],[8617,8635],[8617,8637]]],[1585500947682,["yueyuesama@DESKTOP-AH4OHTF",[[1,8617,"#### "]],[8617,8637],[8642,8642]]],[1585500950098,["yueyuesama@DESKTOP-AH4OHTF",[[-1,8617,"#### "]],[8617,8622],[8617,8617]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["af37a9a2-d4e2-4f9e-babe-d814d61a358e",1585552886223,"\n---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n`docker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]`\n\n举例：\n```\ndocker pull ubuntu:16.04\n```\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n`docker run [选项] 镜像 [命令]  [ARG...]`\n\n举例：\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n`docker rm [选项] 容器[容器...]`\n\n举例：\n```\ndocker rm ubuntu\n```\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：\n```\ndocker start/stop/restart CONTAINER\n```\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：\n```\ndocker exec -it ubunut /bin/bash\n```\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n#### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"TinyXiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n首先先弄个最简单的例子。\n\n举例：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html\n```\n\n说明：这里使用了 Nginx 作为基础镜像，并对其初始页面进行了修改。\n\n**注**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。以 && 符号连接命令，这样执行后，只会创建 1 层镜像。\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下两种格式：\n\n> shell 格式：\n> `RUN <命令行命令>  `\n> `# <命令行命令> 等同于，在终端操作的 shell 命令。`\n>   exec 格式：\n> `RUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline`\n\n类似于**FROM**、**RUN**Dockerfile 中也定义了一些其他的指令:\n\n**COPY**\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n`COPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]`\n\n* **[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n* **<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n* **<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n**ADD**\n\n* ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n*   ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n*   ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n**CMD**\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n**ENTRYPOINT**\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n**ENV**\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n**ARG**\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n**VOLUME**\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n**EXPOSE**\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n**WORKDIR**\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n**USER**\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n`USER <用户名>[:<用户组>]`\n\n**HEALTHCHECK**\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n**ONBUILD**\n\n* 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n* 格式：`ONBUILD <其它指令>`\n\n#### Docker 数据共享\n\n\n\n#### Docker 网络模式\n\n\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。原理以及使用方法。\n\n## Docker Compose\n\n\n\n## Docker Machine\n\n\n\n## Docker Swarm",[[1585552878689,["yueyuesama@DESKTOP-AH4OHTF",[[-1,121,"goal: 1000"]],[121,131],[121,121]]],[1585552879217,["yueyuesama@DESKTOP-AH4OHTF",[[-1,121,"\n"]],[121,121],[120,120]]],[1585552887127,["yueyuesama@DESKTOP-AH4OHTF",[[-1,0,"\n"]],[1,1],[0,0]]],[1585552895946,["yueyuesama@DESKTOP-AH4OHTF",[[1,120,"goal: 1000\n"]],[229,229],[240,240]]],[1585552982728,["yueyuesama@DESKTOP-AH4OHTF",[[1,4719," "]],[4719,4719],[4720,4720]]],[1585553012363,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6143,"  "]],[6143,6145],[6143,6143]]],[1585553016448,["yueyuesama@DESKTOP-AH4OHTF",[[-1,6223,"  "]],[6223,6225],[6223,6223]]],[1585553116707,["yueyuesama@DESKTOP-AH4OHTF",[[1,4470,"()"]],[4470,4470],[4472,4472]]],[1585553118607,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4470,"()"]],[4472,4472],[4470,4470]]],[1585553119674,["yueyuesama@DESKTOP-AH4OHTF",[[1,4470,"（）"]],[4470,4470],[4472,4472]]],[1585553127007,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4470,"（）"]],[4472,4472],[4470,4470]]],[1585553486500,["yueyuesama@DESKTOP-AH4OHTF",[[1,9096,"#构思怎么写啊啊啊啊啊啊啊啊啊"]],[9096,9096],[9111,9111]]],[1585553490762,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9096,"#"],[1,9097,"》"]],[9096,9096],[9097,9097]]],[1585553491444,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9096,"》"]],[9097,9097],[9096,9096]]],[1585553492299,["yueyuesama@DESKTOP-AH4OHTF",[[1,9096,"?"]],[9096,9096],[9097,9097]]],[1585553493244,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9096,"?"]],[9097,9097],[9096,9096]]],[1585553493673,["yueyuesama@DESKTOP-AH4OHTF",[[1,9096,">"]],[9096,9096],[9097,9097]]],[1585553498006,["yueyuesama@DESKTOP-AH4OHTF",[[1,9131,">构思怎么写啊啊啊啊啊啊啊啊啊\n"]],[9131,9131],[9147,9147]]],[1585553500268,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9148,"\n"]],[9147,9147],[9146,9146]]],[1585553527760,["yueyuesama@DESKTOP-AH4OHTF",[[1,9146,","]],[9146,9146],[9147,9147]]],[1585553527816,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9146,","],[1,9147,"，"]],[9147,9147],[9147,9147]]],[1585553528772,["yueyuesama@DESKTOP-AH4OHTF",[[1,9147,"gj"]],[9147,9147],[9149,9149]]],[1585553529429,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9147,"gj"]],[9149,9149],[9147,9147]]],[1585553530777,["yueyuesama@DESKTOP-AH4OHTF",[[1,9147,"根据"]],[9147,9147],[9149,9149]]],[1585553531430,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9147,"根据"]],[9149,9149],[9147,9147]]],[1585553554519,["yueyuesama@DESKTOP-AH4OHTF",[[1,9147,"感觉日记不应该记录这么多的内容，而是更少一点，"]],[9147,9147],[9170,9170]]],[1585553559839,["yueyuesama@DESKTOP-AH4OHTF",[[1,9170,"惊喜"]],[9170,9170],[9172,9172]]],[1585553560927,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9170,"惊喜"]],[9172,9172],[9170,9170]]],[1585553588169,["yueyuesama@DESKTOP-AH4OHTF",[[1,9170,"精细化。配上图文。降低理解难度那就更好了。"]],[9170,9170],[9191,9191]]],[1585554518491,["yueyuesama@DESKTOP-AH4OHTF",[[1,9259,"所谓的三架马车指的是Docker"]],[9259,9259],[9275,9275]]],[1585554518598,["yueyuesama@DESKTOP-AH4OHTF",[[1,9269," "],[1,9275," "]],[9275,9275],[9276,9276]]],[1585554526688,["yueyuesama@DESKTOP-AH4OHTF",[[1,9276,"，官方提供的一下"]],[9276,9276],[9284,9284]]],[1585554527367,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9282,"一下"]],[9284,9284],[9282,9282]]],[1585554534965,["yueyuesama@DESKTOP-AH4OHTF",[[1,9282,"一些Docker"]],[9282,9282],[9290,9290]]],[1585554535012,["yueyuesama@DESKTOP-AH4OHTF",[[1,9284," "]],[9290,9290],[9291,9291]]],[1585554541475,["yueyuesama@DESKTOP-AH4OHTF",[[1,9291,"管理"]],[9291,9291],[9293,9293]]],[1585554541521,["yueyuesama@DESKTOP-AH4OHTF",[[1,9291," "]],[9293,9293],[9294,9294]]],[1585554544482,["yueyuesama@DESKTOP-AH4OHTF",[[1,9294,"根据，"]],[9294,9294],[9297,9297]]],[1585554545329,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9294,"根据，"]],[9297,9297],[9294,9294]]],[1585554554049,["yueyuesama@DESKTOP-AH4OHTF",[[1,9294,"工具，本文主要学习"]],[9294,9294],[9303,9303]]],[1585554562715,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9303," 原理以及"]],[9308,9308],[9303,9303]]],[1585554567248,["yueyuesama@DESKTOP-AH4OHTF",[[1,9303,"相关工具的"]],[9303,9303],[9308,9308]]],[1585554583135,["yueyuesama@DESKTOP-AH4OHTF",[[1,185,"仅仅是"]],[185,185],[188,188]]],[1585554584014,["yueyuesama@DESKTOP-AH4OHTF",[[-1,185,"仅仅是"]],[188,188],[185,185]]],[1585554617394,["yueyuesama@DESKTOP-AH4OHTF",[[1,185,"目前仅仅是学习过程中的记录并未整理和简化，内容过于干涩，"]],[185,185],[213,213]]],[1585554628448,["yueyuesama@DESKTOP-AH4OHTF",[[-1,212,"，"]],[213,213],[212,212]]],[1585554628730,["yueyuesama@DESKTOP-AH4OHTF",[[1,212,"。"]],[212,212],[213,213]]],[1585554633199,["yueyuesama@DESKTOP-AH4OHTF",[[-1,212,"。"]],[213,213],[212,212]]],[1585554636346,["yueyuesama@DESKTOP-AH4OHTF",[[1,212,"，猴戏"]],[212,212],[215,215]]],[1585554636925,["yueyuesama@DESKTOP-AH4OHTF",[[-1,213,"猴戏"]],[215,215],[213,213]]],[1585554638483,["yueyuesama@DESKTOP-AH4OHTF",[[1,213,"后续"]],[213,213],[215,215]]],[1585554650292,["yueyuesama@DESKTOP-AH4OHTF",[[1,215,"会有相应的改进。"]],[215,215],[223,223]]],[1585554651524,["yueyuesama@DESKTOP-AH4OHTF",[[-1,220,"改进。"]],[223,223],[220,220]]],[1585554655780,["yueyuesama@DESKTOP-AH4OHTF",[[1,220,"修改。"]],[220,220],[223,223]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["2ff39883-9a55-4415-9446-3c551f1d9976",1585576936989,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。目前仅仅是学习过程中的记录并未整理和简化，内容过于干涩，后续会有相应的修改。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n`docker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]`\n\n举例：\n```\ndocker pull ubuntu:16.04\n```\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n`docker run [选项] 镜像 [命令]  [ARG...]`\n\n举例：\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n`docker rm [选项] 容器[容器...]`\n\n举例：\n```\ndocker rm ubuntu\n```\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：\n```\ndocker start/stop/restart CONTAINER\n```\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：\n```\ndocker exec -it ubunut /bin/bash\n```\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n#### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"Tiny Xiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n首先先弄个最简单的例子。\n\n举例：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html\n```\n\n说明：这里使用了 Nginx 作为基础镜像，并对其初始页面进行了修改。\n\n**注**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。以 && 符号连接命令，这样执行后，只会创建 1 层镜像。\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下两种格式：\n\n> shell 格式：\n> `RUN <命令行命令>  `\n> `# <命令行命令> 等同于，在终端操作的 shell 命令。`\n>   exec 格式：\n> `RUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline`\n\n类似于**FROM**、**RUN**Dockerfile 中也定义了一些其他的指令:\n\n**COPY**\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n`COPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]`\n\n* **[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n* **<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n* **<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n**ADD**\n\n* ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n* ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n* ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n**CMD**\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n**ENTRYPOINT**\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n**ENV**\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n**ARG**\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n**VOLUME**\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n**EXPOSE**\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n**WORKDIR**\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n**USER**\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n`USER <用户名>[:<用户组>]`\n\n**HEALTHCHECK**\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n**ONBUILD**\n\n* 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n* 格式：`ONBUILD <其它指令>`\n\n#### Docker 数据共享\n\n>构思怎么写啊啊啊啊啊啊啊啊啊\n\n#### Docker 网络模式\n\n>构思怎么写啊啊啊啊啊啊啊啊啊，感觉日记不应该记录这么多的内容，而是更少一点，精细化。配上图文。降低理解难度那就更好了。\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。所谓的三架马车指的是 Docker，官方提供的一些 Docker 管理工具，本文主要学习相关工具的使用方法。\n\n## Docker Compose\n\n\n\n## Docker Machine\n\n\n\n## Docker Swarm",[[1585576903614,["yueyuesama@DESKTOP-AH4OHTF",[[1,9372,"Docker Compose 是 Docker 官⽅编排（Orchestration）项⽬之⼀，负责快速的部署分布式应⽤。其代\n码⽬前在https://github.com/docker/compose上开源。Compose 定位是 「定义和运⾏多个 Docker 容\n器的应⽤（Defining and running multi-container Docker applications）」，其前身是开源项⽬ Fig 。"]],[9372,9372],[9585,9585]]],[1585576910239,["yueyuesama@DESKTOP-AH4OHTF",[[1,9473,"）"]],[9473,9473],[9474,9474]]],[1585576911522,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9473,"）"]],[9474,9474],[9473,9473]]],[1585576912339,["yueyuesama@DESKTOP-AH4OHTF",[[1,9473,")"]],[9473,9473],[9474,9474]]],[1585576916164,["yueyuesama@DESKTOP-AH4OHTF",[[1,9440,"("]],[9440,9440],[9441,9441]]],[1585576918966,["yueyuesama@DESKTOP-AH4OHTF",[[1,9440,"{}"]],[9440,9440],[9442,9442]]],[1585576919909,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9440,"{}"]],[9442,9442],[9440,9440]]],[1585576920637,["yueyuesama@DESKTOP-AH4OHTF",[[1,9440,"[]"]],[9440,9440],[9442,9442]]],[1585576923814,["yueyuesama@DESKTOP-AH4OHTF",[[1,9441,"Githu"]],[9441,9441],[9446,9446]]],[1585576924384,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9444,"hu"]],[9446,9446],[9444,9444]]],[1585576925201,["yueyuesama@DESKTOP-AH4OHTF",[[1,9444,"Hub"]],[9444,9444],[9447,9447]]],[1585576932522,["yueyuesama@DESKTOP-AH4OHTF",[[1,9597,"\n"]],[9595,9595],[9596,9596]]],[1585576933659,["yueyuesama@DESKTOP-AH4OHTF",[[1,9598,"\n"]],[9596,9596],[9597,9597]]],[1585576943563,["yueyuesama@DESKTOP-AH4OHTF",[[1,9597,"zhiq"]],[9597,9597],[9601,9601]]],[1585576945146,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9597,"zhiq"]],[9601,9601],[9597,9597]]],[1585576959237,["yueyuesama@DESKTOP-AH4OHTF",[[1,9597,"之前我们学过编写单一的``"]],[9597,9597],[9610,9610]]],[1585576966736,["yueyuesama@DESKTOP-AH4OHTF",[[1,9609,"Dockerfilr"]],[9609,9609],[9619,9619]]],[1585576967245,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9618,"r"]],[9619,9619],[9618,9618]]],[1585576967950,["yueyuesama@DESKTOP-AH4OHTF",[[1,9618,"e"]],[9618,9618],[9619,9619]]],[1585576970229,["yueyuesama@DESKTOP-AH4OHTF",[[1,9620,"文件"]],[9620,9620],[9622,9622]]],[1585576971957,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9620,"文件"]],[9622,9622],[9620,9620]]],[1585576995739,["yueyuesama@DESKTOP-AH4OHTF",[[1,9620,"模板文件，可以很方便的定义一个单独的"]],[9620,9620],[9638,9638]]],[1585577055513,["yueyuesama@DESKTOP-AH4OHTF",[[1,9638,"应用容器。然而在日常工作中经常会"]],[9638,9638],[9654,9654]]],[1585577106981,["yueyuesama@DESKTOP-AH4OHTF",[[1,9654,"碰到，需要多个软件相互配合来完成某个人物的情况。这时候就需要··"]],[9654,9654],[9686,9686]]],[1585577108077,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9684,"··"]],[9686,9686],[9684,9684]]],[1585577108689,["yueyuesama@DESKTOP-AH4OHTF",[[1,9684,"Compose "]],[9684,9684],[9692,9692]]],[1585577108739,["yueyuesama@DESKTOP-AH4OHTF",[[1,9684," "]],[9692,9692],[9693,9693]]],[1585577116681,["yueyuesama@DESKTOP-AH4OHTF",[[1,9693,"lai"]],[9693,9693],[9696,9696]]],[1585577118043,["yueyuesama@DESKTOP-AH4OHTF",[[1,9696,"ma"]],[9696,9696],[9698,9698]]],[1585577119138,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9693,"laima"]],[9698,9698],[9693,9693]]],[1585577121619,["yueyuesama@DESKTOP-AH4OHTF",[[1,9693,"来瞒着"]],[9693,9693],[9696,9696]]],[1585577122176,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9694,"瞒着"]],[9696,9696],[9694,9694]]],[1585577153258,["yueyuesama@DESKTOP-AH4OHTF",[[1,9694,"满足这个需求了。它让用户通过··"]],[9694,9694],[9710,9710]]],[1585577154050,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9708,"··"]],[9710,9710],[9708,9708]]],[1585577155242,["yueyuesama@DESKTOP-AH4OHTF",[[1,9708,"```"]],[9708,9708],[9711,9711]]],[1585577155950,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9710,"`"]],[9711,9711],[9710,9710]]],[1585577156920,["yueyuesama@DESKTOP-AH4OHTF",[[1,9709,"docker\u0002\n\ncompose.ymldocker\u0002\n\ncompose.yml"]],[9709,9709],[9749,9749]]],[1585577158894,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9709,"docker\u0002\n\ncompose.ymldocker\u0002\n\ncompose.yml"]],[9749,9749],[9709,9709]]],[1585577160425,["yueyuesama@DESKTOP-AH4OHTF",[[1,9709,"docker\u0002\n\ncompose.yml"]],[9709,9709],[9729,9729]]],[1585577164645,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9715,"\u0002\n\n"],[1,9718," "]],[9715,9718],[9716,9716]]],[1585577175444,["yueyuesama@DESKTOP-AH4OHTF",[[1,9728,"模板⽂件（YAML 格式）来定义⼀组相关联的应⽤容器为⼀个项⽬（project）。"]],[9728,9728],[9769,9769]]],[1585577185996,["yueyuesama@DESKTOP-AH4OHTF",[[1,9771,"\n"]],[9770,9770],[9771,9771]]],[1585577186675,["yueyuesama@DESKTOP-AH4OHTF",[[1,9772,"\n"]],[9771,9771],[9772,9772]]],[1585577187475,["yueyuesama@DESKTOP-AH4OHTF",[[1,9771,"Compose 中有两个重要的概念：\n\n服务 (service)：⼀个应⽤的容器，实际上可以包括若⼲运⾏相同镜像的容器实例。\n\n项⽬ (project)：由⼀组关联的应⽤容器组成的⼀个完整业务单元，在 docker-compose.yml ⽂件中\n\n定义。"]],[9771,9771],[9899,9899]]],[1585577191637,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9895,"\n"]],[9896,9896],[9895,9895]]],[1585577192235,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9894,"\n"]],[9895,9895],[9894,9894]]],[1585577196616,["yueyuesama@DESKTOP-AH4OHTF",[[1,9791,"*"]],[9791,9791],[9792,9792]]],[1585577197754,["yueyuesama@DESKTOP-AH4OHTF",[[1,9836,"*"]],[9836,9836],[9837,9837]]],[1585577198915,["yueyuesama@DESKTOP-AH4OHTF",[[1,9792," "]],[9792,9792],[9793,9793]]],[1585577199603,["yueyuesama@DESKTOP-AH4OHTF",[[1,9838," "]],[9838,9838],[9839,9839]]],[1585577206199,["yueyuesama@DESKTOP-AH4OHTF",[[1,9797,"**"],[1,9804,"**"]],[9797,9804],[9797,9808]]],[1585577207861,["yueyuesama@DESKTOP-AH4OHTF",[[1,9847,"**"],[1,9854,"**"]],[9847,9854],[9847,9858]]],[1585577246522,["yueyuesama@DESKTOP-AH4OHTF",[[1,9910,"* \n"]],[9909,9909],[9912,9912]]],[1585577246683,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9910,"* "]],[9912,9912],[9911,9911]]],[1585577247136,["yueyuesama@DESKTOP-AH4OHTF",[[1,9911,"安装与卸载\n\nCompose ⽀持 Linux、macOS、Windows 10 三⼤平台。Compose 可以通过 Python 的包管理⼯\n\n具 pip 进⾏安装，也可以直接下载编译好的⼆进制⽂件使⽤，甚⾄能够直接在 Docker 容器中运⾏。\n\n前两种⽅式是传统⽅式，适合本地环境下安装使⽤；最后⼀种⽅式则不破坏系统环境，更适合云计算\n\n场景。Docker for Mac 、Docker for Windows ⾃带 docker-compose ⼆进制⽂件，安装 Docker 之后\n\n可以直接使⽤。\n\n$ docker-compose --version\n\ndocker-compose version 1.17.1, build 6d101fb"]],[9911,9911],[10240,10240]]],[1585577252339,["yueyuesama@DESKTOP-AH4OHTF",[[1,9911,"### "]],[9911,9911],[9915,9915]]],[1585577282913,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9932," Linux、macOS、Windows 10 三⼤平台"],[1,9960,"主流"]],[9932,9932],[9934,9934]]],[1585577285204,["yueyuesama@DESKTOP-AH4OHTF",[[1,9934,"操作系统"]],[9934,9934],[9938,9938]]],[1585577290593,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9964,"\n\n"]],[9964,9966],[9964,9964]]],[1585577291908,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10016,"\n"]],[10017,10017],[10016,10016]]],[1585577292232,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10015,"\n"]],[10016,10016],[10015,10015]]],[1585577293420,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10060,"\n"]],[10061,10061],[10060,10060]]],[1585577293719,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10059,"\n"]],[10060,10060],[10059,10059]]],[1585577312167,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9951," Python 的包管理⼯具 "]],[9951,9966],[9951,9951]]],[1585577315319,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9954," 进⾏安装，也可以直接下载编译好的"]],[9954,9971],[9954,9954]]],[1585577316936,["yueyuesama@DESKTOP-AH4OHTF",[[1,9954,"、"]],[9954,9954],[9955,9955]]],[1585577324537,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9960,"使⽤，甚⾄能够直接在"],[1,9970,"、"]],[9960,9960],[9961,9961]]],[1585577332885,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9971,"中运⾏。前两种⽅式是传统⽅式，适合本地环境下安装使⽤；最后⼀种⽅式则不破坏系统环境，更适合云计算场景。Docker for Mac 、Docker for Windows ⾃带 docker-compose ⼆进制⽂件，安装 Docker 之后\n\n可以直接使⽤。"]],[9971,9971],[9971,9971]]],[1585577336122,["yueyuesama@DESKTOP-AH4OHTF",[[1,9971,"进行安装。"]],[9971,9971],[9976,9976]]],[1585577352806,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9978,"$ docker-compose --version"],[-1,10005,"\ndocker-compose version 1.17.1, build 6d101fb"]],[9978,10050],[9979,9979]]],[1585577395442,["yueyuesama@DESKTOP-AH4OHTF",[[1,9978,"### 使⽤"]],[9978,9978],[9984,9984]]],[1585578026467,["yueyuesama@DESKTOP-AH4OHTF",[[1,9986,"\n"]],[9984,9984],[9985,9985]]],[1585578026605,["yueyuesama@DESKTOP-AH4OHTF",[[1,9987,"\n"]],[9985,9985],[9986,9986]]],[1585578027092,["yueyuesama@DESKTOP-AH4OHTF",[[1,9988,"\n"]],[9986,9986],[9987,9987]]],[1585578027930,["yueyuesama@DESKTOP-AH4OHTF",[[1,9989,"\n"]],[9987,9987],[9988,9988]]],[1585578939997,["yueyuesama@DESKTOP-AH4OHTF",[[1,9986,"接着编写 Dockerfile ⽂件，内容为:FROM python:3.6-alpineADD . /codeWORKDIR /codeRUN pip install redis flaskCMD [\"python\", \"app.py\"]51然后是编写 docker-compose.yml ⽂件，这个是 Compose 使⽤的主模板⽂件。version: '3'services:web:build: .ports:- \"5000:5000\"volumes:- .:/coderedis:image: \"redis:alpine\"运⾏ compose 项⽬:$ docker-compose up此时访问本地 5000 端⼝，每次刷新⻚⾯，计数就会加 1。Docker Compose"]],[9986,9986],[10330,10330]]],[1585578948622,["yueyuesama@DESKTOP-AH4OHTF",[[1,10009,"\n"]],[10009,10009],[10010,10010]]],[1585578949821,["yueyuesama@DESKTOP-AH4OHTF",[[1,10010,"\n"]],[10009,10009],[10010,10010]]],[1585578951238,["yueyuesama@DESKTOP-AH4OHTF",[[1,10010,"···"]],[10010,10010],[10013,10013]]],[1585578952708,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10010,"···"]],[10013,10013],[10010,10010]]],[1585578953221,["yueyuesama@DESKTOP-AH4OHTF",[[1,10011,"\n"]],[10010,10010],[10011,10011]]],[1585578954375,["yueyuesama@DESKTOP-AH4OHTF",[[1,10011,"```"]],[10011,10011],[10014,10014]]],[1585578954427,["yueyuesama@DESKTOP-AH4OHTF",[[1,10014,"language\n```\n"]],[10014,10014],[10014,10022]]],[1585578956350,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10014,"language"],[1,10022,"s"]],[10014,10022],[10015,10015]]],[1585578958100,["yueyuesama@DESKTOP-AH4OHTF",[[1,10015,"hell"]],[10015,10015],[10019,10019]]],[1585578972345,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10024,"\nFROM python:3.6-alpineADD . /codeWORKDIR /codeRUN pip install redis flaskCMD [\"python\", \"app.py\"]51"]],[10124,10124],[10024,10024]]],[1585578974095,["yueyuesama@DESKTOP-AH4OHTF",[[1,10020,"\n"]],[10019,10019],[10020,10020]]],[1585578974607,["yueyuesama@DESKTOP-AH4OHTF",[[1,10021,"FROM python:3.6-alpineADD . /codeWORKDIR /codeRUN pip install redis flaskCMD [\"python\", \"app.py\"]\n"]],[10020,10020],[10118,10118]]],[1585578978984,["yueyuesama@DESKTOP-AH4OHTF",[[1,10043,"\n"]],[10043,10043],[10044,10044]]],[1585578981155,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10020,"\n"]],[10020,10020],[10019,10019]]],[1585578986207,["yueyuesama@DESKTOP-AH4OHTF",[[1,10054,"\n"]],[10054,10054],[10055,10055]]],[1585578987633,["yueyuesama@DESKTOP-AH4OHTF",[[1,10068,"\n"]],[10068,10068],[10069,10069]]],[1585578994680,["yueyuesama@DESKTOP-AH4OHTF",[[1,10096,"\n"]],[10096,10096],[10097,10097]]],[1585579004945,["yueyuesama@DESKTOP-AH4OHTF",[[1,10175,"\n"]],[10175,10175],[10176,10176]]],[1585579005469,["yueyuesama@DESKTOP-AH4OHTF",[[1,10176,"\n"]],[10176,10176],[10177,10177]]],[1585579006781,["yueyuesama@DESKTOP-AH4OHTF",[[1,10177,"\n"]],[10176,10176],[10177,10177]]],[1585579007837,["yueyuesama@DESKTOP-AH4OHTF",[[1,10177,"```"]],[10177,10177],[10180,10180]]],[1585579007889,["yueyuesama@DESKTOP-AH4OHTF",[[1,10180,"language\n```\n"]],[10180,10180],[10180,10188]]],[1585579009497,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10180,"language"],[1,10188,"s"]],[10180,10188],[10181,10181]]],[1585579011735,["yueyuesama@DESKTOP-AH4OHTF",[[1,10181,"hell"]],[10181,10181],[10185,10185]]],[1585579021642,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10191,"version: '3'services:web:build: .ports:- \"5000:5000\"volumes:- .:/coderedis:image: \"redis:alpine\""]],[10191,10287],[10191,10191]]],[1585579023131,["yueyuesama@DESKTOP-AH4OHTF",[[1,10186,"\n"]],[10185,10185],[10186,10186]]],[1585579023543,["yueyuesama@DESKTOP-AH4OHTF",[[1,10187,"\n"]],[10186,10186],[10187,10187]]],[1585579025642,["yueyuesama@DESKTOP-AH4OHTF",[[1,10186,"version: '3'services:web:build: .ports:- \"5000:5000\"volumes:- .:/coderedis:image: \"redis:alpine\""]],[10186,10186],[10282,10282]]],[1585579028534,["yueyuesama@DESKTOP-AH4OHTF",[[1,10198,"\n"]],[10198,10198],[10199,10199]]],[1585579030945,["yueyuesama@DESKTOP-AH4OHTF",[[1,10208,"\n"]],[10208,10208],[10209,10209]]],[1585579032219,["yueyuesama@DESKTOP-AH4OHTF",[[1,10209,"  "]],[10209,10209],[10211,10211]]],[1585579033832,["yueyuesama@DESKTOP-AH4OHTF",[[1,10215,"\n  "]],[10215,10215],[10218,10218]]],[1585579037743,["yueyuesama@DESKTOP-AH4OHTF",[[1,10226,"\n  "]],[10226,10226],[10229,10229]]],[1585579042530,["yueyuesama@DESKTOP-AH4OHTF",[[1,10248,"\n  "]],[10248,10248],[10251,10251]]],[1585579046432,["yueyuesama@DESKTOP-AH4OHTF",[[1,10261,"\n    "]],[10261,10261],[10266,10266]]],[1585579049042,["yueyuesama@DESKTOP-AH4OHTF",[[1,10273,"\n    "]],[10273,10273],[10278,10278]]],[1585579050891,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10277," "]],[10278,10278],[10277,10277]]],[1585579055905,["yueyuesama@DESKTOP-AH4OHTF",[[1,10283,"\n   "]],[10283,10283],[10287,10287]]],[1585579060255,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10276," "]],[10277,10277],[10276,10276]]],[1585579063419,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10285," "]],[10286,10286],[10285,10285]]],[1585579080778,["yueyuesama@DESKTOP-AH4OHTF",[[1,10218,"  "]],[10218,10218],[10220,10220]]],[1585579082228,["yueyuesama@DESKTOP-AH4OHTF",[[1,10231,"  "]],[10231,10231],[10233,10233]]],[1585579082808,["yueyuesama@DESKTOP-AH4OHTF",[[1,10255,"  "]],[10255,10255],[10257,10257]]],[1585579083691,["yueyuesama@DESKTOP-AH4OHTF",[[1,10272,"  "]],[10272,10272],[10274,10274]]],[1585579085104,["yueyuesama@DESKTOP-AH4OHTF",[[1,10293,"  "]],[10293,10293],[10295,10295]]],[1585579093130,["yueyuesama@DESKTOP-AH4OHTF",[[1,10337,"\n"]],[10337,10337],[10338,10338]]],[1585579095319,["yueyuesama@DESKTOP-AH4OHTF",[[1,10338,"`"]],[10338,10338],[10339,10339]]],[1585579097773,["yueyuesama@DESKTOP-AH4OHTF",[[1,10358,"`"]],[10358,10358],[10359,10359]]],[1585579099938,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10339,"$ "]],[10341,10341],[10339,10339]]],[1585579101652,["yueyuesama@DESKTOP-AH4OHTF",[[1,10357,"\n"]],[10357,10357],[10358,10358]]],[1585579104850,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10388,"Docker Compose\n"]],[10388,10403],[10388,10388]]],[1585579106387,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10390,"\n"]],[10389,10389],[10388,10388]]],[1585579108833,["yueyuesama@DESKTOP-AH4OHTF",[[1,10358,"\n"]],[10357,10357],[10358,10358]]],[1585579109752,["yueyuesama@DESKTOP-AH4OHTF",[[1,10338,"\n"]],[10337,10337],[10338,10338]]],[1585579117239,["yueyuesama@DESKTOP-AH4OHTF",[[1,10126,"\n"]],[10126,10126],[10127,10127]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["ca157faa-ca3c-41e7-8c37-28db901815c6",1585626242912,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。目前仅仅是学习过程中的记录并未整理和简化，内容过于干涩，后续会有相应的修改。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了更多的压榨计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多步虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就更符合人们的需求。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。）\n\n既然大致的明白的 Docker 的原理，那么就需要我们结合实际情况来进行学习。\n\n## 镜像与容器的基本操作\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n### 常规操作\n\n#### 获取容器\n\n`docker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]`\n\n举例：\n```\ndocker pull ubuntu:16.04\n```\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n#### 运行容器\n\n`docker run [选项] 镜像 [命令]  [ARG...]`\n\n举例：\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n#### 删除容器\n\n`docker rm [选项] 容器[容器...]`\n\n举例：\n```\ndocker rm ubuntu\n```\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n### 初阶操作\n\n#### 列出镜像\n\n`docker image ls`\n\n#### 镜像大小\n\n`docker system df`\n\n#### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：\n```\ndocker start/stop/restart CONTAINER\n```\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n#### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：\n```\ndocker exec -it ubunut /bin/bash\n```\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n#### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 进阶操作\n\n#### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"Tiny Xiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n首先先弄个最简单的例子。\n\n举例：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html\n```\n\n说明：这里使用了 Nginx 作为基础镜像，并对其初始页面进行了修改。\n\n**注**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。以 && 符号连接命令，这样执行后，只会创建 1 层镜像。\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下两种格式：\n\n> shell 格式：\n> `RUN <命令行命令>  `\n> `# <命令行命令> 等同于，在终端操作的 shell 命令。`\n>   exec 格式：\n> `RUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline`\n\n类似于**FROM**、**RUN**Dockerfile 中也定义了一些其他的指令:\n\n**COPY**\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n`COPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]`\n\n* **[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n* **<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n* **<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n**ADD**\n\n* ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n* ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n* ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n**CMD**\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n**ENTRYPOINT**\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n**ENV**\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n**ARG**\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n**VOLUME**\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n**EXPOSE**\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n**WORKDIR**\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n**USER**\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n`USER <用户名>[:<用户组>]`\n\n**HEALTHCHECK**\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n**ONBUILD**\n\n* 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n* 格式：`ONBUILD <其它指令>`\n\n#### Docker 数据共享\n\n>构思怎么写啊啊啊啊啊啊啊啊啊\n\n#### Docker 网络模式\n\n>构思怎么写啊啊啊啊啊啊啊啊啊，感觉日记不应该记录这么多的内容，而是更少一点，精细化。配上图文。降低理解难度那就更好了。\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。所谓的三架马车指的是 Docker，官方提供的一些 Docker 管理工具，本文主要学习相关工具的使用方法。\n\n## Docker Compose\n\nDocker Compose 是 Docker 官⽅编排（Orchestration）项⽬之⼀，负责快速的部署分布式应⽤。其代\n码⽬前在[GitHub](https://github.com/docker/compose)上开源。Compose 定位是 「定义和运⾏多个 Docker 容\n器的应⽤（Defining and running multi-container Docker applications）」，其前身是开源项⽬ Fig 。\n\n之前我们学过编写单一的`Dockerfile`模板文件，可以很方便的定义一个单独的应用容器。然而在日常工作中经常会碰到，需要多个软件相互配合来完成某个人物的情况。这时候就需要 Compose 来满足这个需求了。它让用户通过`docker compose.yml`模板⽂件（YAML 格式）来定义⼀组相关联的应⽤容器为⼀个项⽬（project）。\n\nCompose 中有两个重要的概念：\n\n* 服务 (**service**)：⼀个应⽤的容器，实际上可以包括若⼲运⾏相同镜像的容器实例。\n\n* 项⽬ (**project**)：由⼀组关联的应⽤容器组成的⼀个完整业务单元，在 docker-compose.yml ⽂件中定义。\n\n### 安装与卸载\n\nCompose ⽀持主流操作系统。Compose 可以通过pip、⼆进制⽂件、 Docker 容器进行安装。\n\n### 使⽤\n\n接着编写 Dockerfile ⽂件，内容为:\n\n```shell\nFROM python:3.6-alpine\nADD . /code\nWORKDIR /code\nRUN pip install redis flask\nCMD [\"python\", \"app.py\"]\n```\n\n然后是编写 docker-compose.yml ⽂件，这个是 Compose 使⽤的主模板⽂件。\n\n```shell\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:- \"5000:5000\"\n    volumes:- \n      .:/code\n  redis:\n    image: \"redis:alpine\"\n\n```\n\n运⾏ compose 项⽬:\n\n`docker-compose up`\n\n此时访问本地 5000 端⼝，每次刷新⻚⾯，计数就会加 1。\n\n## Docker Machine\n\n\n\n## Docker Swarm",[[1585626235068,["yueyuesama@DESKTOP-AH4OHTF",[[-1,812,"更多的压榨"],[1,817,"L"]],[812,817],[813,813]]],[1585626235454,["yueyuesama@DESKTOP-AH4OHTF",[[1,813,"H "]],[813,813],[814,814]]],[1585626235617,["yueyuesama@DESKTOP-AH4OHTF",[[1,814,"U"]],[814,814],[815,815]]],[1585626236323,["yueyuesama@DESKTOP-AH4OHTF",[[-1,812,"LHU"]],[815,815],[812,812]]],[1585626240881,["yueyuesama@DESKTOP-AH4OHTF",[[1,812,"灵活"]],[812,812],[814,814]]],[1585626245557,["yueyuesama@DESKTOP-AH4OHTF",[[1,814,"使用"]],[814,814],[816,816]]],[1585626249273,["yueyuesama@DESKTOP-AH4OHTF",[[-1,816," "]],[817,817],[816,816]]],[1585626280196,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1000,"步"]],[1001,1001],[1000,1000]]],[1585626283468,["yueyuesama@DESKTOP-AH4OHTF",[[1,1000,"层"]],[1000,1000],[1001,1001]]],[1585626308531,["yueyuesama@DESKTOP-AH4OHTF",[[1,1072,"完全隔离且"]],[1072,1072],[1077,1077]]],[1585626326042,["yueyuesama@DESKTOP-AH4OHTF",[[-1,1104,"更符合人们的需求"],[1,1112,"进入"]],[1104,1104],[1106,1106]]],[1585626332880,["yueyuesama@DESKTOP-AH4OHTF",[[1,1106,"了人们的视野"]],[1106,1106],[1112,1112]]],[1585626365802,["yueyuesama@DESKTOP-AH4OHTF",[[1,2337,"对于linux"]],[2337,2337],[2344,2344]]],[1585626365854,["yueyuesama@DESKTOP-AH4OHTF",[[1,2339," "]],[2344,2344],[2345,2345]]],[1585626367393,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2339," linux"]],[2345,2345],[2339,2339]]],[1585626369326,["yueyuesama@DESKTOP-AH4OHTF",[[1,2339,"Linux"]],[2339,2339],[2344,2344]]],[1585626369373,["yueyuesama@DESKTOP-AH4OHTF",[[1,2339," "]],[2344,2344],[2345,2345]]],[1585626372080,["yueyuesama@DESKTOP-AH4OHTF",[[1,2345,"内核"]],[2345,2345],[2347,2347]]],[1585626372127,["yueyuesama@DESKTOP-AH4OHTF",[[1,2345," "]],[2347,2347],[2348,2348]]],[1585626373006,["yueyuesama@DESKTOP-AH4OHTF",[[1,2348,"的"]],[2348,2348],[2349,2349]]],[1585626373893,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2348,"的"]],[2349,2349],[2348,2348]]],[1585626378991,["yueyuesama@DESKTOP-AH4OHTF",[[1,2348,"指令机器"]],[2348,2348],[2352,2352]]],[1585626379505,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2350,"机器"]],[2352,2352],[2350,2350]]],[1585626397540,["yueyuesama@DESKTOP-AH4OHTF",[[1,2350,"及其层级关系的部分有点晦涩。"]],[2350,2350],[2364,2364]]],[1585626431528,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2371,"的"]],[2372,2372],[2371,2371]]],[1585626434965,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2373,"的"]],[2374,2374],[2373,2373]]],[1585626442077,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2388,"需"]],[2389,2389],[2388,2388]]],[1585626521813,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2405,"## 镜像与容器的基本操作"]],[2405,2408],[2405,2405]]],[1585626527125,["yueyuesama@DESKTOP-AH4OHTF",[[1,2402,"一下容器"]],[2402,2402],[2406,2406]]],[1585626528299,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2404,"容器"]],[2406,2406],[2404,2404]]],[1585626528787,["yueyuesama@DESKTOP-AH4OHTF",[[1,2404,"镜像与容器的基本操作"]],[2404,2404],[2414,2414]]],[1585626532223,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2418,"\n"]],[2417,2417],[2417,2417]]],[1585626532925,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2417,"\n"]],[2417,2417],[2417,2417]]],[1585626535171,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2457,"#"]],[2458,2458],[2457,2457]]],[1585626535486,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2467,"#"]],[2467,2467],[2466,2466]]],[1585626538950,["yueyuesama@DESKTOP-AH4OHTF",[[-1,2754,"#"]],[2754,2754],[2753,2753]]],[1585626541337,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3702,"#"]],[3702,3702],[3701,3701]]],[1585626545709,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3901,"#"]],[3901,3901],[3900,3900]]],[1585626546448,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3911,"#"]],[3910,3910],[3909,3909]]],[1585626549462,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3940,"#"]],[3938,3938],[3937,3937]]],[1585626550124,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3970,"#"]],[3969,3969],[3968,3968]]],[1585626550936,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4154,"#"]],[4153,4153],[4152,4152]]],[1585626560297,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4321,"#"]],[4320,4320],[4319,4319]]],[1585626576070,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4499,"#"]],[4499,4499],[4498,4498]]],[1585626576998,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4509,"#"]],[4508,4508],[4507,4507]]],[1585626579283,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9132,"#"]],[9130,9130],[9129,9129]]],[1585626580184,["yueyuesama@DESKTOP-AH4OHTF",[[-1,9166,"#"]],[9165,9165],[9164,9164]]],[1585626604725,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3725,"容器"],[1,3727,"镜像"]],[3725,3725],[3727,3727]]],[1585626611259,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3728,"容器"],[1,3730,"镜像"]],[3728,3730],[3730,3730]]],[1585626614296,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3705,"容器"],[1,3707,"镜像"]],[3705,3707],[3707,3707]]],[1585626617046,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3791,"容器"],[1,3793,"镜像"]],[3791,3793],[3793,3793]]],[1585626625723,["yueyuesama@DESKTOP-AH4OHTF",[[1,3791,"容器"],[-1,3791,"镜像"]],[3793,3793],[3791,3793]]],[1585626626228,["yueyuesama@DESKTOP-AH4OHTF",[[1,3705,"容器"],[-1,3705,"镜像"]],[3707,3707],[3705,3707]]],[1585626628565,["yueyuesama@DESKTOP-AH4OHTF",[[1,3728,"容器"],[-1,3728,"镜像"]],[3730,3730],[3728,3730]]],[1585626628876,["yueyuesama@DESKTOP-AH4OHTF",[[1,3725,"容器"],[-1,3725,"镜像"]],[3727,3727],[3725,3725]]],[1585626645045,["yueyuesama@DESKTOP-AH4OHTF",[[1,3717,"container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 删除容器\n\n`docker "],[-1,4316,"\n\n### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n"]],[4497,4497],[3699,3699]]],[1585626671098,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3717,"container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n### 删除容器\n\n`docker "],[1,4495,"\n\n### 删除容器\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n"]],[3699,3699],[4497,4497]]],[1585626681386,["yueyuesama@DESKTOP-AH4OHTF",[[-1,3705,"容器"],[1,3707,"镜像"]],[3705,3705],[3707,3707]]],[1585626982161,["yueyuesama@DESKTOP-AH4OHTF",[[1,4326,"（）"]],[4326,4326],[4328,4328]]],[1585626985900,["yueyuesama@DESKTOP-AH4OHTF",[[1,4327,"同"]],[4327,4327],[4328,4328]]],[1585626997206,["yueyuesama@DESKTOP-AH4OHTF",[[-1,4327,"同"]],[4328,4328],[4327,4327]]],[1585627018648,["yueyuesama@DESKTOP-AH4OHTF",[[1,4327,"作用同上删除镜像部分"]],[4327,4327],[4337,4337]]],[1585637621320,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10009,"接着"]],[10009,10011],[10009,10009]]],[1585637652611,["yueyuesama@DESKTOP-AH4OHTF",[[1,10197,"这里设置了两个服务，方便"]],[10197,10197],[10209,10209]]],[1585637653043,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10207,"方便"]],[10209,10209],[10207,10207]]],[1585637659909,["yueyuesama@DESKTOP-AH4OHTF",[[1,10207,"分别是``"]],[10207,10207],[10212,10212]]],[1585637662523,["yueyuesama@DESKTOP-AH4OHTF",[[1,10211,"Web"]],[10211,10211],[10214,10214]]],[1585637665141,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10215,"he"]],[10217,10217],[10215,10215]]],[1585637665927,["yueyuesama@DESKTOP-AH4OHTF",[[1,10215,"he"]],[10215,10215],[10217,10217]]],[1585637666480,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10215,"he"]],[10217,10217],[10215,10215]]],[1585637670247,["yueyuesama@DESKTOP-AH4OHTF",[[1,10215,"和``"]],[10215,10215],[10218,10218]]],[1585637675052,["yueyuesama@DESKTOP-AH4OHTF",[[1,10217,"redis"]],[10217,10217],[10222,10222]]],[1585637784012,[null,[[1,10223,"\n\n"]],[10223,10223],[10225,10225]]],[1585637784012,[null,[[-1,10223,"\n\n"]],[10225,10225],[10223,10223]]],[1585637736906,["yueyuesama@DESKTOP-AH4OHTF",[[1,10223,"，在填写"]],[10223,10223],[10227,10227]]],[1585637739276,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10224,"在填写"]],[10227,10227],[10224,10224]]],[1585637767111,["yueyuesama@DESKTOP-AH4OHTF",[[1,10224,"在编译程序时如果要实现容器内软件互联互通可以"]],[10224,10224],[10246,10246]]],[1585637771149,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10242,"互通可以"]],[10246,10246],[10242,10242]]],[1585637782438,["yueyuesama@DESKTOP-AH4OHTF",[[1,10242,"host"]],[10242,10242],[10246,10246]]],[1585637782503,["yueyuesama@DESKTOP-AH4OHTF",[[1,10242," "]],[10246,10246],[10247,10247]]],[1585637844003,[null,[[1,10247,"\n\n"]],[10247,10247],[10249,10249]]],[1585637844003,[null,[[-1,10247,"\n\n"]],[10249,10249],[10247,10247]]],[1585637784081,["yueyuesama@DESKTOP-AH4OHTF",[[1,10247," "]],[10248,10248],[10249,10249]]],[1585637799935,["yueyuesama@DESKTOP-AH4OHTF",[[1,10249,"填写的是服务对应的名称。"]],[10249,10249],[10261,10261]]],[1585638144045,[null,[[-1,10248,"`"],[1,10249,"处"],[1,10261,"\n\n`"]],[10248,10248],[10264,10264]]],[1585638144045,[null,[[1,10248,"`"],[-1,10248,"处"],[-1,10261,"\n\n`"]],[10264,10264],[10248,10248]]],[1585638116088,["yueyuesama@DESKTOP-AH4OHTF",[[1,10478,"\n"]],[10476,10476],[10477,10477]]],[1585638116251,["yueyuesama@DESKTOP-AH4OHTF",[[1,10479,"\n"]],[10477,10477],[10478,10478]]],[1585638116400,["yueyuesama@DESKTOP-AH4OHTF",[[1,10480,"\n"]],[10478,10478],[10479,10479]]],[1585638117448,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10480,"\n"]],[10479,10479],[10478,10478]]],[1585638142104,["yueyuesama@DESKTOP-AH4OHTF",[[1,10478,"### Compose "]],[10478,10478],[10490,10490]]],[1585638204327,[null,[[-1,10248,"`"],[1,10249,"处"],[1,10261,"\n\n`"],[-1,10477," ##"],[1,10492,"## "]],[10248,10248],[10495,10495]]],[1585638204327,[null,[[1,10248,"`"],[-1,10248,"处"],[-1,10261,"\n\n`"],[1,10480," ##"],[-1,10492,"## "]],[10495,10495],[10248,10248]]],[1585638144625,["yueyuesama@DESKTOP-AH4OHTF",[[1,10490,"命令"]],[10490,10490],[10492,10492]]],[1585638145255,["yueyuesama@DESKTOP-AH4OHTF",[[1,10494,"\n"]],[10492,10492],[10493,10493]]],[1585638185819,["yueyuesama@DESKTOP-AH4OHTF",[[1,10495,"\n"]],[10493,10493],[10494,10494]]],[1585638186383,["yueyuesama@DESKTOP-AH4OHTF",[[1,10494,"对于 Compose 来说，⼤部分命令的对象既可以是项⽬本身，也可以指定为项⽬中的服务或者容器。\n\n如果没有特别的说明，命令对象将是项⽬，这意味着项⽬中所有的服务都会受到命令影响。\n\n执⾏docker-compose [COMMAND] --help或者docker-compose help [COMMAND]可以查看具体某个\n\n命令的使⽤格式。\n\ndocker-compose 命令的基本的使⽤格式是:\n\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n\n命令选项：\n\n-f, --file FILE 指定使⽤的 Compose 模板⽂件，默认为 docker-compose.yml，可以多次指定。\n\n-p, --project-name NAME 指定项⽬名称，默认将使⽤所在⽬录名称作为项⽬名。\n\n--x-networking 使⽤ Docker 的可拔插⽹络后端特性\n\n--x-network-driver DRIVER 指定⽹络后端的驱动，默认为 bridge\n\n--verbose 输出更多调试信息。\n\n-v, --version 打印版本并退出。\n\nbuild 格式为docker-compose build [options] [SERVICE...]。 构建（重新构建）项⽬中的服务容器。服\n\n务容器⼀旦构建后，将会带上⼀个标记名，例如对于 web 项⽬中的⼀个 db 容器，可能是 web_db。\n\n可以随时在项⽬⽬录下运⾏ docker-compose build 来重新构建服务。选项包括：\n\n--force-rm 删除构建过程中的临时容器。\n\n--no-cache 构建镜像过程中不使⽤ cache（这将加⻓构建过程）。\n\n--pull 始终尝试通过 pull 来获取更新版本的镜像。\n\nconfig: 验证 Compose ⽂件格式是否正确，若正确则显示配置，若格式错误显示错误原因"]],[10494,10494],[11336,11336]]],[1585638195533,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10659,"\n"]],[10660,10660],[10659,10659]]],[1585638195734,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10658,"\n"]],[10659,10659],[10658,10658]]],[1585638200333,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11084,"\n"]],[11085,11085],[11084,11084]]],[1585638201144,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11083,"\n"]],[11084,11084],[11083,11083]]],[1585638202132,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11136,"\n"]],[11137,11137],[11136,11136]]],[1585638202707,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11135,"\n"]],[11136,11136],[11135,11135]]],[1585638264056,[null,[[-1,10248,"`"],[1,10249,"处"],[1,10261,"\n\n`"],[-1,10475,"## "],[1,11332,"## "]],[10248,10248],[11335,11335]]],[1585638264056,[null,[[1,10248,"`"],[-1,10248,"处"],[-1,10261,"\n\n`"],[1,10478,"## "],[-1,11332,"## "]],[11335,11335],[10248,10248]]],[1585638204507,["yueyuesama@DESKTOP-AH4OHTF",[[1,11136,"\n"]],[11136,11136],[11137,11137]]],[1585638211128,["yueyuesama@DESKTOP-AH4OHTF",[[1,10697,"·"]],[10697,10697],[10698,10698]]],[1585638212569,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10755,"]"]],[10756,10756],[10755,10755]]],[1585638214084,["yueyuesama@DESKTOP-AH4OHTF",[[1,10755,"]"]],[10755,10755],[10756,10756]]],[1585638216219,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10697,"·"]],[10698,10698],[10697,10697]]],[1585638216776,["yueyuesama@DESKTOP-AH4OHTF",[[1,10697,"·"]],[10697,10697],[10698,10698]]],[1585638217494,["yueyuesama@DESKTOP-AH4OHTF",[[-1,10697,"·"]],[10698,10698],[10697,10697]]],[1585638218424,["yueyuesama@DESKTOP-AH4OHTF",[[1,10697,"`"]],[10697,10697],[10698,10698]]],[1585638220986,["yueyuesama@DESKTOP-AH4OHTF",[[1,10756,"`"]],[10756,10756],[10757,10757]]],[1585638224262,["yueyuesama@DESKTOP-AH4OHTF",[[1,10766,"* "]],[10766,10766],[10768,10768]]],[1585638227781,["yueyuesama@DESKTOP-AH4OHTF",[[1,10835,"* "]],[10835,10835],[10837,10837]]],[1585638228556,["yueyuesama@DESKTOP-AH4OHTF",[[1,10887,"* "]],[10887,10887],[10889,10889]]],[1585638229956,["yueyuesama@DESKTOP-AH4OHTF",[[1,10926,"* "]],[10926,10926],[10928,10928]]],[1585638231169,["yueyuesama@DESKTOP-AH4OHTF",[[1,10976,"* "]],[10976,10976],[10978,10978]]],[1585638232619,["yueyuesama@DESKTOP-AH4OHTF",[[1,10999,"* "]],[10999,10999],[11001,11001]]],[1585638245718,["yueyuesama@DESKTOP-AH4OHTF",[[1,11200,"* "]],[11200,11200],[11202,11202]]],[1585638246730,["yueyuesama@DESKTOP-AH4OHTF",[[1,11228,"* "]],[11228,11228],[11230,11230]]],[1585638247430,["yueyuesama@DESKTOP-AH4OHTF",[[1,11270,"* "]],[11270,11270],[11272,11272]]],[1585638252550,["yueyuesama@DESKTOP-AH4OHTF",[[1,11352,"."]],[11352,11352],[11353,11353]]],[1585638254505,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11352,"."]],[11353,11353],[11352,11352]]],[1585638255036,["yueyuesama@DESKTOP-AH4OHTF",[[1,11352,"。"]],[11352,11352],[11353,11353]]],[1585638444061,[null,[[-1,10248,"`"],[1,10249,"处"],[1,10261,"\n\n`"],[-1,10475,"## "],[1,11149,"\n\n"],[-1,11150,"\n"],[-1,11199,"-"],[1,11202,"-"],[-1,11227,"-"],[1,11230,"-"],[-1,11269,"-"],[1,11272,"-"],[-1,11351,"\n"],[1,11354,"\n## "]],[10248,10248],[11358,11358]]],[1585638444061,[null,[[1,10248,"`"],[-1,10248,"处"],[-1,10261,"\n\n`"],[1,10478,"## "],[-1,11149,"\n\n"],[1,11152,"\n"],[1,11200,"-"],[-1,11202,"-"],[1,11228,"-"],[-1,11230,"-"],[1,11270,"-"],[-1,11272,"-"],[1,11352,"\n"],[-1,11354,"\n## "]],[11358,11358],[10248,10248]]],[1585638418009,["yueyuesama@DESKTOP-AH4OHTF",[[1,11355,"\n"]],[11353,11353],[11354,11354]]],[1585638418158,["yueyuesama@DESKTOP-AH4OHTF",[[1,11356,"\n"]],[11354,11354],[11355,11355]]],[1585638419657,["yueyuesama@DESKTOP-AH4OHTF",[[1,11355,"down：此命令将会停⽌ up 命令所启动的容器，并移除⽹络\n\nexec：进⼊指定的容器。\n\nhelp：获得⼀个命令的帮助。\n\nimages：列出 Compose ⽂件中包含的镜像。\n\nkill：格式为docker-compose kill [options] [SERVICE...]。通过发送 SIGKILL 信号来强制停⽌服务容\n\n器。⽀持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n$ docker-compose kill -s SIGINT\n\nlogs：格式为docker-compose logs [options] [SERVICE...]，查看服务容器的输出。默认情况下，\n\ndocker-compose 将对不同的服务输出使⽤不同的颜⾊来区分。可以通过 --no-color 来关闭颜⾊。该\n\n命令在调试问题的时候⼗分有⽤。\n\npause：格式为docker-compose pause [SERVICE...]，暂停⼀个服务容器。\n\nport：格式为docker-compose port [options] SERVICE PRIVATE_PORT，打印某个容器端⼝所映射的\n\n公共端⼝。选项：\n\n--protocol=proto 指定端⼝协议，tcp（默认值）或者 udp。\n\n--index=index 如果同⼀服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n\nps：格式为docker-compose ps [options] [SERVICE...]，列出项⽬中⽬前的所有容器。选项：\n\n-q 只打印容器的 ID 信息。\n\npull：格式为 docker-compose pull [options] [SERVICE...] ，拉取服务依赖的镜像。选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n\npush：推送服务依赖的镜像到 Docker 镜像仓库。\n\nrestart：格式为docker-compose restart [options] [SERVICE...]，重启项⽬中的服务。选项：\n\n-t, --timeout TIMEOUT 指定重启前停⽌容器的超时（默认为 10 秒）。\n\nrm：格式为docker-compose rm [options] [SERVICE...],删除所有（停⽌状态的）服务容器。推荐先执\n\n⾏ docker-compose stop 命令来停⽌容器。选项：\n\n-f, --force 强制直接删除，包括⾮停⽌状态的容器。⼀般尽量不要使⽤该选项。\n\n-v 删除容器所挂载的数据卷。\n\nrun：格式为docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND]\n\n[ARGS...]，在指定服务上执⾏⼀个命令。例如：\n\n$ docker-compose run ubuntu ping docker.com\n\n将会启动⼀个 ubuntu 服务容器，并执⾏ ping docker.com 命令。默认情况下，如果存在关联，则所有\n\n关联的服务将会⾃动被启动，除⾮这些服务已经在运⾏中。"]],[11355,11355],[12718,12718]]],[1585638426653,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11568,"$ "],[1,11570,"·"]],[11568,11568],[11569,11569]]],[1585638427859,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11568,"·"]],[11569,11569],[11568,11568]]],[1585638428391,["yueyuesama@DESKTOP-AH4OHTF",[[1,11568,"`"]],[11568,11568],[11569,11569]]],[1585638429365,["yueyuesama@DESKTOP-AH4OHTF",[[1,11598,"`"]],[11598,11598],[11599,11599]]],[1585638432752,["yueyuesama@DESKTOP-AH4OHTF",[[1,11601,"down：此命令将会停⽌ up 命令所启动的容器，并移除⽹络\n\nexec：进⼊指定的容器。\n\nhelp：获得⼀个命令的帮助。\n\nimages：列出 Compose ⽂件中包含的镜像。\n\nkill：格式为docker-compose kill [options] [SERVICE...]。通过发送 SIGKILL 信号来强制停⽌服务容\n\n器。⽀持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n$ docker-compose kill -s SIGINT\n\nlogs：格式为docker-compose logs [options] [SERVICE...]，查看服务容器的输出。默认情况下，\n\ndocker-compose 将对不同的服务输出使⽤不同的颜⾊来区分。可以通过 --no-color 来关闭颜⾊。该\n\n命令在调试问题的时候⼗分有⽤。\n\npause：格式为docker-compose pause [SERVICE...]，暂停⼀个服务容器。\n\nport：格式为docker-compose port [options] SERVICE PRIVATE_PORT，打印某个容器端⼝所映射的\n\n公共端⼝。选项：\n\n--protocol=proto 指定端⼝协议，tcp（默认值）或者 udp。\n\n--index=index 如果同⼀服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n\nps：格式为docker-compose ps [options] [SERVICE...]，列出项⽬中⽬前的所有容器。选项：\n\n-q 只打印容器的 ID 信息。\n\npull：格式为 docker-compose pull [options] [SERVICE...] ，拉取服务依赖的镜像。选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n\npush：推送服务依赖的镜像到 Docker 镜像仓库。\n\nrestart：格式为docker-compose restart [options] [SERVICE...]，重启项⽬中的服务。选项：\n\n-t, --timeout TIMEOUT 指定重启前停⽌容器的超时（默认为 10 秒）。\n\nrm：格式为docker-compose rm [options] [SERVICE...],删除所有（停⽌状态的）服务容器。推荐先执\n\n⾏ docker-compose stop 命令来停⽌容器。选项：\n\n-f, --force 强制直接删除，包括⾮停⽌状态的容器。⼀般尽量不要使⽤该选项。\n\n-v 删除容器所挂载的数据卷。\n\nrun：格式为docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND]\n\n[ARGS...]，在指定服务上执⾏⼀个命令。例如：\n\n$ docker-compose run ubuntu ping docker.com\n\n将会启动⼀个 ubuntu 服务容器，并执⾏ ping docker.com 命令。默认情况下，如果存在关联，则所有\n\n关联的服务将会⾃动被启动，除⾮这些服务已经在运⾏中。"]],[11601,11601],[12964,12964]]],[1585638433486,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11601,"down：此命令将会停⽌ up 命令所启动的容器，并移除⽹络\n\nexec：进⼊指定的容器。\n\nhelp：获得⼀个命令的帮助。\n\nimages：列出 Compose ⽂件中包含的镜像。\n\nkill：格式为docker-compose kill [options] [SERVICE...]。通过发送 SIGKILL 信号来强制停⽌服务容\n\n器。⽀持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n$ docker-compose kill -s SIGINT\n\nlogs：格式为docker-compose logs [options] [SERVICE...]，查看服务容器的输出。默认情况下，\n\ndocker-compose 将对不同的服务输出使⽤不同的颜⾊来区分。可以通过 --no-color 来关闭颜⾊。该\n\n命令在调试问题的时候⼗分有⽤。\n\npause：格式为docker-compose pause [SERVICE...]，暂停⼀个服务容器。\n\nport：格式为docker-compose port [options] SERVICE PRIVATE_PORT，打印某个容器端⼝所映射的\n\n公共端⼝。选项：\n\n--protocol=proto 指定端⼝协议，tcp（默认值）或者 udp。\n\n--index=index 如果同⼀服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n\nps：格式为docker-compose ps [options] [SERVICE...]，列出项⽬中⽬前的所有容器。选项：\n\n-q 只打印容器的 ID 信息。\n\npull：格式为 docker-compose pull [options] [SERVICE...] ，拉取服务依赖的镜像。选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n\npush：推送服务依赖的镜像到 Docker 镜像仓库。\n\nrestart：格式为docker-compose restart [options] [SERVICE...]，重启项⽬中的服务。选项：\n\n-t, --timeout TIMEOUT 指定重启前停⽌容器的超时（默认为 10 秒）。\n\nrm：格式为docker-compose rm [options] [SERVICE...],删除所有（停⽌状态的）服务容器。推荐先执\n\n⾏ docker-compose stop 命令来停⽌容器。选项：\n\n-f, --force 强制直接删除，包括⾮停⽌状态的容器。⼀般尽量不要使⽤该选项。\n\n-v 删除容器所挂载的数据卷。\n\nrun：格式为docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND]\n\n[ARGS...]，在指定服务上执⾏⼀个命令。例如：\n\n$ docker-compose run ubuntu ping docker.com\n\n将会启动⼀个 ubuntu 服务容器，并执⾏ ping docker.com 命令。默认情况下，如果存在关联，则所有\n\n关联的服务将会⾃动被启动，除⾮这些服务已经在运⾏中。"]],[12964,12964],[11601,11601]]],[1585638436193,["yueyuesama@DESKTOP-AH4OHTF",[[1,11601,"* "]],[11601,11601],[11603,11603]]],[1585638442309,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11601,"* "]],[11601,11603],[11601,11601]]],[1585638504062,[null,[[-1,10248,"`"],[1,10249,"处"],[1,10261,"\n\n`"],[-1,10475,"## "],[1,11149,"\n\n"],[-1,11150,"\n"],[-1,11199,"-"],[1,11202,"-"],[-1,11227,"-"],[1,11231,"-"],[-1,11269,"-"],[1,11272,"-"],[-1,11351,"\n"],[-1,11354,"D"],[1,11355,"\n"],[1,12720,"## D"]],[10248,10248],[12724,12724]]],[1585638504062,[null,[[1,10248,"`"],[-1,10248,"处"],[-1,10261,"\n\n`"],[1,10478,"## "],[-1,11149,"\n\n"],[1,11152,"\n"],[1,11200,"-"],[-1,11202,"-"],[1,11228,"-"],[-1,11231,"-"],[1,11270,"-"],[-1,11272,"-"],[1,11352,"\n"],[1,11354,"D"],[-1,11354,"\n"],[-1,12720,"## D"]],[12724,12724],[10248,10248]]],[1585638448596,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11873,"\n"]],[11874,11874],[11873,11873]]],[1585638448720,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11872,"\n"]],[11873,11873],[11872,11872]]],[1585638454508,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11669,"\n"]],[11670,11670],[11669,11669]]],[1585638454945,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11668,"\n"]],[11669,11669],[11668,11668]]],[1585638457208,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11727,"\n"]],[11728,11728],[11727,11727]]],[1585638457408,["yueyuesama@DESKTOP-AH4OHTF",[[-1,11726,"\n"]],[11727,11727],[11726,11726]]],[1585638471044,["yueyuesama@DESKTOP-AH4OHTF",[[-1,12581,"$ "],[1,12583,"·"]],[12581,12581],[12582,12582]]],[1585638472688,["yueyuesama@DESKTOP-AH4OHTF",[[1,12623,"`"]],[12623,12623],[12624,12624]]],[1585638475569,["yueyuesama@DESKTOP-AH4OHTF",[[1,12581,"`"],[1,12582,"`"]],[12581,12582],[12581,12584]]],[1585638478883,["yueyuesama@DESKTOP-AH4OHTF",[[-1,12582,"·`"]],[12582,12584],[12582,12582]]]],null,"yueyuesama@DESKTOP-AH4OHTF"],["02707047-be02-40b1-898f-06f78b8ce64f",1585724346905,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。目前仅仅是学习过程中的记录并未整理和简化，内容过于干涩，后续会有相应的修改。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了灵活使用计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多层虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个完全隔离且适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就进入了人们的视野。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。对于 Linux 内核指令及其层级关系的部分有点晦涩。）\n\n既然大致明白 Docker 的原理，那么就要我们结合实际情况来进行学习一下镜像与容器的基本操作。\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n## 常规操作\n\n### 获取容器\n\n`docker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]`\n\n举例：\n```\ndocker pull ubuntu:16.04\n```\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n### 运行容器\n\n`docker run [选项] 镜像 [命令]  [ARG...]`\n\n举例：\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n### 删除镜像\n\n`docker rm [选项] 容器[容器...]`\n\n举例：\n```\ndocker rm ubuntu\n```\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n## 初阶操作\n\n### 列出镜像\n\n`docker image ls`\n\n### 镜像大小\n\n`docker system df`\n\n### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：\n```\ndocker start/stop/restart CONTAINER\n```\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：\n```\ndocker exec -it ubunut /bin/bash\n```\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n### 删除容器（作用同上删除镜像部分）\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n## 进阶操作\n\n### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"Tiny Xiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n首先先弄个最简单的例子。\n\n举例：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html\n```\n\n说明：这里使用了 Nginx 作为基础镜像，并对其初始页面进行了修改。\n\n**注**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。以 && 符号连接命令，这样执行后，只会创建 1 层镜像。\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下两种格式：\n\n> shell 格式：\n> `RUN <命令行命令>  `\n> `# <命令行命令> 等同于，在终端操作的 shell 命令。`\n>   exec 格式：\n> `RUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline`\n\n类似于**FROM**、**RUN**Dockerfile 中也定义了一些其他的指令:\n\n**COPY**\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n`COPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]`\n\n* **[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n* **<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n* **<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n**ADD**\n\n* ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n* ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n* ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n**CMD**\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n**ENTRYPOINT**\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n**ENV**\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n**ARG**\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n**VOLUME**\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n**EXPOSE**\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n**WORKDIR**\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n**USER**\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n`USER <用户名>[:<用户组>]`\n\n**HEALTHCHECK**\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n**ONBUILD**\n\n* 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n* 格式：`ONBUILD <其它指令>`\n\n### Docker 数据共享\n\n>构思怎么写啊啊啊啊啊啊啊啊啊\n\n### Docker 网络模式\n\n>构思怎么写啊啊啊啊啊啊啊啊啊，感觉日记不应该记录这么多的内容，而是更少一点，精细化。配上图文。降低理解难度那就更好了。\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。所谓的三架马车指的是 Docker，官方提供的一些 Docker 管理工具，本文主要学习相关工具的使用方法。\n\n## Docker Compose\n\nDocker Compose 是 Docker 官⽅编排（Orchestration）项⽬之⼀，负责快速的部署分布式应⽤。其代\n码⽬前在[GitHub](https://github.com/docker/compose)上开源。Compose 定位是 「定义和运⾏多个 Docker 容\n器的应⽤（Defining and running multi-container Docker applications）」，其前身是开源项⽬ Fig 。\n\n之前我们学过编写单一的`Dockerfile`模板文件，可以很方便的定义一个单独的应用容器。然而在日常工作中经常会碰到，需要多个软件相互配合来完成某个人物的情况。这时候就需要 Compose 来满足这个需求了。它让用户通过`docker compose.yml`模板⽂件（YAML 格式）来定义⼀组相关联的应⽤容器为⼀个项⽬（project）。\n\nCompose 中有两个重要的概念：\n\n* 服务 (**service**)：⼀个应⽤的容器，实际上可以包括若⼲运⾏相同镜像的容器实例。\n\n* 项⽬ (**project**)：由⼀组关联的应⽤容器组成的⼀个完整业务单元，在 docker-compose.yml ⽂件中定义。\n\n### 安装与卸载\n\nCompose ⽀持主流操作系统。Compose 可以通过pip、⼆进制⽂件、 Docker 容器进行安装。\n\n### 使⽤\n\n编写 Dockerfile ⽂件，内容为:\n\n```shell\nFROM python:3.6-alpine\nADD . /code\nWORKDIR /code\nRUN pip install redis flask\nCMD [\"python\", \"app.py\"]\n```\n\n然后是编写 docker-compose.yml ⽂件，这个是 Compose 使⽤的主模板⽂件。这里设置了两个服务，分别是`Web`和`redis`，在编译程序时如果要实现容器内软件互联 host 处填写的是服务对应的名称。\n\n```shell\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:- \"5000:5000\"\n    volumes:- \n      .:/code\n  redis:\n    image: \"redis:alpine\"\n\n```\n\n运⾏ compose 项⽬:\n\n`docker-compose up`\n\n此时访问本地 5000 端⼝，每次刷新⻚⾯，计数就会加 1。\n\n### Compose 命令\n\n对于 Compose 来说，⼤部分命令的对象既可以是项⽬本身，也可以指定为项⽬中的服务或者容器。\n\n如果没有特别的说明，命令对象将是项⽬，这意味着项⽬中所有的服务都会受到命令影响。\n\n执⾏docker-compose [COMMAND] --help或者docker-compose help [COMMAND]可以查看具体某个命令的使⽤格式。\n\ndocker-compose 命令的基本的使⽤格式是:\n\n`docker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]`\n\n命令选项：\n\n* -f, --file FILE 指定使⽤的 Compose 模板⽂件，默认为 docker-compose.yml，可以多次指定。\n\n* -p, --project-name NAME 指定项⽬名称，默认将使⽤所在⽬录名称作为项⽬名。\n\n* --x-networking 使⽤ Docker 的可拔插⽹络后端特性\n\n* --x-network-driver DRIVER 指定⽹络后端的驱动，默认为 bridge\n\n* --verbose 输出更多调试信息。\n\n* -v, --version 打印版本并退出。\n\nbuild 格式为docker-compose build [options] [SERVICE...]。 构建（重新构建）项⽬中的服务容器。服务容器⼀旦构建后，将会带上⼀个标记名，例如对于 web 项⽬中的⼀个 db 容器，可能是 web_db。\n\n可以随时在项⽬⽬录下运⾏ docker-compose build 来重新构建服务。选项包括：\n\n* --force-rm 删除构建过程中的临时容器。\n\n* --no-cache 构建镜像过程中不使⽤ cache（这将加⻓构建过程）。\n\n* --pull 始终尝试通过 pull 来获取更新版本的镜像。\n\nconfig: 验证 Compose ⽂件格式是否正确，若正确则显示配置，若格式错误显示错误原因。\n\ndown：此命令将会停⽌ up 命令所启动的容器，并移除⽹络\n\nexec：进⼊指定的容器。\n\nhelp：获得⼀个命令的帮助。\n\nimages：列出 Compose ⽂件中包含的镜像。\n\nkill：格式为docker-compose kill [options] [SERVICE...]。通过发送 SIGKILL 信号来强制停⽌服务容\n\n器。⽀持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n`docker-compose kill -s SIGINT`\n\nlogs：格式为docker-compose logs [options] [SERVICE...]，查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使⽤不同的颜⾊来区分。可以通过 --no-color 来关闭颜⾊。该命令在调试问题的时候⼗分有⽤。\n\npause：格式为docker-compose pause [SERVICE...]，暂停⼀个服务容器。\n\nport：格式为docker-compose port [options] SERVICE PRIVATE_PORT，打印某个容器端⼝所映射的公共端⼝。选项：\n\n--protocol=proto 指定端⼝协议，tcp（默认值）或者 udp。\n\n--index=index 如果同⼀服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n\nps：格式为docker-compose ps [options] [SERVICE...]，列出项⽬中⽬前的所有容器。选项：\n\n-q 只打印容器的 ID 信息。\n\npull：格式为 docker-compose pull [options] [SERVICE...] ，拉取服务依赖的镜像。选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n\npush：推送服务依赖的镜像到 Docker 镜像仓库。\n\nrestart：格式为docker-compose restart [options] [SERVICE...]，重启项⽬中的服务。选项：\n\n-t, --timeout TIMEOUT 指定重启前停⽌容器的超时（默认为 10 秒）。\n\nrm：格式为docker-compose rm [options] [SERVICE...],删除所有（停⽌状态的）服务容器。推荐先执\n\n⾏ docker-compose stop 命令来停⽌容器。选项：\n\n-f, --force 强制直接删除，包括⾮停⽌状态的容器。⼀般尽量不要使⽤该选项。\n\n-v 删除容器所挂载的数据卷。\n\nrun：格式为docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND]\n\n[ARGS...]，在指定服务上执⾏⼀个命令。例如：\n\n`docker-compose run ubuntu ping docker.com`\n\n将会启动⼀个 ubuntu 服务容器，并执⾏ ping docker.com 命令。默认情况下，如果存在关联，则所有\n\n关联的服务将会⾃动被启动，除⾮这些服务已经在运⾏中。\n\n## Docker Machine\n\n\n\n## Docker Swarm",[[1585724343841,["huxiuyuan@DESKTOP-V30T190",[[-1,9172,"啊"]],[9173,9173],[9172,9172]]]],null,"huxiuyuan@DESKTOP-V30T190"],["b6f2820e-0a6e-4d5d-b3a3-40f8c5da8e42",1603304692956,"---\nlayout: post\ntitle: Docker 学习日记\ncategories:\n  - 日记\ntags:\n  - Docekr\n  - 学习\nflag: red\ndate: 2020-03-27T16:49:25.000Z\ngoal: 1000\n---\n\n{% centerquote %}本文是一个 Docker 初学者学习 Docker 的过程记录。目前仅仅是学习过程中的记录并未整理和简化，内容过于干涩，后续会有相应的修改。{% endcenterquote %}\n\n<!-- more -->\n\n# DAY 1\n\n## 明确学习目标\n\n1. 容器云平台的软件设计与研发工作\n\n2. 基于容器云的CI/CD软件\n\n3. DevOps 软件系统的设计与开发\n\n4. Kubernetes 云编排服务框架的研发工作\n\n在整个学习中首先需要明白的就是什么是容器，这引出了我们的第一个问题。\n\n##  什么是容器\n\n容器（Container）可以理解为一个名称，用于描述有固定样式的打包好的一个整体。\n\n而计算机中的容器，可以类比我们生活中用于出租的小隔间，容器就是这个一个个被分隔开来的小隔间。\n\n在我们理解容器是什么之后随之而来的问题就是，原来的环境好好的，为什么要引入容器这个概念呢？它又是怎么实现的呢？\n\n## 为什么要引入容器\n\n我们引入容器的目的其实也很简单，随着计算机技术的不断更新发展，计算机系统、软件、运行环境碎片化情况越来越明显，每个用户计算机的环境都不相同，你怎么知道你的软件，能在各个机器上跑起来？如果某些老旧的模块与当前环境不兼容，那就麻烦了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。为了让用户在使用一些软件的时候不用浪费过多的时间在配置环境上，同时也是为了灵活使用计算机性能，容器的想法就由此诞生。\n\n其实在容器之前也有类似的，想减少用户配置环境的一些项目，但是原来的想法都比较粗暴，想的都是直接从硬件层面上虚拟出一整个机器，再在其上安装系统，这样在这个虚拟出来的电脑上就能运行一个环境完全虚拟可控的应用程序了。但是随之而来的问题也是很显著的，需要完整的从硬件层面上虚拟出一个机器再在上面套一个系统，系统内再套娃一个应用程序，这么多层虚拟，相应的计算性能的损耗也是惊人的。\n\n其实在实际日常使用中，我们并不需要完全的虚拟出一个新的操作系统，我们需要的只是在相同系统中虚拟出一个完全隔离且适合程序的运行环境就行。所以更为轻量级的系统层虚拟化就进入了人们的视野。\n\n## Docker 容器的简单实现方法\n\n以下以Docker作为容器典型来简单描述一下，Docker容器的实现方法，容器作为系统层面的虚拟化其实并不需要完整的虚拟出一个底层程序，很多可能直接拿来公用的部分可以直接使用宿主机，很好的一个典型就是系统内核（Kernel）。对于不同的系统，系统内核也是不同的，所以Docker在不同系统的上使用的虚拟方式也有所区别。\n\n首先，从内核共享与否\n\nDocker在Linux上共享内核，无需虚拟化，完全支持Native功能[https://docs.docker.com/engine/installation/linux/](https://docs.docker.com/engine/installation/linux/%EF%BC%89)。 \n\nDocker在windows上，启用Hyper-V[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)或者虚拟化技术[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)，通过虚拟机来实现，不共享windows内核。 \n\nDocker在mac os上，同样用虚拟化技术xhyve或者virtualbox来实现（[https://docs.docker.com/engine/installation/mac/](https://docs.docker.com/engine/installation/mac/) ），不共享Mac OS 内核。\n\n其次，能创建何种类型Docker\n\n1. Docker在Linux上共享内核，只能创建Linux类Docker。 \n\n2. Docker在Windows上，可以创建Linux类Docker和Windows类Docker。 \n\n3. Docker在Mac os上，只能创建Linux类Docker，不能创建Mac OS的Docker。\n\nDocker的虚拟化最简单的其实就是隔离机制，类似于用`chroot`命令讲根目录隔离一样，不过Docker运用的是内核（Kernel）3.8版本支持的一些新特性，这使得Docker在Linux上能获得几乎等同于Native的体验。\n\nLinux下通过内核自带的Namespace与Cgroups进行实现，Windows下可通过Hyper-V进行虚拟化。\n\n# DAY 2\n\n对于 Docker 的核心实现原理，可以查看这篇文章，[Docker 核心技术与实现原理](https://draveness.me/docker)（不过目前我有很多地方都不是很读得懂。对于 Linux 内核指令及其层级关系的部分有点晦涩。）\n\n既然大致明白 Docker 的原理，那么就要我们结合实际情况来进行学习一下镜像与容器的基本操作。\n\n类似于数据库的增、删、改、查一样，Docker 也有几个比较常规的操作。\n\n## 常规操作\n\n### 获取容器\n\n`docker pull [选项] [Docker Registery 地址[:端口]/]仓库名[:标签]`\n\n举例：\n```\ndocker pull ubuntu:16.04\n```\n\n说明：从 Docker Hub （如不填写指定的 Docker Registery 地址情况下默认为从 Docker Hub 上拉取镜像）上拉取，标签(tag)为 16.04 的 Ubuntu 镜像。\n\n[选项]说明：\n\n* **-a : **拉取所有 tagged 镜像\n\n* **--disable-content-trust :**忽略镜像的校验,默认开启\n\n### 运行容器\n\n`docker run [选项] 镜像 [命令]  [ARG...]`\n\n举例：\n```Shell\ndocker run -it --rm\n  ubuntu:16.04 \\\n  /bin/bash\n```\n\n\n说明：运行一个可交互的 ubuntu16.04 的镜像，镜像在运行结束后强行移除。\n\nOPTIONS说明：\n\n*   **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n\n*   **-d:** 后台运行容器，并返回容器ID；\n\n*  **-rm**容器在结束后删除容器；\n\n*   **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n\n*   **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n\n*   **-p:** 指定端口映射，格式为：主机(宿主)端口:容器端口\n\n*   **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n*   **--name=\"nginx-lb\":** 为容器指定一个名称；\n\n*   **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n\n*   **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n\n*   **-h \"mars\":** 指定容器的hostname；\n\n*   **-e username=\"ritchie\":** 设置环境变量；\n\n*   **--env-file=[]:** 从指定文件读入环境变量；\n\n*   **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n\n*   **-m :**设置容器使用内存最大值；\n\n*   **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n\n*   **--link=[]:** 添加链接到另一个容器；\n\n*   **--expose=[]:** 开放一个端口或一组端口；\n\n*   **--volume , -v: **绑定一个卷\n\n### 删除镜像\n\n`docker rm [选项] 容器[容器...]`\n\n举例：\n```\ndocker rm ubuntu\n```\n\n说明：删除一个已经结束且命名为 ubuntu 的容器。\n\n选项说明：\n\n*   **-f :**通过 SIGKILL 信号强制删除一个运行中的容器。\n\n*   **-l :**移除容器间的网络连接，而非容器本身。\n\n*   **-v :**删除与容器关联的卷。\n\n## 初阶操作\n\n### 列出镜像\n\n`docker image ls`\n\n### 镜像大小\n\n`docker system df`\n\n### 容器操作\n\n`docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]`\n\n举例：\n```\ndocker start/stop/restart CONTAINER\n```\n\n说明：启动已被停止的容器 CONTAINER /停止运行中的容器 CONTAINER /重启容器 CONTAINER。\n\n### 进入容器\n\n`docker exec [命令] -it [参数]`\n\n举例：\n```\ndocker exec -it ubunut /bin/bash\n```\n\n说明：进入名为 ubuntu 的容器内，并运行 bash。\n\n> 注:使用`docker exec`的好处在于，如果从这个 stdin 中退出不会导致容器停止。\n\n### 删除容器（作用同上删除镜像部分）\n\n`docker container rm CONTAINER`\n\n举例：\n```\ndocker container rm ubuntu\n```\n\n说明：删除名为 ubuntu 的容器。\n\n注：`docker container prune`为删除所有处于停止状态的容器，`docker container ls -a`删除所有容器。\n\n\n## 进阶操作\n\n### Docker 镜像定制\n\n由于 Docker 的镜像文件属性是只读，所以如果改变了由此镜像创造的 Container 能通过很简单的`docker diff CONTAINER`指令直接看到对容器存储层的改动。\n\n也因为这种特性，Docker 也有类似于 Git 类似的版本控制管理方法，可通过`docker commit`命令，将当前状态下的 Container 保存起来，甚至于保存为镜像部署在其他环境或用于 Debug 。\n\n举例：\n```shell\ndocker commit \\\n\n--author \"Tiny Xiu\" \\\n\n--message \"2020年3月29日备份\" \\\n\nwebserver \\\n\nnginx:backup001\n```\n\n其中 --author 是指定修改的作者， --message 是记录本次修改的备注。这点和 Git 版本控制相似。\n\n虽然`docker commit`命令能让我们轻松的修改一个 Docker image 但是在实际的操作中，不推荐这样进行操作。因为通过前面的学习，我们知道 Docker image 的构建是通过一层一层的 Docker 层构建上去的。通过`docker commit`来构建会徒增 Docker 的层数，消耗存储空间增加构建时间。\n\n最优的方案就是我们自己构建自己的 `Dockerfile`。Dockerfile 是⼀个⽂本⽂件，其内包含了⼀条条的指令(Instruction)，每⼀条指令构建⼀层，因此每⼀条指令的内容，就是描述该层的构建方法。\n\n首先先弄个最简单的例子。\n\n举例：\n\n```shell\nFROM nginx\nRUN echo '这是一个本地构建的nginx镜像'  >  /usr/share/nginx/html/index.html\n```\n\n说明：这里使用了 Nginx 作为基础镜像，并对其初始页面进行了修改。\n\n**注**：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。以 && 符号连接命令，这样执行后，只会创建 1 层镜像。\n\n**FROM**：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。\n\n**RUN**：用于执行后面跟着的命令行命令。有以下两种格式：\n\n> shell 格式：\n> `RUN <命令行命令>  `\n> `# <命令行命令> 等同于，在终端操作的 shell 命令。`\n>   exec 格式：\n> `RUN [\"可执行文件\",  \"参数1\",  \"参数2\"]  # 例如：  # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline`\n\n类似于**FROM**、**RUN**Dockerfile 中也定义了一些其他的指令:\n\n**COPY**\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n`COPY [--chown=<user>:<group>]  <源路径1>...  <目标路径> COPY [--chown=<user>:<group>]  [\"<源路径1>\",...  \"<目标路径>\"]`\n\n* **[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n* **<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\nCOPY hom*  /mydir/ COPY hom?.txt /mydir/\n\n* **<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n**ADD**\n\n* ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n* ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n* ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n**CMD**\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n*   CMD 在docker run 时运行。\n*   RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\nCMD <shell 命令> CMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n**ENTRYPOINT**\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是, 如果运行 docker run 时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。\n\n示例：\n\n假设已通过 Dockerfile 构建了 nginx:test 镜像：\n\nFROM nginx\n\nENTRYPOINT [\"nginx\",  \"-c\"]  # 定参 CMD [\"/etc/nginx/nginx.conf\"]  # 变参 \n\n1、不传参运行\n\n$ docker run  nginx:test\n\n容器内会默认运行以下命令，启动主进程。\n\nnginx -c /etc/nginx/nginx.conf\n\n2、传参运行\n\n$ docker run  nginx:test -c /etc/nginx/new.conf\n\n容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)\n\nnginx -c /etc/nginx/new.conf\n\n**ENV**\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\nENV <key>  <value> ENV <key1>=<value1>  <key2>=<value2>...\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\nENV NODE_VERSION 7.2.0 RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n\n**ARG**\n\n构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\nARG <参数名>[=<默认值>]\n\n**VOLUME**\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n*   避免重要的数据，因容器重启而丢失，这是非常致命的。\n*   避免容器不断变大。\n\n格式：\n\nVOLUME [\"<路径1>\",  \"<路径2>\"...] VOLUME <路径>\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n**EXPOSE**\n\n仅仅只是声明端口。\n\n作用：\n\n*   帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n*   在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\nEXPOSE <端口1>  [<端口2>...]\n\n**WORKDIR**\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\nWORKDIR <工作目录路径>\n\n**USER**\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n`USER <用户名>[:<用户组>]`\n\n**HEALTHCHECK**\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK [选项] CMD <命令>  :  这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n\n**ONBUILD**\n\n* 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n* 格式：`ONBUILD <其它指令>`\n\n### Docker 数据共享\n\n>构思怎么写啊啊啊啊啊啊啊啊\n\n### Docker 网络模式\n\n>构思怎么写啊啊啊啊啊啊啊啊啊，感觉日记不应该记录这么多的内容，而是更少一点，精细化。配上图文。降低理解难度那就更好了。\n\n# DAY 3\n\nDocker 的三架马车 Docker Compose、Docker Machine 、Docker Swarm。所谓的三架马车指的是 Docker，官方提供的一些 Docker 管理工具，本文主要学习相关工具的使用方法。\n\n## Docker Compose\n\nDocker Compose 是 Docker 官⽅编排（Orchestration）项⽬之⼀，负责快速的部署分布式应⽤。其代\n码⽬前在[GitHub](https://github.com/docker/compose)上开源。Compose 定位是 「定义和运⾏多个 Docker 容\n器的应⽤（Defining and running multi-container Docker applications）」，其前身是开源项⽬ Fig 。\n\n之前我们学过编写单一的`Dockerfile`模板文件，可以很方便的定义一个单独的应用容器。然而在日常工作中经常会碰到，需要多个软件相互配合来完成某个人物的情况。这时候就需要 Compose 来满足这个需求了。它让用户通过`docker compose.yml`模板⽂件（YAML 格式）来定义⼀组相关联的应⽤容器为⼀个项⽬（project）。\n\nCompose 中有两个重要的概念：\n\n* 服务 (**service**)：⼀个应⽤的容器，实际上可以包括若⼲运⾏相同镜像的容器实例。\n\n* 项⽬ (**project**)：由⼀组关联的应⽤容器组成的⼀个完整业务单元，在 docker-compose.yml ⽂件中定义。\n\n### 安装与卸载\n\nCompose ⽀持主流操作系统。Compose 可以通过pip、⼆进制⽂件、 Docker 容器进行安装。\n\n### 使⽤\n\n编写 Dockerfile ⽂件，内容为:\n\n```shell\nFROM python:3.6-alpine\nADD . /code\nWORKDIR /code\nRUN pip install redis flask\nCMD [\"python\", \"app.py\"]\n```\n\n然后是编写 docker-compose.yml ⽂件，这个是 Compose 使⽤的主模板⽂件。这里设置了两个服务，分别是`Web`和`redis`，在编译程序时如果要实现容器内软件互联 host 处填写的是服务对应的名称。\n\n```shell\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:- \"5000:5000\"\n    volumes:- \n      .:/code\n  redis:\n    image: \"redis:alpine\"\n\n```\n\n运⾏ compose 项⽬:\n\n`docker-compose up`\n\n此时访问本地 5000 端⼝，每次刷新⻚⾯，计数就会加 1。\n\n### Compose 命令\n\n对于 Compose 来说，⼤部分命令的对象既可以是项⽬本身，也可以指定为项⽬中的服务或者容器。\n\n如果没有特别的说明，命令对象将是项⽬，这意味着项⽬中所有的服务都会受到命令影响。\n\n执⾏docker-compose [COMMAND] --help或者docker-compose help [COMMAND]可以查看具体某个命令的使⽤格式。\n\ndocker-compose 命令的基本的使⽤格式是:\n\n`docker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]`\n\n命令选项：\n\n* -f, --file FILE 指定使⽤的 Compose 模板⽂件，默认为 docker-compose.yml，可以多次指定。\n\n* -p, --project-name NAME 指定项⽬名称，默认将使⽤所在⽬录名称作为项⽬名。\n\n* --x-networking 使⽤ Docker 的可拔插⽹络后端特性\n\n* --x-network-driver DRIVER 指定⽹络后端的驱动，默认为 bridge\n\n* --verbose 输出更多调试信息。\n\n* -v, --version 打印版本并退出。\n\nbuild 格式为docker-compose build [options] [SERVICE...]。 构建（重新构建）项⽬中的服务容器。服务容器⼀旦构建后，将会带上⼀个标记名，例如对于 web 项⽬中的⼀个 db 容器，可能是 web_db。\n\n可以随时在项⽬⽬录下运⾏ docker-compose build 来重新构建服务。选项包括：\n\n* --force-rm 删除构建过程中的临时容器。\n\n* --no-cache 构建镜像过程中不使⽤ cache（这将加⻓构建过程）。\n\n* --pull 始终尝试通过 pull 来获取更新版本的镜像。\n\nconfig: 验证 Compose ⽂件格式是否正确，若正确则显示配置，若格式错误显示错误原因。\n\ndown：此命令将会停⽌ up 命令所启动的容器，并移除⽹络\n\nexec：进⼊指定的容器。\n\nhelp：获得⼀个命令的帮助。\n\nimages：列出 Compose ⽂件中包含的镜像。\n\nkill：格式为docker-compose kill [options] [SERVICE...]。通过发送 SIGKILL 信号来强制停⽌服务容\n\n器。⽀持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n`docker-compose kill -s SIGINT`\n\nlogs：格式为docker-compose logs [options] [SERVICE...]，查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使⽤不同的颜⾊来区分。可以通过 --no-color 来关闭颜⾊。该命令在调试问题的时候⼗分有⽤。\n\npause：格式为docker-compose pause [SERVICE...]，暂停⼀个服务容器。\n\nport：格式为docker-compose port [options] SERVICE PRIVATE_PORT，打印某个容器端⼝所映射的公共端⼝。选项：\n\n--protocol=proto 指定端⼝协议，tcp（默认值）或者 udp。\n\n--index=index 如果同⼀服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n\nps：格式为docker-compose ps [options] [SERVICE...]，列出项⽬中⽬前的所有容器。选项：\n\n-q 只打印容器的 ID 信息。\n\npull：格式为 docker-compose pull [options] [SERVICE...] ，拉取服务依赖的镜像。选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n\npush：推送服务依赖的镜像到 Docker 镜像仓库。\n\nrestart：格式为docker-compose restart [options] [SERVICE...]，重启项⽬中的服务。选项：\n\n-t, --timeout TIMEOUT 指定重启前停⽌容器的超时（默认为 10 秒）。\n\nrm：格式为docker-compose rm [options] [SERVICE...],删除所有（停⽌状态的）服务容器。推荐先执\n\n⾏ docker-compose stop 命令来停⽌容器。选项：\n\n-f, --force 强制直接删除，包括⾮停⽌状态的容器。⼀般尽量不要使⽤该选项。\n\n-v 删除容器所挂载的数据卷。\n\nrun：格式为docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND]\n\n[ARGS...]，在指定服务上执⾏⼀个命令。例如：\n\n`docker-compose run ubuntu ping docker.com`\n\n将会启动⼀个 ubuntu 服务容器，并执⾏ ping docker.com 命令。默认情况下，如果存在关联，则所有\n\n关联的服务将会⾃动被启动，除⾮这些服务已经在运⾏中。\n\n## Docker Machine\n\n\n\n## Docker Swarm",[[1603304683523,["huxiuyuan@DESKTOP-V30T190",[[1,35,"（）"]],[35,35],[37,37]]],[1603304686281,["huxiuyuan@DESKTOP-V30T190",[[1,36,"未完成"]],[36,36],[39,39]]]],null,"huxiuyuan@DESKTOP-V30T190"]]}